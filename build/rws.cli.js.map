{"version":3,"file":"rws.cli.js","mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACRA,yFAA6I;AAE7I,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,sBAAc,CAAC;AAGhD,MAAM,EAAE,GAAG,mBAAO,CAAC,cAAI,CAAC,CAAC;AACzB,MAAM,IAAI,GAAG,mBAAO,CAAC,kBAAM,CAAC,CAAC;AAC7B,sEAAsE;AACtE,MAAM,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAChC,0DAA0D;AAC1D,MAAM,cAAc,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACvC,MAAM,OAAO,GAAG,CAAC,CAAC,cAAc,IAAI,cAAc,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;AAC/F,MAAM,oBAAoB,GAAe,EAAE,QAAQ,EAAE,IAAI,EAAE,WAAW,EAAE,EAAE,EAAE,CAAC;AAE7E,IAAI,cAAc,IAAI,cAAc,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC;IACrD,OAAO,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE;QACpB,MAAM,OAAO,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAC/B,oBAAoB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;QAEhE,IAAI,CAAC,oBAAoB,CAAC,QAAQ,EAAE,CAAC;YACjC,oBAAoB,CAAC,QAAQ,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;QAC/C,CAAC;IACL,CAAC,CAAC,CAAC;AACP,CAAC;KAAM,IAAI,CAAC,cAAc,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC;IAC5C,oBAAoB,CAAC,QAAQ,GAAG,IAAI,CAAC;AACzC,CAAC;KAAM,CAAC;IACJ,oBAAoB,CAAC,QAAQ,GAAG,cAAc,CAAC;AACnD,CAAC;AAED,IAAG,OAAO,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,EAAC,CAAC;IACxB,KAAI,IAAI,CAAC,GAAI,CAAC,EAAE,CAAC,IAAI,OAAO,CAAC,IAAI,CAAC,MAAM,GAAC,CAAC,EAAC,CAAC,EAAE,EAAC,CAAC;QAC5C,MAAM,SAAS,GAAW,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QAC9E,MAAM,SAAS,GAAa,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAEjD,oBAAoB,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;IAChG,CAAC;AACL,CAAC;AAED,MAAM,YAAY,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC;AAEnC,MAAM,cAAc,GAAG,oBAAY,CAAC,qBAAqB,CAAC,YAAY,CAAC,CAAC;AACxE,MAAM,YAAY,GAAG,GAAG,cAAc,oBAAoB,CAAC;AAE3D,SAAS,SAAS,CAAC,UAAkB,EAAE,cAA6B,IAAI;IAEpE,IAAG,WAAW,KAAK,IAAI,EAAC,CAAC;QACrB,WAAW,GAAG,UAAU,CAAC;QAEzB,IAAG,WAAW,EAAC,CAAC;YACZ,MAAM,YAAY,GAAG,oBAAY,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;YAEzD,IAAG,YAAY,EAAC,CAAC;gBACb,UAAU,GAAG,YAAY,CAAC;YAC9B,CAAC;QACL,CAAC;IACL,CAAC;SAAM,CAAC;QACJ,oBAAY,CAAC,SAAS,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;IACpD,CAAC;IAGD,MAAM,sBAAsB,GAAqB,wIAAkC,CAAC,OAAO,CAAC;IAE5F,OAAO,sBAAsB,EAAE,CAAC;AACpC,CAAC;AAGD,MAAM,IAAI,GAAG,KAAK,IAAI,EAAE;IACpB,MAAM,WAAW,GAAG,WAAW,CAAC;IAChC,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;IACtD,MAAM,MAAM,GAAG,OAAO,GAAG,SAAS,CAAC;IACnC,IAAI,OAAO,GAAsB,IAAI,CAAC;IAEtC,IAAI,OAAO,KAAK,MAAM,EAAE,CAAC;QACrB,MAAM,UAAU,GAAW,oBAAoB,CAAC,MAAM,IAAI,oBAAoB,CAAC,QAAQ,IAAK,eAAe,CAAC;QAE5G,MAAM,OAAO,GAAG,SAAS,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC;QAEnD,OAAO,GAAG,OAAO,CAAC;IACtB,CAAC;IAED,IAAI,SAAS,GAAG,IAAI,CAAC;IACrB,MAAM,qBAAqB,GAAG,GAAG,YAAY,YAAY,CAAC;IAE1D,IAAI,EAAE,CAAC,UAAU,CAAC,GAAG,YAAY,YAAY,CAAC,EAAE,CAAC;QAC7C,SAAS,GAAG,EAAE,CAAC,YAAY,CAAC,qBAAqB,EAAE,OAAO,CAAC,CAAC;IAChE,CAAC;IAED,IAAG,CAAC,OAAO,EAAC,CAAC;QACT,OAAO,GAAG,SAAS,CAAC,eAAe,EAAE,WAAW,CAAC,CAAC;IAEtD,CAAC;IAED,IAAG,CAAC,OAAO,EAAC,CAAC;QACT,MAAM,IAAI,KAAK,CAAC,wGAAwG,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;IAClJ,CAAC;IAED,MAAM,GAAG,GAAG,wBAAY,EAAC,OAAO,CAAC,CAAC;IAElC,MAAM,QAAQ,GAAiB,CAAC,GAAG,sBAAc,EAAE,GAAG,GAAG,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC;IAE3E,OAAO,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAE5B,MAAM,UAAU,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC,GAAe,EAAE,EAAE,CAAC,GAAG,CAAC,OAAO,EAAE,IAAI,OAAO,CAAC,CAAC;IAEhF,oBAAoB,CAAC,WAAW,GAAG,OAAO,CAAC;IAE3C,MAAM,QAAQ,GAAG,kBAAU,CAAC,2BAA2B,CAAC,YAAY,CAAC,CAAC;IAEtE,MAAM,gBAAgB,GAAG,kBAAU,CAAC,GAAG,CAAC,CAAC,MAAM,kBAAU,CAAC,iBAAiB,CAAC,CAAC,MAAM,EAAE,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;IAE/G,IAAI,CAAC,SAAS,IAAI,gBAAgB,KAAK,SAAS,EAAE,CAAC;QAC/C,EAAE,CAAC,aAAa,CAAC,qBAAqB,EAAE,gBAAgB,CAAC,CAAC;IAC9D,CAAC;IAED,IAAI,UAAU,EAAE,CAAC;QACb,MAAM,UAAU,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC;QAC/C,OAAO;IACX,CAAC;IAED,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,GAAG,YAAY,IAAI,WAAW,EAAE,CAAC,EAAE,CAAC;QACnD,MAAM,IAAI,KAAK,CAAC,kGAAkG,CAAC,CAAC;IACxH,CAAC;IAED,KAAK,CAAC,oBAAoB,OAAO,GAAG,CAAC,CAAC;IAEtC,OAAO;AACX,CAAC,CAAC;AAEF,IAAI,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE;IACb,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC;;;;;;;;;;;;;;;;;;AClIH,oHAAiD;AAEjD,gJAAwD;AACxD,0IAAoD;AACpD,wEAAwB;AAGxB,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,wBAAc,CAAC;AAE9C,MAAM,YAAY,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC;AACnC,MAAM,cAAc,GAAG,sBAAY,CAAC,qBAAqB,CAAC,YAAY,CAAC,CAAC;AACxE,MAAM,SAAS,GAAG,cAAI,CAAC,OAAO,CAAC,cAAI,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;AAEpE,MAAM,cAAe,SAAQ,kBAAO;IAIhC;QACI,KAAK,CAAC,eAAe,EAAE,MAAM,CAAC,CAAC;IACnC,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,MAAmB;QAE7B,MAAM,CAAC,KAAK,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,gBAAgB,CAAC,CAAC;QAC/C,MAAM,OAAO,GAAG,MAAM,CAAC,WAAW,CAAC;QAEnC,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,GAAY,EAAE,EAAE;YACtC,MAAM,WAAW,GAAmB,GAAG,CAAC,WAAmB,CAAC,cAAc,CAAC;YAC3E,GAAG,CAAC,GAAG,KAAK,EAAE,CAAC,MAAM,CAAC,MAAM,GAAG,GAAG,CAAC,OAAO,EAAE,CAAC,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,GAAG,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;QAC5G,CAAC,CAAC,CAAC;IACP,CAAC;;AAfa,6BAAc,GAAkB,iCAAiC,CAAC;AAoBpF,qBAAe,cAAc,CAAC,aAAa,EAAE,CAAC;;;;;;;;;;;;;;;;;;ACnC9C,oHAAiD;AACjD,gJAAwD;AAExD,yEAAoC;AACpC,0IAAoD;AACpD,MAAM,EAAE,KAAK,EAAE,GAAG,wBAAc,CAAC;AAEjC,MAAM,YAAY,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC;AAEnC,MAAM,cAAc,GAAG,sBAAY,CAAC,qBAAqB,CAAC,YAAY,CAAC,CAAC;AACxE,MAAM,YAAY,GAAG,GAAG,cAAc,oBAAoB,CAAC;AAE3D,MAAM,YAAa,SAAQ,kBAAO;IAE9B;QACI,KAAK,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;IAC3B,CAAC;IAID,KAAK,CAAC,oBAAoB,CAAC,IAAY;QACnC,IAAI,CAAC;YACD,MAAM,oBAAK,EAAC,IAAI,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;YACvC,OAAO,CAAC,GAAG,CAAC,gBAAgB,IAAI,uBAAuB,CAAC,CAAC;QAC7D,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACb,OAAO,CAAC,KAAK,CAAC,mCAAmC,KAAK,EAAE,CAAC,CAAC;QAC9D,CAAC;IACL,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,MAAmB;QAE7B,wBAAc,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC;QAE1C,MAAM,IAAI,CAAC,oBAAoB,CAAC,YAAY,CAAC,CAAC;QAE9C,wBAAc,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,qDAAqD,CAAC,CAAC;IACvG,CAAC;CAGJ;AAED,qBAAe,YAAY,CAAC,aAAa,EAAE,CAAC;;;;;;;;;;;;;;;;;;ACzC5C,oHAAiD;AAEjD,gJAAwD;AACxD,0IAAoD;AACpD,wEAAwB;AAExB,sIAA8C;AAE9C,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,wBAAc,CAAC;AAE9C,MAAM,YAAY,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC;AACnC,MAAM,cAAc,GAAG,sBAAY,CAAC,qBAAqB,CAAC,YAAY,CAAC,CAAC;AACxE,MAAM,SAAS,GAAG,cAAI,CAAC,OAAO,CAAC,cAAI,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;AAEpE,MAAM,WAAY,SAAQ,kBAAO;IAI7B;QACI,KAAK,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;IAC1B,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,MAAmB;QAE7B,MAAM,CAAC,KAAK,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,yBAAyB,CAAC,CAAC;QAExD,MAAM,wBAAc,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IACzC,CAAC;;AAXa,0BAAc,GAAkB,iCAAiC,CAAC;AAgBpF,qBAAe,WAAW,CAAC,aAAa,EAAE,CAAC;;;;;;;;;;;;;;;;;;AChC3C,oHAAiD;AACjD,wFAAmD;AACnD,gJAAwD;AACxD,0IAAoD;AACpD,wEAAwB;AAGxB,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,GAAG,wBAAc,CAAC;AAEzC,MAAM,YAAY,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC;AACnC,MAAM,cAAc,GAAG,sBAAY,CAAC,qBAAqB,CAAC,YAAY,CAAC,CAAC;AACxE,MAAM,SAAS,GAAG,cAAI,CAAC,OAAO,CAAC,cAAI,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;AAEpE,MAAM,WAAY,SAAQ,kBAAO;IAI7B;QACI,KAAK,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;IAC1B,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,MAAmB;QAE7B,wBAAc,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,sBAAsB,CAAC,CAAC;QAEpE,MAAM,UAAU,GAAW,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,QAAQ,IAAI,eAAe,CAAC;QAC/E,MAAM,oBAAoB,GAAG,IAAI,CAAC;QAElC,IAAG,CAAC,UAAU,EAAC,CAAC;YACZ,wBAAc,CAAC,KAAK,CAAC,oFAAoF,CAAC,CAAC;YAC3G,OAAO;QACX,CAAC;QAED,IAAG,CAAC;YACA,MAAM,OAAO,GAAG,MAAM,CAAC,WAAW,CAAC;YAEnC,IAAI,CAAC;gBACD,MAAM,sBAAQ,EAAC,OAAO,CAAC,CAAC;gBAExB,MAAM,yBAAW,EAAC,OAAO,CAAC,CAAC;gBAE3B,wBAAc,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,uBAAuB,CAAC,CAAC;YACzE,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACb,wBAAc,CAAC,KAAK,CAAC,iDAAiD,EAAE,KAAK,CAAC,CAAC;YACnF,CAAC;QACL,CAAC;QAAC,OAAM,CAAc,EAAC,CAAC;YACpB,wBAAc,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,4BAA4B,CAAC,CAAC;YACxE,MAAM,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;QACvB,CAAC;IACL,CAAC;;AAlCa,0BAAc,GAAkB,sLAAsL,CAAC;AAuCzO,qBAAe,WAAW,CAAC,aAAa,EAAE,CAAC;;;;;;;;;;;;;;;;;;ACrD3C,oHAAiD;AACjD,gJAAwD;AACxD,oIAAgD;AAChD,kEAAoB;AACpB,wEAAwB;AACxB,0IAAoD;AACpD,oIAAgD;AAChD,6IAAsD;AACtD,oIAAgD;AAChD,yJAA8D;AAE9D,MAAM,EAAE,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,wBAAc,CAAC;AAErD,MAAM,YAAY,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC;AAEnC,MAAM,cAAc,GAAG,sBAAY,CAAC,qBAAqB,CAAC,YAAY,CAAC,CAAC;AACxE,MAAM,YAAY,GAAG,GAAG,cAAc,oBAAoB,CAAC;AAE3D,MAAM,SAAS,GAAG,cAAI,CAAC,OAAO,CAAC,cAAI,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;AAoBzF,MAAM,UAAU,GAA4B;IACxC,SAAS,EAAE;QACP,UAAU,EAAE,KAAK,IAAmB,EAAE;YAClC,MAAM,kBAAkB,GAAG,GAAG,cAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,uBAAuB,CAAC;YACjF,MAAM,kBAAkB,GAAG,GAAG,SAAS,kDAAkD,CAAC;YAE1F,IAAI,YAAE,CAAC,UAAU,CAAC,kBAAkB,CAAC,EAAE,CAAC;gBACpC,YAAE,CAAC,UAAU,CAAC,kBAAkB,CAAC,CAAC;YACtC,CAAC;YAED,IAAI,CAAC,YAAE,CAAC,UAAU,CAAC,kBAAkB,CAAC,EAAE,CAAC;gBACrC,MAAM,+DAA+D,CAAC;YAC1E,CAAC;YAED,MAAM,CAAC,wCAAwC,EAAE,4BAA4B,CAAC,CAAC;YAE/E,YAAE,CAAC,YAAY,CAAC,kBAAkB,EAAE,kBAAkB,CAAC,CAAC;QAC5D,CAAC;QACD,UAAU,EAAE,KAAK,IAAmB,EAAE;YAClC,MAAM,kBAAkB,GAAG,GAAG,SAAS,kDAAkD,CAAC;YAE1F,IAAI,YAAE,CAAC,UAAU,CAAC,kBAAkB,CAAC,EAAE,CAAC;gBACpC,YAAE,CAAC,UAAU,CAAC,kBAAkB,CAAC,CAAC;gBAClC,MAAM,CAAC,yCAAyC,EAAE,6BAA6B,CAAC,CAAC;YACrF,CAAC;QACL,CAAC;KACJ;CACJ,CAAC;AAeF,MAAM,aAAc,SAAQ,kBAAO;IAE/B;QACI,KAAK,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;QAqFrB,2BAAsB,GAAG,KAAK,EAAE,kBAAgD,EAAE,aAA4C,EAAE,MAAqB,EAAiB,EAAE;YAC3K,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC,kBAAkB,CAAC,EAAE,CAAC;gBAC/E,OAAO;YACX,CAAC;YAED,MAAM,SAAS,GAAG,UAAU,CAAC,aAAa,CAAC,CAAC,kBAAkB,CAAC,CAAC;YAEhE,IAAI,SAAS,IAAI,sBAAY,CAAC,WAAW,CAA0B,SAAS,CAAC,EAAE,CAAC;gBAC5E,MAAM,SAAS,CAAC,MAAM,CAAC,CAAC;YAC5B,CAAC;QACL,CAAC,CAAC;IA9FF,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,MAAmB;QAE7B,oBAAU,CAAC,SAAS,EAAE,CAAC;QAEvB,MAAM,EAAE,SAAS,EAAE,WAAW,EAAE,QAAQ,EAAE,KAAK,EAAE,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC;QAE3F,MAAM,eAAe,GAAG,MAAM,oBAAU,CAAC,uBAAuB,CAAC,MAAM,CAAC,WAAW,CAAC,eAAe,EAAE;YACjG,uBAAuB;YACvB,2BAA2B;YAC3B,oCAAoC;YACpC,uBAAuB;YACvB,sBAAsB;YAEtB,cAAc;YACd,cAAc;YAEd,oCAAoC;YACpC,oCAAoC;YACpC,uCAAuC;YAEvC,qCAAqC;YACrC,qCAAqC;YACrC,wCAAwC;YAExC,qCAAqC;YACrC,qCAAqC;YACrC,wCAAwC;YAExC,yBAAyB;YACzB,4BAA4B;YAC5B,qBAAqB;YAErB,kBAAkB;YAElB,uBAAuB;YACvB,0BAA0B;YAC1B,uBAAuB;YACvB,uBAAuB;YAEvB,0BAA0B;YAC1B,0BAA0B;SAC7B,CAAC,CAAC;QAEH,IAAG,CAAC,eAAe,CAAC,EAAE,EAAC,CAAC;YACpB,KAAK,CAAC,sGAAsG,CAAC,CAAC;YAC9G,GAAG,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;YAC9B,OAAO;QACX,CAAC;aAAI,CAAC;YACF,MAAM,CAAC,KAAK,EAAE,CAAC,KAAK,CAAC,0CAA0C,CAAC,CAAC,CAAC;QACtE,CAAC;QAED,IAAG,CAAC,CAAC,WAAW,IAAI,CAAC,CAAC,WAAW,CAAC,eAAe,EAAC,CAAC;YAC/C,MAAM,OAAO,GAAG,MAAM,uBAAa,CAAC,aAAa,CAAC,GAAG,SAAS,8BAA8B,EAAE,YAAY,EAAE,IAAI,CAAC,CAAC;YAClH,MAAM,uBAAa,CAAC,YAAY,CAAC,YAAY,EAAE,OAAO,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC;QACnF,CAAC;QAED,QAAO,SAAS,EAAC,CAAC;YAClB,KAAK,QAAQ;gBACT,MAAM,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;gBAC1B,OAAO;YACX,KAAK,UAAU;gBACX,MAAM,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;gBAC5B,OAAO;YACX,KAAK,QAAQ;gBACT,MAAM,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;gBAC1B,OAAO;YACX,KAAK,QAAQ;gBACT,MAAM,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;gBAC1B,OAAO;YACX,KAAK,MAAM;gBACP,MAAM,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;gBACxB,OAAO;YACX,KAAK,aAAa;gBACd,MAAM,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;gBAC7B,OAAO;YACX;gBACI,KAAK,CAAC,qBAAqB,SAAS,8CAA8C,CAAC,CAAC;gBACpF,GAAG,CAAC,gBAAgB,SAAS,cAAc,SAAS,aAAa,SAAS,aAAa,SAAS,GAAG,CAAC,CAAC;gBACrG,OAAO;QACX,CAAC;IACL,CAAC;IAcM,KAAK,CAAC,mBAAmB,CAAC,MAAkB;QAE/C,MAAM,YAAY,GAAW,MAAM,CAAC,YAAY,IAAI,MAAM,CAAC,QAAQ,CAAC;QACpE,MAAM,CAAC,QAAQ,EAAE,KAAK,CAAC,GAAG,MAAM,CAAC,QAAQ,IAAI,MAAM,oBAAU,CAAC,uBAAuB,EAAE,CAAC;QACxF,MAAM,eAAe,GAAa,YAAY,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAC1D,MAAM,SAAS,GAAsB,eAAe,CAAC,CAAC,CAAC,CAAC;QACxD,MAAM,aAAa,GAAG,eAAe,CAAC,CAAC,CAAC,CAAC;QACzC,MAAM,SAAS,GAAG,eAAe,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;QACzE,MAAM,WAAW,GAAG,MAAM,CAAC,WAAW,CAAC,aAAa,CAAC;QAErD,OAAO;YACH,SAAS;YACT,aAAa;YACb,QAAQ;YACR,KAAK;YACL,SAAS;YACT,WAAW;SACd,CAAC;IACN,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,MAAkB;QAElC,MAAM,EAAC,aAAa,EAAE,SAAS,EAAC,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC;QAE1E,IAAI,OAAO,GAAG,EAAE,CAAC;QAEjB,IAAG,SAAS,EAAC,CAAC;YACV,MAAM,WAAW,GAAG,uBAAa,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;YAEzD,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,YAAE,CAAC,YAAY,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC,CAAC;QAChE,CAAC;QAED,MAAM,QAAQ,GAAG,MAAM,uBAAa,CAAC,YAAY,CAAC,aAAa,EAAE,OAAO,CAAC,CAAC;QAE1E,MAAM,WAAW,GAAG,MAAM,2BAAiB,CAAC,kBAAkB,CAAC,OAAO,aAAa,EAAE,CAAC,CAAC;QAEvF,MAAM,CAAC,oBAAoB,EAAE,KAAK,EAAE,CAAC,YAAY,CAAC,QAAQ,aAAa,qCAAqC,QAAQ,CAAC,QAAQ,CAAC,UAAU,IAAI,CAAC,CAAC,CAAC;QAE/I,IAAG,QAAQ,CAAC,cAAc,KAAK,iBAAiB,EAAC,CAAC;YAC9C,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;YAC/B,YAAY,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QACnC,CAAC;IACL,CAAC;IAEM,KAAK,CAAC,IAAI,CAAC,MAAkB;QAEhC,MAAM,mBAAmB,GAAoC;YACzD,QAAQ,EAAE,GAAG;SAChB,CAAC;QAEF,MAAM,kBAAkB,GAAuC,EAAE,CAAC;QAElE,IAAI,CAAC;YACD,MAAM,iBAAiB,GAAG,MAAM,oBAAU,CAAC,SAAS,EAAE,CAAC,aAAa,CAAC,mBAAmB,CAAC,CAAC,OAAO,EAAE,CAAC;YAEpG,IAAI,iBAAiB,CAAC,SAAS,EAAE,CAAC;gBAC9B,KAAK,MAAM,cAAc,IAAI,iBAAiB,CAAC,SAAS,EAAE,CAAC;oBACvD,IAAI,cAAc,CAAC,YAAY,IAAI,cAAc,CAAC,YAAY,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE,CAAC;wBAChF,kBAAkB,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;oBAC5C,CAAC;gBACL,CAAC;YACL,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACb,MAAM,IAAI,KAAK,CAAC,mCAAoC,KAAsB,CAAC,OAAO,EAAE,CAAC,CAAC;QAC1F,CAAC;QAED,MAAM,CAAC,oBAAoB,EAAE,KAAK,EAAE,CAAC,YAAY,CAAC,4BAA4B,CAAC,CAAC,CAAC;QACjF,MAAM,CAAC,oBAAoB,EAAE,KAAK,EAAE,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC,CAAC;QAEnE,kBAAkB,CAAC,GAAG,CAAC,CAAC,KAAuC,EAAE,EAAE,CAAC,KAAK,CAAC,WAAW,GAAG,OAAO,GAAE,KAAK,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE;YACjI,GAAG,CAAC,GAAG,CAAC,CAAC;QACb,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,MAAkB;QAElC,MAAM,EAAC,aAAa,EAAE,KAAK,EAAE,QAAQ,EAAE,SAAS,EAAC,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC;QAE3F,IAAI,aAAa,KAAK,SAAS,EAAE,CAAC;YAC9B,MAAM,CAAC,KAAK,CAAC,GAAG,MAAM,oBAAU,CAAC,cAAc,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;YAClE,uBAAa,CAAC,SAAS,CAAC,MAAM,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC;YAC9D,MAAM,uBAAa,CAAC,aAAa,CAAC,SAAS,EAAE,KAAK,EAAE,KAAK,EAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;YAC1E,OAAO;QACX,CAAC;QAED,MAAM,YAAY,GAAkB;YAChC,SAAS,EAAE,MAAM,CAAC,WAAW;YAC7B,QAAQ,EAAE,QAAQ;SACrB,CAAC;QAEF,GAAG,CAAC,KAAK,EAAE,CAAC,KAAK,CAAC,kBAAkB,CAAC,GAAG,yCAAyC,CAAC,CAAC;QAEnF,MAAM,IAAI,CAAC,sBAAsB,CAAC,YAAY,EAAE,aAAa,EAAE,YAAY,CAAC,CAAC;QAE7E,MAAM,OAAO,GAAG,MAAM,uBAAa,CAAC,aAAa,CAAC,GAAG,SAAS,qBAAqB,aAAa,EAAE,EAAE,YAAY,EAAE,aAAa,KAAK,YAAY,CAAC,CAAC;QAElJ,MAAM,IAAI,CAAC,sBAAsB,CAAC,aAAa,EAAE,aAAa,EAAE,YAAY,CAAC,CAAC;QAE9E,MAAM,IAAI,CAAC,sBAAsB,CAAC,WAAW,EAAE,aAAa,EAAE,YAAY,CAAC,CAAC;QAE5E,IAAI,CAAC;YACD,MAAM,uBAAa,CAAC,YAAY,CAAC,aAAa,EAAE,OAAO,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;YAE1E,MAAM,IAAI,CAAC,sBAAsB,CAAC,YAAY,EAAE,aAAa,EAAE,YAAY,CAAC,CAAC;YAE7E,IAAI,OAAO,GAAG,EAAE,CAAC;YAEjB,IAAG,SAAS,EAAC,CAAC;gBACV,MAAM,WAAW,GAAG,uBAAa,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;gBAEzD,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,YAAE,CAAC,YAAY,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC,CAAC;gBAE5D,MAAM,QAAQ,GAAG,MAAM,uBAAa,CAAC,YAAY,CAAC,aAAa,EAAE,OAAO,CAAC,CAAC;gBAE1E,MAAM,CAAC,0BAA0B,EAAE,KAAK,EAAE,CAAC,YAAY,CAAC,QAAQ,aAAa,qCAAqC,QAAQ,CAAC,QAAQ,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC;gBAEpJ,IAAG,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAC,CAAC;oBACrC,MAAM,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC;oBAEtE,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC;oBAE1C,IAAG,CAAC,YAAY,CAAC,OAAO,EAAC,CAAC;wBACtB,KAAK,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;oBACrC,CAAC;gBACL,CAAC;YACL,CAAC;QACL,CAAC;QAAC,OAAO,CAAc,EAAE,CAAC;YACtB,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;YACjB,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;QACjB,CAAC;QAED,GAAG,CAAC,KAAK,EAAE,CAAC,KAAK,CAAC,qBAAqB,SAAS,qBAAqB,aAAa,mDAAmD,aAAa,8BAA8B,CAAC,CAAC,CAAC;IACvL,CAAC;IAEM,KAAK,CAAC,QAAQ,CAAC,MAAkB;QAEpC,MAAM,EAAC,aAAa,EAAE,KAAK,EAAE,QAAQ,EAAE,SAAS,EAAC,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC;QAE3F,IAAI,aAAa,KAAK,SAAS,EAAE,CAAC;YAC9B,MAAM,CAAC,KAAK,CAAC,GAAG,MAAM,oBAAU,CAAC,cAAc,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;YAClE,uBAAa,CAAC,SAAS,CAAC,MAAM,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC;YAC9D,MAAM,uBAAa,CAAC,aAAa,CAAC,SAAS,EAAE,KAAK,EAAE,KAAK,EAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;YAC1E,OAAO;QACX,CAAC;IAEL,CAAC;IAEM,KAAK,CAAC,SAAS,CAAC,MAAkB;QAErC,MAAM,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC;QAEvC,yFAAyF;IAC7F,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,MAAkB;QAElC,MAAM,EAAC,aAAa,EAAC,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC;QAE/D,IAAG,CAAC,CAAC,MAAM,uBAAa,CAAC,cAAc,CAAC,MAAM,GAAG,aAAa,CAAC,CAAC,EAAC,CAAC;YAC9D,KAAK,CAAC,0CAA0C,aAAa,oBAAoB,oBAAU,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;YAC5G,OAAO;QACX,CAAC;QAED,MAAM,uBAAa,CAAC,YAAY,CAAC,MAAM,GAAG,aAAa,CAAC,CAAC;QACzD,GAAG,CAAC,KAAK,EAAE,CAAC,KAAK,CAAC,yBAAyB,aAAa,8BAA8B,KAAK,EAAE,CAAC,GAAG,CAAC,SAAS,CAAC,qBAAqB,oBAAU,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC,CAAC;IACjK,CAAC;CACJ;AAED,qBAAe,aAAa,CAAC,aAAa,EAAE,CAAC;;;;;;;;;;;;;;;;;;AC7V7C,oHAAiD;AACjD,wFAAsD;AACtD,gJAAwD;AACxD,0IAAoD;AACpD,wEAAwB;AACxB,kEAAoB;AAEpB,MAAM,EAAE,KAAK,EAAE,GAAG,wBAAc,CAAC;AAEjC,MAAM,YAAY,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC;AAEnC,MAAM,cAAc,GAAG,sBAAY,CAAC,qBAAqB,CAAC,YAAY,CAAC,CAAC;AACxE,MAAM,SAAS,GAAG,cAAI,CAAC,OAAO,CAAC,cAAI,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,OAAO,CAAC,CAAC;AAGjE,MAAM,qBAAsB,SAAQ,kBAAO;IAEvC;QACI,KAAK,CAAC,kBAAkB,EAAE,MAAM,CAAC,CAAC;IACtC,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,MAAmB;QAE7B,wBAAc,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,gCAAgC,CAAC,CAAC;QAE9E,MAAM,OAAO,GAAG,MAAM,CAAC,WAAW,CAAC;QAEnC,IAAI,CAAC;YACD,IAAG,qBAAW,CAAC,MAAM,EAAE,EAAC,CAAC;gBACrB,MAAM,iBAAiB,GAAG,cAAc,GAAG,4CAA4C,CAAC;gBACxF,YAAE,CAAC,UAAU,CAAC,iBAAiB,CAAC,CAAC;YACrC,CAAC;YAED,MAAM,yBAAW,EAAC,OAAO,CAAC,CAAC;YAE3B,wBAAc,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,uBAAuB,CAAC,CAAC;QACzE,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACb,wBAAc,CAAC,KAAK,CAAC,iDAAiD,EAAE,KAAK,CAAC,CAAC;QACnF,CAAC;IACL,CAAC;CAGJ;AAED,qBAAe,qBAAqB,CAAC,aAAa,EAAE,CAAC;;;;;;;;;;;;;;;;;AC3CrD,wEAAwB;AACxB,kEAAoB;AACpB,0IAAoD;AAoBpD,MAA8B,UAAU;IAQpC,YAAY,IAAY,EAAE,WAAuF;QAC7G,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QAEjB,MAAM,cAAc,GAAG,sBAAY,CAAC,qBAAqB,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC;QACzE,MAAM,YAAY,GAAG,cAAI,CAAC,OAAO,CAAC,cAAc,EAAE,cAAc,EAAE,MAAM,CAAC,CAAC;QAC1E,MAAM,UAAU,GAAG,GAAG,YAAY,eAAe,CAAC;QAClD,MAAM,kBAAkB,GAAa,YAAE,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,YAAE,CAAC,YAAY,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QACvH,MAAM,WAAW,GAAG,kBAAkB,CAAC,MAAM,CAAC;QAG9C,IAAG,CAAC,YAAE,CAAC,UAAU,CAAC,YAAY,CAAC,EAAC,CAAC;YAC7B,YAAE,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;QAC/B,CAAC;QAED,MAAM,QAAQ,GAAW,WAAW,CAAC,EAAE,CAAC;QAExC,MAAM,MAAM,GAAG,GAAG,cAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC;QAE3C,IAAI,WAAW,GAAG,cAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QAEvC,IAAG,CAAC,kBAAkB,CAAC,QAAQ,CAAC,WAAW,CAAC,EAAC,CAAC;YAC1C,kBAAkB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QACzC,CAAC;QAED,IAAG,WAAW,GAAG,kBAAkB,CAAC,MAAM,EAAC,CAAC;YACxC,YAAE,CAAC,aAAa,CAAC,UAAU,EAAE,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAChE,CAAC;IACL,CAAC;IAED,iBAAiB;QACb,MAAM,GAAG,GAAG,IAAI,KAAK,EAAE,CAAC;QACxB,IAAI,GAAG,CAAC,KAAK,EAAE,CAAC;YACZ,MAAM,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,4BAA4B,CAAC,CAAC;YAC5D,IAAI,KAAK,IAAI,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC;gBACpB,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC;YACpB,CAAC;QACL,CAAC;QACD,OAAO,EAAE,CAAC;IACd,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,SAAqB,IAAI;QAEnC,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;IACzC,CAAC;IAED,OAAO;QAEH,OAAO,IAAI,CAAC,IAAI,CAAC;IACrB,CAAC;IAEM,MAAM,CAAC,aAAa;QACvB,MAAM,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC;QAE5B,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE,CAAC;YACpC,UAAU,CAAC,UAAU,CAAC,SAAS,CAAC,GAAG,IAAI,IAAI,EAAE,CAAC;QAClD,CAAC;QAED,OAAO,UAAU,CAAC,UAAU,CAAC,SAAS,CAAoB,CAAC;IAC/D,CAAC;IAED,oBAAoB,CAAC,MAAkB;QAEnC,MAAM,SAAS,GAAW,MAAM,CAAC,SAAS,IAAI,MAAM,CAAC,QAAQ,CAAC;QAC9D,MAAM,YAAY,GAAa,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACpD,MAAM,MAAM,GAAW,YAAY,CAAC,CAAC,CAAC,CAAC;QACvC,MAAM,MAAM,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;QAC/B,MAAM,MAAM,GAAG,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;QAChE,MAAM,WAAW,GAAG,MAAM,CAAC,WAAW,CAAC,aAAa,CAAC;QAErD,OAAO;YACH,MAAM;YACN,MAAM;YACN,MAAM;YACN,WAAW;SACd,CAAC;IACN,CAAC;;AAhFa,yBAAc,GAAkB,IAAI,CAAC;AAElC,qBAAU,GAAyC,EAAE,CAAC;qBAL7C,UAAU;;;;;;;;;;;;;;;;;ACvBxC,mIAA4C;AAC5C,6HAAwC;AACxC,gIAA0C;AAC1C,2JAA4D;AAC5D,sIAA8C;AAC9C,6HAAwC;AAExC,qBAAe;IACX,qBAAW;IACX,uBAAa;IACb,sBAAY;IACZ,+BAAqB;IACrB,wBAAc;IACd,qBAAW;CACd,CAAC;;;;;;;;;;;;;;;;;ACbF,8HAA8C;AAG9C,0HAA0C;AAC1C,0HAA0C;AAmB1C;;GAEG;AACH,MAAqB,UAAW,SAAQ,kBAAU;IAG9C;QACI,KAAK,EAAE,CAAC;IACZ,CAAC;IAED,UAAU,CAAC,UAAkB;QAEzB,OAAO,CAAC,MAAsB,EAAE,EAAE;YAC9B,IAAG,CAAC,CAAE,IAAY,CAAC,UAAU,CAAC,CAAC,EAAC,CAAC;gBAC7B,MAAM,KAAK,GAAG,IAAI,kBAAQ,CAAC,IAAI,KAAK,CAAC,0CAA0C,CAAC,EAAE,GAAG,UAAU,KAAK,UAAU,EAAE,CAAC,CAAC;gBAElH,OAAO,KAAK,CAAC;YACjB,CAAC;YAED,IAAI,CAAC;gBACD,OAAQ,IAAY,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,CAAC;YAC7C,CAAC;YAAA,OAAM,CAAkB,EAAC,CAAC;gBACvB,MAAM,KAAK,GAAG,IAAI,kBAAQ,CAAC,CAAC,EAAE,GAAG,UAAU,KAAK,UAAU,EAAE,EAAE,MAAM,CAAC,CAAC;gBACtE,OAAO,KAAK,CAAC;YACjB,CAAC;QACL,CAAC,CAAC;IACN,CAAC;IAED,QAAQ;QACJ,MAAM,QAAQ,GAAY,IAAI,CAAC,SAAS,CAAC;QACzC,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QACvB,OAAO,QAAQ,CAAC;IACpB,CAAC;IAED,SAAS;QACL,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;IAC1B,CAAC;CACJ;AAlCD,gCAkCC;;;;;;;;;;;;;;;;;AC7DD,4GAAgC;AAEhC,MAAqB,QAAS,SAAQ,gBAAQ;IAG1C,YAAY,SAA0B,EAAE,YAAoB,EAAE,SAAqB,IAAI;QACnF,KAAK,CAAC,GAAG,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC;QAHlC,SAAI,GAAG,qBAAqB,CAAC;QAKzB,IAAI,CAAC,OAAO,GAAG,kBAAkB,YAAY,uCAAuC,CAAC;IACzF,CAAC;CACJ;AARD,8BAQC;;;;;;;;;;;;;;;;;ACVD,4GAAgC;AAEhC,MAAqB,QAAS,SAAQ,gBAAQ;IAG1C,YAAY,SAA0B,EAAE,YAAoB,EAAE,SAAc,IAAI;QAC5E,KAAK,CAAC,GAAG,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC;QAHlC,SAAI,GAAG,wBAAwB,CAAC;QAK5B,IAAI,CAAC,OAAO,GAAG,aAAa,YAAY,iBAAiB,CAAC;IAC9D,CAAC;CACJ;AARD,8BAQC;;;;;;;;;;;;;;;;;ACVD,4GAAgC;AAEhC,MAAqB,QAAS,SAAQ,gBAAQ;IAG1C,YAAY,SAA0B,EAAE,YAAqB,EAAE,SAAc,IAAI;QAC7E,KAAK,CAAC,GAAG,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC;QAHlC,SAAI,GAAG,2BAA2B,CAAC;QAK/B,IAAG,CAAC,YAAY,EAAC,CAAC;YACd,YAAY,GAAG,UAAU,CAAC;QAC9B,CAAC;QAED,IAAI,CAAC,OAAO,GAAG,kBAAkB,YAAY,sBAAsB,CAAC;IACxE,CAAC;CACJ;AAZD,8BAYC;;;;;;;;;;;;;;ACdD,MAAqB,QAAQ;IAOzB,YAAY,IAAY,EAAE,YAAyB,IAAI,EAAE,SAAc,IAAI;QAFjE,UAAK,GAAY,IAAI,CAAC;QAG5B,IAAG,CAAC,SAAS,EAAC,CAAC;YACX,SAAS,GAAG,IAAI,KAAK,CAAC,aAAa,GAAG,IAAI,CAAC,CAAC;QAChD,CAAC;QAED,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAG,OAAO,SAAS,KAAK,QAAQ,EAAC,CAAC;YAC9B,IAAI,CAAC,SAAS,GAAG,IAAI,KAAK,CAAC,SAAmB,CAAC,CAAC;QACpD,CAAC;aAAK,CAAC;YACH,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC/B,CAAC;QAED,IAAG,IAAI,CAAC,SAAS,CAAC,KAAK,EAAC,CAAC;YACrB,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC,KAAK,CAAC;QACjC,CAAC;IACL,CAAC;IAED,cAAc;QAEV,OAAO,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;QAC7B,OAAO,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;QAC9C,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QAClC,OAAO,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;IAClC,CAAC;IAED,UAAU;QAEN,OAAO,IAAI,CAAC,OAAO,CAAC;IACxB,CAAC;IAED,OAAO;QAEH,OAAO,IAAI,CAAC,IAAI,CAAC;IACrB,CAAC;IAED,mBAAmB;QAEf,OAAO,IAAI,CAAC,KAAK,CAAC;IACtB,CAAC;CACJ;AA9CD,8BA8CC;;;;;;;;;;;;;;;;;;AC9CD,kHAAkC;AAMpB,mBANP,kBAAQ,CAMO;AALtB,kHAAkC;AAK9B,mBALG,kBAAQ,CAKH;AAJZ,kHAAkC;AAIV,mBAJjB,kBAAQ,CAIiB;AAHhC,4GAAgC;AAGE,mBAH3B,gBAAQ,CAG2B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACN1C,sEAAmC;AA4G/B,wFA5GK,kBAAM,QA4GL;AAxGV,+FAA0B;AAqDd,qBArDL,cAAI,CAqDW;AApDtB,uFAAgD;AAsD5C,6FAtDI,qBAAW,QAsDJ;AADX,0FArDiB,kBAAQ,QAqDjB;AAlDZ,0JAA6D;AAwFzD,0BAxFG,yBAAe,CAwFH;AAtFnB,4IAA4G;AA4DvF,oBA5Dd,uBAAa,CA4DU;AA3D9B,6HAAiF;AA6D7E,oBA7DG,mBAAS,CA6DH;AADT,mGA5D6B,qBAAiB,QA4D7B;AA3DrB,mIAAyF;AA8DrF,sBA9DG,qBAAW,CA8DH;AADX,qGA7DiC,yBAAmB,QA6DjC;AA5DvB,6HAA+E;AA+D3E,oBA/DG,mBAAS,CA+DH;AADT,mGA9D4B,qBAAiB,QA8D5B;AA7DrB,4IAAqG;AAgEjG,yBAhEG,wBAAc,CAgEH;AADd,wGA/DuC,+BAAsB,QA+DvC;AA9D1B,4IAAmG;AA+E/F,yBA/EG,wBAAc,CA+EH;AADd,wGA9EsC,+BAAsB,QA8EtC;AA5E1B,yIAAiG;AA+D7F,wBA/DG,uBAAa,CA+DH;AADb,uGA9DqC,6BAAqB,QA8DrC;AA7DzB,gIAAqF;AAgEjF,qBAhEG,oBAAU,CAgEH;AADV,oGA/D+B,uBAAkB,QA+D/B;AA9DtB,gIAAqF;AAiEjF,qBAjEG,oBAAU,CAiEH;AADV,oGAhE+B,uBAAkB,QAgE/B;AA/DtB,gIAAqF;AAkEjF,qBAlEG,oBAAU,CAkEH;AADV,oGAjE+B,uBAAkB,QAiE/B;AAhEtB,kJAA6G;AAmEzG,2BAnEG,0BAAgB,CAmEH;AADhB,0GAlE2C,mCAAwB,QAkE3C;AAjE5B,sIAA8F;AAoE1F,uBApEG,sBAAY,CAoEH;AADZ,sGAnEmC,2BAAoB,QAmEnC;AAlExB,wJAAqH;AAqEjH,6BArEG,4BAAkB,CAqEH;AADlB,4GApE+C,uCAA0B,QAoE/C;AAjE9B,sIAAyM;AA8FrM,oBA9FG,iBAAS,CA8FH;AA7Fb,8IAA+G;AA4F3G,mBA5FG,qBAAQ,CA4FH;AA3FZ,8IAAwD;AA0FpD,yBA1FG,qBAAc,CA0FH;AAxFlB,uHAAoG;AACpG,yHAAoD;AAEpD,kJAAyF;AA2BrF,uBA3BG,0BAAY,CA2BH;AACZ,kGA5B+B,mCAAgB,QA4B/B;AAtBpB,MAAM,cAAc,GAAG;IACnB,gBAAgB,EAAE,EAAE,eAAe,EAAf,uBAAe,EAAE,iBAAiB,EAAjB,yBAAiB,EAAE,QAAQ,EAAR,gBAAQ,EAAE,SAAS,EAAT,iBAAS,EAAE;IAC7E,kBAAkB,EAAE,EAAE,KAAK,EAAL,aAAK,EAAE;CAChC,CAAC;AAmEE,wCAAc;AAjElB,6HAA2D;AAsBzC,qBAtBX,kBAAU,CAsBW;AArB5B,gHAA2E;AAsB9D,mBAtBN,gBAAK,CAsBS;AAoEjB,8FA1FiC,kBAAY,QA0FjC;AAzFhB,4IAAsE;AAiBpD,wBAjBX,qBAAU,CAiBc;AAf/B,6HAA6C;AAgB3B,qBAhBX,kBAAU,CAgBW;AAf5B,wHAA4F;AAgB3E,oBAhBV,iBAAS,CAgBU;AAd1B,oHAA8C;AAgE1C,yBAhEG,eAAc,CAgEH;AA/DlB,gHAA8C;AAgE1C,oCAAY;AA9DhB,mHAAgD;AAmE5C,sCAAa;;;;;;;;;;;;;;;;;ACrHjB,qJAA+E;AAC/E,4IAAsF;AACtF,+IAAuD;AACvD,yIAAmD;AAEnD,kEAAoB;AACpB,+IAAuD;AAGvD,KAAK,UAAU,IAAI,CAA6B,GAAe,EAAE,gBAA2B,EAAE,EAAE,cAAkE,IAAI;;IAClK,MAAM,gBAAgB,GAAG,8BAAgB,EAAC,GAAG,CAAC,CAAC;IAC/C,MAAM,QAAQ,GAAG,MAAM,gBAAgB,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;IACzD,MAAM,UAAU,GAAG,MAAM,gBAAgB,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;IAC7D,MAAM,cAAc,GAAG,MAAM,gBAAgB,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;IACrE,MAAM,OAAO,GAAG,MAAM,gBAAgB,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;IACtD,MAAM,WAAW,GAAG,MAAM,gBAAgB,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;IAE9D,oDAAoD;IACpD,wDAAwD;IAExD,IAAG,WAAW,KAAK,IAAI,EAAC,CAAC;QACrB,MAAM,WAAW,CAAC,gBAAgB,CAAC,CAAC;IACxC,CAAC;IAED,oBAAoB;IAEpB,2BAA2B;IAC3B,qBAAqB;IACrB,IAAI;IAEJ,MAAM,UAAU,GAAW,OAAO,CAAC,GAAG,EAAE,CAAC;IACzC,MAAM,cAAc,GAAG,sBAAY,CAAC,qBAAqB,CAAC,UAAU,CAAC,CAAC;IACtE,MAAM,YAAY,GAAG,GAAG,cAAc,oBAAoB,CAAC;IAC3D,MAAM,aAAa,GAAG,GAAG,YAAY,iBAAiB,CAAC;IAEvD,IAAG,CAAC,YAAE,CAAC,UAAU,CAAC,aAAa,CAAC,EAAC,CAAC;QAC9B,wBAAc,CAAC,GAAG,CAAC,wBAAc,CAAC,KAAK,EAAE,CAAC,MAAM,CAAC,2FAA2F,CAAC,CAAC,CAAC;QAC/I,MAAM,wBAAc,CAAC,eAAe,CAAC,6BAA6B,CAAC,CAAC;QACpE,sBAAY,CAAC,SAAS,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAC;IACnD,CAAC;IAED,MAAM,UAAU,GAAG,EAAC,GAAG;YACnB,QAAQ,EAAE,QAAQ;YAClB,UAAU,EAAE,UAAU;YACtB,cAAc,EAAE,cAAc;YAC9B,OAAO,EAAE,OAAO;YAChB,MAAM,EAAE,OAAO,CAAC,uBAAgB,CAAC,GAAG,CAAC,UAAU,CAAC,0CAAE,GAAG,EAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,MAAM,gBAAgB,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;YACvG,aAAa,EAAE,sBAAgB,CAAC,GAAG,CAAC,UAAU,CAAC,0CAAE,IAAI;YACrD,WAAW,EAAE,WAAW;SAC3B,EAAC,GAAG,aAAa,EAAC,CAAC;IAEpB,MAAM,SAAS,GAAqB,MAAM,uBAAa,CAAC,aAAa,CAAa,UAAU,CAAC,CAAC;IAE9F,MAAM,OAAO,GAAG,KAAK,IAAI,EAAE;QACvB,OAAO,CAAC,MAAM,SAAS,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC,CAAC;IACjD,CAAC,CAAC;IAEF,MAAM,SAAS,GAAG,KAAK,IAAI,EAAE;QACzB,OAAO,CAAC,MAAM,SAAS,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;IAC5C,CAAC,CAAC;IAEF,OAAO,EAAE,CAAC;IACV,MAAM,SAAS,EAAE,CAAC;IAElB,OAAO,SAAS,CAAC;AACrB,CAAC;AAED,qBAAe,IAAI,CAAC;;;;;;;;;;;;;;;;;;ACvEpB,qJAA2E;AAC3E,mHAAmD;AACnD,kEAAoB;AACpB,wEAAwB;AACxB,gEAA0B;AAC1B,gIAA6C;AAC7C,0JAA6D;AAC7D,+IAAuD;AACvD,+IAAuD;AACvD,yIAAmD;AAEnD,MAAM,EAAE,GAAG,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,wBAAc,CAAC;AAE9C,MAAM,EAAC,eAAe,EAAC,GAAG,wBAAc,CAAC;AA4KG,0CAAe;AA1K3D,MAAM,SAAS,GAAG,cAAI,CAAC,OAAO,CAAC,cAAI,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;AAC9D,MAAM,YAAY,GAAG,cAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC;AACjD,MAAM,aAAa,GAAG,sBAAY,CAAC,qBAAqB,CAAC,YAAY,CAAC,CAAC;AAEvE,MAAM,iBAAiB,GAAW,IAAI,CAAC;AAsKsB,8CAAiB;AApK9E,SAAS,qBAAqB,CAAqB,WAAwB;IACvE,IAAI,OAAO,GAAG,EAAE,CAAC;IAEjB,MAAM,cAAc,GAA4D,gBAAK,CAAC,mBAAmB,CAAC,WAAW,CAAC,CAAC,CAAC,gCAAgC;IACxJ,MAAM,SAAS,GAAY,WAAmB,CAAC,WAAW,CAAC;IAE3D,OAAO,IAAI,SAAS,SAAS,MAAM,CAAC;IAEpC,OAAO,IAAI,6DAA6D,CAAC;IAEzE,KAAK,MAAM,GAAG,IAAI,cAAc,EAAE,CAAC;QAC/B,MAAM,aAAa,GAAc,cAAc,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC;QAC9D,MAAM,cAAc,GAAG,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC;QAEzD,MAAM,cAAc,GAAW,cAAc,CAAC,GAAG,CAAC,CAAC,cAAc,CAAC;QAElE,IAAG,cAAc,KAAK,UAAU,EAAC,CAAC;YAC9B,OAAO,IAAI,KAAK,GAAG,IAAI,aAAa,CAAC,SAAS,GAAG,cAAc,uBAAuB,aAAa,CAAC,aAAa,mBAAmB,aAAa,CAAC,cAAc,MAAM,CAAC;YACvK,OAAO,IAAI,KAAK,aAAa,CAAC,aAAa,UAAU,cAAc,iBAAiB,CAAC;QACzF,CAAC;aAAK,IAAI,cAAc,KAAK,iBAAiB,EAAC,CAAC;YAC5C,OAAO,IAAI,KAAK,GAAG,IAAI,aAAa,CAAC,cAAc,IAAI,CAAC;QAC5D,CAAC;aAAK,IAAI,cAAc,KAAK,mBAAmB,EAAC,CAAC;YAC9C,OAAO,IAAI,KAAK,GAAG,wBAAwB,CAAC;QAChD,CAAC;aAAK,IAAI,cAAc,KAAK,WAAW,EAAC,CAAC;YACtC,MAAM,IAAI,GAAa,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAY,EAAE,EAAE,CAAC,GAAG,GAAG,IAAI,CAAC,CAAC;YAC5E,OAAO,IAAI,KAAK,GAAG,IAAI,YAAY,CAAC,aAAa,CAAC,GAAG,cAAc,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC;QAC9F,CAAC;IACL,CAAC;IAED,OAAO,IAAI,KAAK,CAAC;IAGjB,OAAO,OAAO,CAAC;AACnB,CAAC;AAED,SAAS,YAAY,CAAC,SAAc;IAChC,MAAM,IAAI,GAAG,SAAS,CAAC,IAAI,CAAC;IAC5B,MAAM,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC;IAExB,IAAG,KAAK,IAAI,QAAQ,EAAC,CAAC;QAClB,OAAO,KAAK,CAAC;IACjB,CAAC;IAED,IAAG,KAAK,IAAI,QAAQ,EAAC,CAAC;QAClB,OAAO,MAAM,CAAC;IAClB,CAAC;IAED,IAAG,KAAK,IAAI,MAAM,EAAC,CAAC;QAChB,OAAO,UAAU,CAAC;IACtB,CAAC;IAGD,MAAM,SAAS,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;IAChD,MAAM,YAAY,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IACpC,OAAO,SAAS,GAAG,YAAY,CAAC;AACpC,CAAC;AAED,KAAK,UAAU,WAAW,CAAC,GAAe,EAAE,SAAS,GAAG,KAAK;IAEzD,MAAM,gBAAgB,GAAG,8BAAgB,EAAC,GAAG,CAAC,CAAC;IAC/C,MAAM,KAAK,GAAG,MAAM,gBAAgB,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;IAEtD,MAAM,MAAM,GAAG,SAAS,CAAC;IAEzB,IAAI,QAAQ,GAAW;;QAEnB,CAAC;IAEL,QAAQ,IAAI;kBACE,MAAM;;QAEhB,CAAC;IAEL,MAAM,UAAU,GAAG,MAAM,gBAAgB,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;IAE7D,UAAU,CAAC,OAAO,CAAC,CAAC,KAAU,EAAE,EAAE;QAC9B,MAAM,YAAY,GAAG,qBAAqB,CAAC,KAAK,CAAC,CAAC;QAElD,QAAQ,IAAI,MAAM,GAAG,YAAY,CAAC;QAElC,wBAAc,CAAC,GAAG,CAAC,kBAAkB,EAAE,wBAAc,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,mBAAmB,CAAC,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC;QAErG,IAAG,gBAAK,CAAC,UAAU,CAAC,KAAK,EAAE,yBAAe,CAAC,EAAC,CAAC;YAEzC,mBAAS,CAAC,gBAAgB,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,CAAC,MAAe,EAAE,EAAE;gBACnE,IAAI,MAAM,EAAC,CAAC;oBACR,OAAO;gBACX,CAAC;gBAED,GAAG,CAAC,KAAK,EAAE,CAAC,KAAK,CAAC,YAAY,CAAC,GAAG,6CAA6C,KAAK,QAAQ,CAAC,CAAC;gBAE9F,mBAAS,CAAC,0BAA0B,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;YAC5D,CAAC,CAAC,CAAC;QACP,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,MAAM,UAAU,GAAG,cAAI,CAAC,IAAI,CAAC,SAAS,EAAE,QAAQ,EAAE,eAAe,CAAC,CAAC;IACnE,YAAE,CAAC,aAAa,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;IACvC,OAAO,CAAC,GAAG,CAAC,MAAM,GAAG,KAAK,CAAC;IAC3B,qCAAqC;IACrC,MAAM,wBAAc,CAAC,eAAe,CAAC,+BAA+B,GAAC,UAAU,CAAC,CAAC;IAEjF,GAAG,CAAC,KAAK,EAAE,CAAC,KAAK,CAAC,YAAY,CAAC,GAAG,gCAAgC,EAAE,UAAU,CAAC,CAAC;IAEhF,sBAAY,CAAC,SAAS,CAAC,gBAAgB,EAAE,iBAAiB,CAAC,CAAC;IAE5D,IAAG,CAAC,SAAS,EAAC,CAAC;QACX,YAAE,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;IAC9B,CAAC;IAED,OAAO;AACX,CAAC;AAqDO,kCAAW;AAnDnB,KAAK,UAAU,QAAQ,CAAC,GAAe,EAAE,uBAAgC,IAAI;IAEzE,MAAM,cAAc,GAAW,sBAAY,CAAC,qBAAqB,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC;IACjF,MAAM,iBAAiB,GAAG,cAAc,GAAG,2CAA2C,CAAC;IAEvF,IAAG,YAAE,CAAC,UAAU,CAAC,iBAAiB,CAAC,EAAC,CAAC;QACjC,YAAE,CAAC,UAAU,CAAC,iBAAiB,CAAC,CAAC;IACrC,CAAC;IAGD,IAAI,UAAU,GAAG,KAAK,CAAC;IAEvB,IAAG,aAAa,KAAK,YAAY,EAAC,CAAC;QAC/B,UAAU,GAAG,IAAI,CAAC;IACtB,CAAC;IAED,IAAG,oBAAoB,EAAC,CAAC;QACrB,IAAG,UAAU,EAAC,CAAC;YACX,IAAG,CAAC,YAAE,CAAC,UAAU,CAAC,GAAG,aAAa,iBAAiB,CAAC,EAAC,CAAC;gBAClD,MAAM,IAAI,GAAW,YAAE,CAAC,YAAY,CAAC,GAAG,SAAS,6BAA6B,EAAE,OAAO,CAAC,CAAC;gBACzF,YAAE,CAAC,aAAa,CAAC,GAAG,aAAa,iBAAiB,EAAE,IAAI,CAAC,OAAO,CAAC,iBAAiB,EAAE,YAAY,CAAC,CAAC,CAAC;gBACnG,MAAM,CAAC,KAAK,EAAE,CAAC,KAAK,CAAC,SAAS,CAAC,EAAE,8CAA8C,CAAC,CAAC;YACrF,CAAC;YAED,IAAG,CAAC,YAAE,CAAC,UAAU,CAAC,GAAG,YAAY,iBAAiB,CAAC,EAAC,CAAC;gBACjD,MAAM,IAAI,GAAW,YAAE,CAAC,YAAY,CAAC,GAAG,SAAS,6BAA6B,EAAE,OAAO,CAAC,CAAC;gBACzF,YAAE,CAAC,aAAa,CAAC,GAAG,YAAY,iBAAiB,EAAE,IAAI,CAAC,OAAO,CAAC,iBAAiB,EAAE,YAAY,CAAC,CAAC,CAAC;gBAClG,MAAM,CAAC,KAAK,EAAE,CAAC,KAAK,CAAC,SAAS,CAAC,EAAE,iDAAiD,CAAC,CAAC;YACxF,CAAC;QACL,CAAC;aAAI,CAAC;YACF,IAAG,CAAC,YAAE,CAAC,UAAU,CAAC,GAAG,YAAY,iBAAiB,CAAC,EAAC,CAAC;gBACjD,YAAE,CAAC,YAAY,CAAC,GAAG,SAAS,iBAAiB,EAAE,GAAG,YAAY,iBAAiB,CAAC,CAAC;gBACjF,MAAM,CAAC,KAAK,EAAE,CAAC,KAAK,CAAC,SAAS,CAAC,EAAE,+BAA+B,CAAC,CAAC;YACtE,CAAC;QACL,CAAC;QAED,IAAG,CAAC,YAAE,CAAC,UAAU,CAAC,GAAG,YAAY,gBAAgB,CAAC,EAAC,CAAC;YAChD,YAAE,CAAC,YAAY,CAAC,GAAG,SAAS,uBAAuB,EAAE,GAAG,YAAY,gBAAgB,CAAC,CAAC;YACtF,MAAM,CAAC,KAAK,EAAE,CAAC,KAAK,CAAC,SAAS,CAAC,EAAE,qBAAqB,CAAC,CAAC;QAC5D,CAAC;IACL,CAAC;IACD,OAAO;AACX,CAAC;AASoB,4BAAQ;AAP7B,MAAM,cAAc,GAAG,cAAI,CAAC,OAAO,CAAC,GAAG,aAAa,EAAE,EAAE,cAAc,CAAC,CAAC;AAExE,MAAM,WAAW,GAAG;IAChB,GAAG,EAAE,GAAY,EAAE,CAAC,sBAAY,CAAC,SAAS,CAAC,gBAAgB,CAAC,KAAK,iBAAiB;IAClF,MAAM,EAAE,GAAY,EAAE,CAAC,YAAE,CAAC,UAAU,CAAC,cAAI,CAAC,OAAO,CAAC,GAAG,cAAc,EAAE,EAAE,SAAS,EAAE,QAAQ,EAAE,eAAe,CAAC,CAAC;CAChH;AAE8B,kCAAW;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzL1C,2FAA+C;AAE/C,iIAA8C;AAC9C,sJAAwD;AAExD,6IAA6D;AAuc5C,oBAvcV,mBAAS,CAucU;AAxa1B,MAAM,KAAK;IAQP,YAAY,IAAU;QAClB,IAAG,CAAC,IAAI,CAAC,aAAa,EAAE,EAAC,CAAC;YACtB,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAC;QAE5D,CAAC;QAED,IAAG,CAAC,IAAI,EAAC,CAAC;YACN,OAAO;QACX,CAAC;QAED,IAAI,CAAC,0BAA0B,EAAE,CAAC;QAElC,IAAG,CAAC,IAAI,CAAC,aAAa,EAAE,EAAC,CAAC;YACtB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QACrB,CAAC;aAAI,CAAC;YACF,MAAM,IAAI,KAAK,CAAC,+HAA+H,CAAC,CAAC;QACrJ,CAAC;IACL,CAAC;IAED,0BAA0B;QAEtB,KAAK,CAAC,0BAA0B,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC;IAC3D,CAAC;IAED,MAAM,CAAC,0BAA0B,CAAyB,cAAsB;QAE5E,IAAG,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAC,CAAC;YACnC,MAAM,IAAI,iBAAQ,CAAC,IAAI,KAAK,CAAC,mBAAmB,GAAG,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;QAC9E,CAAC;IACL,CAAC;IAED,iBAAiB;QAEb,OAAO,KAAK,CAAC,iBAAiB,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;IAC1D,CAAC;IAED,MAAM,CAAC,iBAAiB,CAAyB,cAAsB;QAEnE,OAAO,IAAI,CAAC,UAAU,EAAE,CAAC,IAAI,CAAC,CAAC,YAAwB,EAAE,EAAE;YACvD,OAAO,YAAY,CAAC,IAAI,KAAK,cAAc;QAC/C,CAAC,CAAC,KAAK,SAAS;IACpB,CAAC;IAES,KAAK,CAAC,IAAS;QACrB,KAAK,MAAM,GAAG,IAAI,IAAI,EAAE,CAAC;YACrB,IAAI,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE,CAAC;gBAE3B,MAAM,IAAI,GAAG,OAAO,CAAC,WAAW,CAAC,qBAAqB,GAAG,EAAE,EAAG,IAAY,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;gBAElG,IAAG,IAAI,EAAC,CAAC;oBACL,IAAI,CAAC,GAAG,CAAC,GAAG;wBACR,MAAM,EAAE,IAAI,CAAC,GAAG,CAAC;qBACpB,CAAC;gBACN,CAAC;qBAAI,CAAC;oBACF,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;gBAC1B,CAAC;YACL,CAAC;QACL,CAAC;QAED,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,KAAK,CAAC,UAAU,CAAC,IAAS;QAC7B,MAAM,qBAAqB,GAAyB,EAAE,CAAC;QACvD,MAAM,aAAa,GAAgF,IAAI,CAAC,wBAAwB,EAAE,CAAC;QAEnI,IAAI,CAAC,UAAU,EAAE,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;YAChC,qBAAqB,CAAC,KAAK,CAAC,aAAa,EAAE,CAAC,GAAG,KAAK,CAAC;QACzD,CAAC,CAAC,CAAC;QAEH,MAAM,qBAAqB,GAAa,EAAE,CAAC;QAE3C,KAAK,MAAM,GAAG,IAAI,IAAI,EAAE,CAAC;YACrB,IAAI,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE,CAAC;gBAC3B,IAAG,qBAAqB,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAC,CAAC;oBACpC,SAAS;gBACb,CAAC;gBAED,MAAM,kBAAkB,GAAG,aAAa,CAAC,GAAG,CAAC,CAAC;gBAE9C,IAAG,kBAAkB,EAAC,CAAC;oBACnB,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;oBACtB,MAAM,WAAW,GAAG,qBAAqB,CAAC,kBAAkB,CAAC,UAAU,CAAC,CAAC;oBAEzE,MAAM,UAAU,GAAG,MAAM,WAAW,CAAC,MAAM,CAAC;wBACxC,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE;qBACxB,CAAC,CAAC;oBAEH,qBAAqB,CAAC,IAAI,CAAC,kBAAkB,CAAC,cAAc,CAAC,CAAC;oBAE9D,IAAI,CAAC,kBAAkB,CAAC,cAAc,CAAC,GAAG,UAAU,CAAC;gBACzD,CAAC;qBAAM,CAAC;oBACJ,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;gBAC1B,CAAC;YAEL,CAAC;QACL,CAAC;QAED,OAAO,IAAyB,CAAC;IACrC,CAAC;IAEO,wBAAwB;QAE5B,MAAM,aAAa,GAAiF,EAAE,CAAC;QAEvG,KAAK,MAAM,GAAG,IAAI,IAAW,EAAE,CAAC;YAC5B,IAAI,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE,CAAC;gBAE3B,MAAM,IAAI,GAAG,OAAO,CAAC,WAAW,CAAC,qBAAqB,GAAG,EAAE,EAAG,IAAY,CAAC,CAAC;gBAC5E,IAAG,IAAI,EAAC,CAAC;oBACL,IAAG,CAAC,aAAa,CAAC,GAAG,CAAC,EAAC,CAAC;wBACpB,aAAa,CAAC,GAAG,CAAC,GAAG;4BACjB,UAAU,EAAE,IAAI,CAAC,eAAe;4BAChC,cAAc,EAAE,IAAI,CAAC,cAAc;4BACnC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC;yBACjB,CAAC;oBACN,CAAC;gBACL,CAAC;YACL,CAAC;QACL,CAAC;QAED,OAAO,aAAa,CAAC;IACzB,CAAC;IAEM,OAAO;QAEV,MAAM,IAAI,GAAQ,EAAE,CAAC;QAErB,MAAM,aAAa,GAAiF,IAAI,CAAC,wBAAwB,EAAE,CAAC;QACpI,MAAM,yBAAyB,GAAa,EAAE,CAAC;QAE/C,KAAK,MAAM,GAAG,IAAK,IAAY,EAAE,CAAC;YAC9B,IAAG,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,EAAC,CAAC;gBACxB,SAAS;YACb,CAAC;YAED,IAAI,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,CAAE,IAAY,CAAC,WAAW,CAAC,YAAY,IAAI,KAAK,CAAC,YAAY,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,yBAAyB,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC;gBACxJ,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;YAC1B,CAAC;YAED,IAAG,aAAa,CAAC,GAAG,CAAC,EAAC,CAAC;gBACnB,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;gBACtB,yBAAyB,CAAC,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,cAAc,CAAC,CAAC;YACtE,CAAC;QACL,CAAC;QAED,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,aAAa;QACT,OAAQ,IAAY,CAAC,WAAW,CAAC,WAAW,IAAI,IAAI,CAAC,WAAW,CAAC;IACrE,CAAC;IAED,MAAM,CAAC,aAAa;QAChB,OAAQ,IAAY,CAAC,WAAW,CAAC,WAAW,IAAI,IAAI,CAAC,WAAW,CAAC;IACrE,CAAC;IAGD,KAAK,CAAC,IAAI;QACN,MAAM,IAAI,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;QAC5B,IAAI,gBAAgB,GAAG,IAAI,CAAC;QAE5B,IAAI,IAAI,CAAC,EAAE,EAAE,CAAC;YACV,IAAI,CAAC,SAAS,EAAE,CAAC;YAEjB,gBAAgB,GAAG,MAAM,mBAAS,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC;YAEtE,MAAM,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC,CAAC;YACxC,IAAI,CAAC,UAAU,EAAE,CAAC;QACtB,CAAC;aAAM,CAAC;YACJ,IAAI,CAAC,SAAS,EAAE,CAAC;YAEjB,MAAM,eAAe,GAAG,oEAAa,kFAAyB,GAAC,CAAC;YAChE,MAAM,YAAY,GAAG,IAAI,YAAY,eAAe,CAAC,OAAO,CAAC;YAE7D,gBAAgB,GAAG,MAAM,mBAAS,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,aAAa,EAAE,EAAE,YAAY,CAAC,CAAC;YAEpF,MAAM,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC,CAAC;YAExC,IAAI,CAAC,UAAU,EAAE,CAAC;QACtB,CAAC;QAED,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,MAAM,CAAC,mBAAmB,CAAmB,WAAwB;QACjE,MAAM,eAAe,GAA4D,EAAE,CAAC;QAEpF,MAAM,YAAY,GAAa,OAAO,CAAC,eAAe,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,IAAY,EAAU,EAAE;YACvG,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QAC9B,CAAC,CAAC,CAAC;QAEH,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;YACvB,IAAG,MAAM,CAAC,GAAG,CAAC,IAAI,IAAI,EAAC,CAAC;gBACpB,OAAO;YACX,CAAC;YAED,MAAM,WAAW,GAAa,CAAC,WAAW,EAAE,UAAU,EAAE,iBAAiB,EAAE,mBAAmB,CAAC,CAAC;YAEhG,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE;gBAC7B,MAAM,WAAW,GAAG,GAAG,UAAU,IAAI,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC;gBAEnD,MAAM,IAAI,GAAG,OAAO,CAAC,WAAW,CAAC,WAAW,EAAE,WAAW,CAAC,SAAS,CAAC,CAAC;gBAErE,IAAI,IAAI,EAAE,CAAC;oBACP,eAAe,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,EAAC,cAAc,EAAE,UAAU,EAAE,QAAQ,EAAE,IAAI,EAAC,CAAC;gBAChF,CAAC;YACL,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;QAEH,OAAO,eAAe,CAAC;IAC3B,CAAC;IAEM,SAAS;QAEZ,OAAO;IACX,CAAC;IAEM,UAAU;QAEb,OAAO;IACX,CAAC;IAEM,SAAS;QAEZ,OAAO;IACX,CAAC;IAEM,UAAU;QAEb,OAAO;IACX,CAAC;IAEM,MAAM,CAAC,UAAU,CAA4C,WAAc,EAAE,SAAsB;QACtG,OAAO,SAAS,CAAC,SAAS,CAAC,aAAa,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;IACpE,CAAC;IAED,aAAa;QAET,OAAO,KAAK,CAAC,eAAe,CAAE,IAAY,CAAC,WAAW,CAAC,CAAC;IAC5D,CAAC;IAED,MAAM,CAAC,eAAe,CAAC,WAAgB;QAEnC,MAAM,IAAI,GAAG,WAAW,CAAC,SAAgB,CAAC;QAE1C,KAAK,MAAM,GAAG,IAAI,IAAI,EAAE,CAAC;YAErB,IAAI,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE,CAAC;gBAE3B,IAAG,OAAO,CAAC,WAAW,CAAC,qBAAqB,GAAG,EAAE,EAAE,WAAW,CAAC,SAAS,CAAC,EAAC,CAAC;oBACvE,OAAO,IAAI,CAAC;gBAChB,CAAC;YACL,CAAC;QACL,CAAC;QAED,OAAO,KAAK,CAAC;IACjB,CAAC;IAED,YAAY,CAAC,QAAgB;QAEzB,OAAO,KAAK,CAAC,eAAe,CAAE,IAAY,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;IACtE,CAAC;IAED,MAAM,CAAC,eAAe,CAAC,WAAgB,EAAE,QAAgB;QAGrD,IAAG,QAAQ,KAAK,IAAI,EAAC,CAAC;YAClB,OAAO,IAAI,CAAC;QAChB,CAAC;QAED,MAAM,aAAa,GAAG,KAAK,CAAC,mBAAmB,CAAC,WAAW,CAAC,CAAC;QAG/D,MAAM,YAAY,GAAa,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,GAAG,CAAC,CAAC,GAAW,EAAkB,EAAE,GAAE,OAAO,EAAC,GAAG,aAAa,CAAC,GAAG,CAAC,EAAE,GAAG,EAAC,CAAC,EAAC,CAAC,CAAC,MAAM,CAAC,CAAC,OAAuB,EAAE,EAAE,CAAC,OAAO,CAAC,cAAc,KAAK,WAAW,CAAE,CAAC,GAAG,CAAC,CAAC,OAAuB,EAAE,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QAElQ,OAAO,YAAY,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IACzC,CAAC;IAED,cAAc,CAAC,IAAS;QAEpB,MAAM,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACnC,MAAM,aAAa,GAAyB,EAAE,CAAC;QAE/C,KAAK,MAAM,GAAG,IAAI,QAAQ,EAAC,CAAC;YACxB,IAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,EAAC,CAAC;gBACvB,aAAa,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;YACnC,CAAC;QACL,CAAC;QAED,OAAO,aAAa,CAAC;IACzB,CAAC;IAEM,MAAM,CAAC,KAAK,CAAC,eAAe,CAE/B,MAAkB;QAElB,MAAM,UAAU,GAAG,OAAO,CAAC,GAAG,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;QACpD,IAAI,CAAC,0BAA0B,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC3C,OAAO,MAAM,mBAAS,CAAC,eAAe,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;IAC/D,CAAC;IAEM,MAAM,CAAC,KAAK,CAAC,SAAS,CAEzB,UAEC,EACD,SAA0B,IAAI,EAC9B,WAA4C,IAAI;QAEhD,IAAI,CAAC,0BAA0B,CAAC,EAAE,CAAC,CAAC;QAEpC,MAAM,UAAU,GAAG,OAAO,CAAC,GAAG,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;QACpD,MAAM,MAAM,GAAG,MAAM,mBAAS,CAAC,SAAS,CAAC,UAAU,EAAE,UAAU,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC;QAGnF,IAAI,MAAM,EAAE,CAAC;YACT,MAAM,IAAI,GAAe,IAAK,IAA8B,EAAE,CAAC;YAC/D,OAAO,MAAM,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;QACzC,CAAC;QAED,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,MAAM,CAAC,KAAK,CAAC,IAAI,CAEpB,EAAU,EACV,SAA0B,IAAI,EAC9B,WAA4C,IAAI;QAEhD,MAAM,UAAU,GAAG,OAAO,CAAC,GAAG,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;QACpD,IAAI,CAAC,0BAA0B,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAE3C,MAAM,MAAM,GAAG,MAAM,mBAAS,CAAC,SAAS,CAAC,UAAU,EAAE,EAAE,EAAE,EAAE,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC;QAE/E,IAAI,MAAM,EAAE,CAAC;YACT,MAAM,IAAI,GAAe,IAAK,IAA8B,EAAE,CAAC;YAC/D,OAAO,MAAM,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;QACzC,CAAC;QAED,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,MAAM,CAAC,KAAK,CAAC,MAAM,CAEtB,UAAe;QAEf,MAAM,UAAU,GAAG,OAAO,CAAC,GAAG,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;QACpD,IAAI,CAAC,0BAA0B,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC3C,OAAO,MAAM,mBAAS,CAAC,MAAM,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;IAC1D,CAAC;IAEM,KAAK,CAAC,MAAM;QACf,MAAM,UAAU,GAAG,OAAO,CAAC,GAAG,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;QACpD,IAAI,CAAC,0BAA0B,EAAE,CAAC;QAClC,OAAO,MAAM,mBAAS,CAAC,MAAM,CAAC,UAAU,EAAE;YACtC,EAAE,EAAE,IAAI,CAAC,EAAE;SACd,CAAC,CAAC;IACP,CAAC;IAEM,MAAM,CAAC,KAAK,CAAC,MAAM,CAEtB,UAAe,EACf,SAA0B,IAAI,EAC9B,WAA4C,IAAI;QAEhD,MAAM,UAAU,GAAG,OAAO,CAAC,GAAG,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;QACpD,IAAI,CAAC,0BAA0B,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC3C,IAAI,CAAC;YACD,MAAM,MAAM,GAAG,MAAM,mBAAS,CAAC,MAAM,CAAC,UAAU,EAAE,UAAU,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC;YAEhF,IAAI,MAAM,CAAC,MAAM,EAAE,CAAC;gBAChB,MAAM,SAAS,GAAiB,EAAE,CAAC;gBAEnC,KAAK,MAAM,IAAI,IAAI,MAAM,EAAE,CAAC;oBACxB,MAAM,IAAI,GAAe,IAAK,IAA8B,EAAE,CAAC;oBAC/D,SAAS,CAAC,IAAI,CAAC,CAAC,MAAM,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAe,CAAC,CAAC;gBAChE,CAAC;gBAED,OAAO,SAAS,CAAC;YACrB,CAAC;YAED,OAAO,EAAE,CAAC;QACd,CAAC;QAAC,OAAO,QAAwB,EAAE,CAAC;YAChC,QAAQ,CAAC,cAAc,EAAE,CAAC;YAE1B,MAAM,QAAQ,CAAC;QACnB,CAAC;IACL,CAAC;IAGD,MAAM,CAAC,KAAK,CAAC,MAAM,CAAwC,IAAS;QAChE,MAAM,QAAQ,GAAG,IAAI,IAAI,EAAE,CAAC;QAE5B,MAAM,aAAa,GAAG,QAAQ,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;QAEpD,MAAM,QAAQ,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;QAEzC,OAAO,QAAQ,CAAC;IACpB,CAAC;IAED,MAAM,CAAC,UAAU;QAEb,MAAM,gBAAgB,GAAG,8BAAY,GAAE,CAAC;QACxC,OAAO,gBAAgB,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;IAC/C,CAAC;IAED,UAAU;QAEN,OAAO,KAAK,CAAC,UAAU,EAAE,CAAC;IAC9B,CAAC;;AA9ZM,iBAAW,GAAW,IAAI,CAAC;AAE3B,kBAAY,GAAG,CAAC,aAAa,CAAC,CAAC;AAHlC;IADH,uBAAS,EAAC,MAAM,CAAC;;iCACH;AAoanB,qBAAe,KAAK,CAAC;;;;;;;;;;;;;;AC3crB,gEAA0B;AAU1B,SAAS,eAAe,CAAC,cAAsB;IAE3C,MAAM,QAAQ,GAAwB;QAClC,cAAc,EAAE,cAAc;KACjC,CAAC;IAGF,OAAO,UAAS,MAAW,EAAE,GAAW;QACpC,OAAO,CAAC,cAAc,CAAC,mBAAmB,GAAG,EAAE,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC;IACvE,CAAC,CAAC;AACN,CAAC;AAED,qBAAe,eAAe,CAAC;;;;;;;;;;;;;;ACtB/B,gEAA0B;AAO1B,SAAS,iBAAiB,CAAC,eAAuB,EAAE,cAAsB;IAEtE,MAAM,QAAQ,GAA0B;QACpC,eAAe,EAAE,eAAe;QAChC,cAAc,EAAE,cAAc;KACjC,CAAC;IAGF,OAAO,UAAS,MAAW,EAAE,GAAW;QACpC,OAAO,CAAC,cAAc,CAAC,qBAAqB,GAAG,EAAE,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC;IACzE,CAAC,CAAC;AACN,CAAC;AAED,qBAAe,iBAAiB,CAAC;;;;;;;;;;;;;;ACpBjC,gEAA0B;AAU1B,SAAS,QAAQ,CAAC,SAAiB,EAAE,WAAoB,KAAK,EAAE,gBAAwB,IAAI,EAAG,iBAAyB,IAAI;IAExH,MAAM,QAAQ,GAAkB,EAAC,QAAQ,EAAC,CAAC;IAE3C,QAAQ,CAAC,cAAc,GAAG,cAAc,CAAC;IACzC,QAAQ,CAAC,SAAS,GAAG,SAAS,CAAC;IAE/B,IAAG,CAAC,aAAa,EAAC,CAAC;QACf,QAAQ,CAAC,aAAa,GAAG,SAAS,GAAG,KAAK,CAAC;IAC/C,CAAC;SAAK,CAAC;QACH,QAAQ,CAAC,aAAa,GAAG,aAAa,CAAC;IAC3C,CAAC;IAED,OAAO,UAAS,MAAW,EAAE,GAAW;QACpC,OAAO,CAAC,cAAc,CAAC,YAAY,GAAG,EAAE,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC;IAChE,CAAC,CAAC;AACN,CAAC;AAED,qBAAe,QAAQ,CAAC;;;;;;;;;;;;;;AC5BxB,gEAA0B;AAe1B,SAAS,SAAS,CAAC,IAAS,EAAE,OAAqB,IAAI,EAAE,OAAiB,EAAE;IACxE,IAAG,CAAC,IAAI,EAAC,CAAC;QACN,IAAI,GAAG;YACH,QAAQ,EAAE,KAAK;SAClB,CAAC;IACN,CAAC;IAED,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;IAE/B,MAAM,QAAQ,GAAc,EAAC,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAC,CAAC;IAEnD,IAAG,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC,SAAS,EAAC,CAAC;QACtC,QAAQ,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC;QAC9C,QAAQ,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;QAEpC,IAAG,CAAC,IAAI,CAAC,aAAa,EAAC,CAAC;YACpB,QAAQ,CAAC,aAAa,GAAG,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QACpD,CAAC;aAAK,CAAC;YACH,QAAQ,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC;QAChD,CAAC;IACL,CAAC;IAED,IAAG,IAAI,CAAC,cAAc,EAAC,CAAC;QACpB,QAAQ,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC;IAClD,CAAC;IAED,qEAAqE;IAErE,IAAG,IAAI,CAAC,WAAW,EAAC,CAAC;QACjB,QAAQ,CAAC,IAAI,GAAI,IAAY,CAAC;IAClC,CAAC;IAED,OAAO,UAAS,MAAW,EAAE,GAAW;QACpC,OAAO,CAAC,cAAc,CAAC,aAAa,GAAG,EAAE,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC;IACjE,CAAC,CAAC;AACN,CAAC;AAED,qBAAe,SAAS,CAAC;;;;;;;;;;;;;;;;;;ACpDzB,mJAAgD;AAM5C,0BANG,yBAAe,CAMH;AALnB,8HAAkC;AAKb,mBALd,kBAAQ,CAKc;AAJ7B,iIAAoC;AAIL,oBAJxB,mBAAS,CAIwB;AAHxC,yJAAoD;AAGV,4BAHnC,2BAAiB,CAGmC;;;;;;;;;;;;;;;;;ACN3D,mHAAgE;AAChE,sGAAyE;AAKzE,+JAAmE;AACnE,mJAA2D;AAE3D,uFAA8C;AAC9C,uDAAkC;AAClC,yJAA2D;AAC3D,iFAAgE;AAGhE,8FAAwC;AAGxC,8EAA4B;AAC5B,kEAAoB;AACpB,wEAAwB;AAQxB,MAAM,QAAQ,GAAG,CAAC,GAAW,EAAE,EAAE;IAC7B,wBAAc,CAAC,MAAM,CAAC,wBAAc,CAAC,KAAK,EAAE,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC;AAClE,CAAC,CAAC;AAiCF,MAAM,WAAW;IAiBb,YAAY,eAA6C,EAAE,UAAmC,EAAE,UAAyB,IAAI,EAAE,qBAAsC;QACjK,SAAS,EAAC,GAAG,EAAE,YAAY,EAAC,EAAE,EAAE,UAAU,EAAE,CAAC,MAAM,EAAC,GAAG,CAAC;KAC3D;QAbO,SAAI,GAAe,EAAE,CAAC;QACtB,eAAU,GAAG,KAAK,CAAC;QA0HnB,iBAAY,GAAG,CAAC,SAAqB,EAAU,EAAE;YACrD,OAAO,SAAS,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAa,EAAE,EAAE,CAAC,GAAG,GAAG,GAAG,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,CAAC,GAAG,SAAS,CAAC,MAAM,CAAC;QACxG,CAAC,CAAC;QA/GE,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAE7B,IAAG,OAAO,KAAK,IAAI,EAAC,CAAC;YACjB,IAAI,CAAC,QAAQ,GAAG,WAAW,CAAC,IAAI,EAAE,CAAC;QACvC,CAAC;aAAM,CAAC;YACJ,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QAC5B,CAAC;QAED,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;QACvC,IAAI,CAAC,mBAAmB,GAAG,kBAAkB,CAAC;IAClD,CAAC;IAED,MAAM,CAAC,IAAI;QAEP,OAAO,aAAI,GAAE,CAAC;IAClB,CAAC;IAGD,KAAK,CAAC,SAAS,CAAC,QAAgB,EAAE,MAAuB;QAErD,MAAM,QAAQ,GAAG,WAAW,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;QAEzD,IAAG,CAAC,YAAE,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAC,CAAC;YACzB,OAAO,CAAC,GAAG,CAAC,aAAa,wBAAc,CAAC,KAAK,EAAE,CAAC,aAAa,CAAC,QAAQ,CAAC,mCAAmC,CAAC,CAAC;YAC5G,IAAI,CAAC,MAAM,GAAG,IAAI,iBAAU,CAAC,QAAQ,CAAC,CAAC;YAEvC,IAAI,CAAC,WAAW,GAAG,IAAI,8CAA8B,CAAC;gBAClD,SAAS,EAAE,MAAM,CAAC,SAAS,EAAE,8CAA8C;gBAC3E,YAAY,EAAE,MAAM,CAAC,YAAY,EAAE,+GAA+G;gBAClJ,UAAU,EAAE,MAAM,CAAC,UAAU,CAAC,qMAAqM;aACtO,CAAC,CAAC;YAEH,YAAE,CAAC,SAAS,CAAC,QAAQ,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;YAE5C,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;YACzC,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;YAEjE,MAAM,eAAe,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;YACnD,MAAM,gBAAgB,GAAG,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;YAEtD,QAAQ,CAAC,wBAAwB,OAAO,CAAC,MAAM,wBAAwB,eAAe,cAAc,CAAC,CAAC;YACtG,QAAQ,CAAC,2BAA2B,SAAS,CAAC,MAAM,qCAAqC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC;YAC5G,QAAQ,CAAC,wBAAwB,OAAO,CAAC,MAAM,+BAA+B,gBAAgB,cAAc,CAAC,CAAC;YAE9G,IAAI,CAAC,IAAI,GAAG,SAAS,CAAC;YAEtB,IAAI,CAAC,GAAG,CAAC,CAAC;YACV,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,GAAa,EAAE,EAAE;gBAChC,YAAE,CAAC,aAAa,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,WAAW,CAAC,CAAC;gBAC1D,CAAC,EAAE,CAAC;YACR,CAAC,CAAC,CAAC;QACP,CAAC;aAAI,CAAC;YACF,MAAM,UAAU,GAAG,YAAE,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;YAE5C,KAAI,MAAM,QAAQ,IAAI,UAAU,EAAE,CAAC;gBAC/B,MAAM,GAAG,GAAG,YAAE,CAAC,YAAY,CAAC,QAAQ,GAAG,GAAG,GAAG,QAAQ,EAAE,OAAO,CAAC,CAAC;gBAChE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,mBAAQ,CAAC,EAAE,WAAW,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC;YACvD,CAAC;QACL,CAAC;QAED,IAAI,CAAC,KAAK,GAAG,MAAM,4BAAkB,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,MAAM,IAAI,CAAC,UAAU,CAAC,kBAAkB,EAAE,CAAC,CAAC;IAC7G,CAAC;IAED,KAAK;QACD,OAAO,IAAI,CAAC,QAAQ,CAAC;IACzB,CAAC;IAED,OAAO;QAEH,OAAO,IAAI,CAAC,IAAI,CAAC;IACrB,CAAC;IACD,QAAQ;QAEJ,OAAO,IAAI,CAAC,KAAK,CAAC;IACtB,CAAC;IAED,WAAW;QAEP,OAAO,IAAI,CAAC,UAAU,CAAC;IAC3B,CAAC;IAED,SAAS,CAAC,MAAiB;QAEvB,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC;QAExB,IAAI,CAAC,OAAO,GAAG,IAAI,IAAI,CAAC,eAAe,CAAC;YACpC,SAAS,EAAE,IAAI;YACf,MAAM,EAAE,8BAAY,GAAE,CAAC,GAAG,CAAC,oBAAoB,CAAC;YAChD,WAAW,EAAE;gBACT,WAAW,EAAE,8BAAY,GAAE,CAAC,GAAG,CAAC,gBAAgB,CAAC;gBACjD,eAAe,EAAE,8BAAY,GAAE,CAAC,GAAG,CAAC,gBAAgB,CAAC;aACxD;YACD,KAAK,EAAE,qBAAqB;YAC5B,SAAS,EAAE,MAAM,CAAC,iBAAiB,CAAS,sBAAsB,CAAC;YACnE,WAAW,EAAE,MAAM,CAAC,iBAAiB,CAAS,aAAa,CAAC;YAC5D,WAAW,EAAE;gBACT,KAAK,EAAE,MAAM,CAAC,iBAAiB,CAAS,OAAO,CAAC;gBAChD,KAAK,EAAE,MAAM,CAAC,iBAAiB,CAAS,OAAO,CAAC;aACnD;SACJ,CAAC,CAAC;QAEH,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,OAAO;QAEH,OAAO,IAAI,CAAC,OAAO,CAAC;IACxB,CAAC;IAMD,KAAK,CAAC,IAAI,CAAC,MAAmB,EAAE,GAA4B,EAAE,gBAAgF,IAAI;QAE9I,MAAM,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,EAAE,GAAG,CAAqB,CAAC;QAC5E,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAEnC,MAAM,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;QAEpC,OAAO,IAAI,CAAC,SAAS,CAAC;IAC1B,CAAC;IAED,KAAK,CAAC,CAAC,mBAAmB,CAEtB,MAAmB,EACnB,GAA4B,EAC5B,gBAAgF,IAAI;QAGpF,sBAAsB;QACtB,qDAAqD;QACrD,oCAAoC;QACpC,6CAA6C;QAC7C,6CAA6C;QAC7C,2BAA2B;QAC3B,YAAY;QACZ,QAAQ;QACR,MAAM;QAEN,6BAA6B;QAI7B,0DAA0D;QAC1D,wDAAwD;QACxD,4BAA4B;QAC5B,IAAI;IACR,CAAC;IAED,KAAK,CAAC,UAAU,CAAC,MAAmB,EAAE,QAA0C,EAAE,MAAkB,GAAG,EAAE,GAAE,CAAC,EAAE,MAA+B,EAAE,EAAE,aAA8E;QAE3N,MAAM,KAAK,GAAG,IAAI,CAAC;QAEnB,MAAM,IAAI,CAAC,KAAK,EAAE,CAAC,MAAM,CAAC,MAAM,EAAE,EAAE,SAAS,EAAE,CAAC;oBAC5C,iBAAiB,CAAC,KAAa;wBAC3B,QAAQ,CAAC;4BACL,OAAO,EAAE,KAAK;4BACd,MAAM,EAAE,eAAe;yBAC1B,CAAC,CAAC;wBAEH,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;oBACxC,CAAC;iBACJ;aACA,EAAC,CAAC,CAAC;QAEJ,GAAG,EAAE,CAAC;QAEN,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;QAE9B,OAAO,IAAI,CAAC,SAAS,CAAC;IAC1B,CAAC;IAED,KAAK,CAAC,gBAAgB,CAAC,KAAa,EAAE,UAAkB;QAEpD,OAAO,CAAC,GAAG,CAAC,0CAA0C,CAAC,CAAC;QACxD,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,QAAQ,EAAE,CAAC,QAAQ,EAAE,CAAC,yBAAyB,CAAC,GAAG,KAAK,EAAE,EAAE,UAAU,CAAC,CAAC;QACjG,OAAO,CAAC,GAAG,CAAC,oBAAoB,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC;QACjD,OAAO,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,KAAK,CAAgB,EAAE,EAAE,CAAC,GAAG,GAAG,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAC5F,CAAC;IAEO,KAAK,CAAC,SAAS,CAAC,gBAAgF,IAAI;QAExG,IAAI,CAAC;YACD,MAAM,KAAK,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;YAEnC,IAAI,QAAQ,GAAuB,KAAK,CAAC,GAAG,CAAC;YAE7C,QAAQ,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC,CAAC;YAE5D,IAAG,aAAa,EAAC,CAAC;gBACd,QAAQ,GAAG,MAAM,aAAa,CAAC,QAAQ,CAAC,CAAC;YAC7C,CAAC;YAED,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QAE7B,CAAC;QAAA,OAAM,KAAsB,EAAC,CAAC;YAC3B,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACvB,CAAC;IACL,CAAC;IAED,KAAK;QAED,IAAG,IAAI,CAAC,QAAQ,EAAC,CAAC;YACd,OAAO,IAAI,CAAC,QAAQ,CAAC;QACzB,CAAC;QAED,IAAG,CAAC,IAAI,CAAC,SAAS,EAAC,CAAC;YAChB,MAAM,IAAI,iBAAQ,CAAC,IAAI,KAAK,CAAC,wCAAwC,CAAC,EAAE,UAAU,CAAC,CAAC;QACxF,CAAC;QAED,MAAM,WAAW,GAAqD;YAClE,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,gBAAgB,EAAE;SAC5C,CAAC;QAEF,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;QAE9B,OAAO,IAAI,CAAC,QAAQ,CAAC;IACzB,CAAC;IAEO,KAAK,CAAC,WAAW,CAAC,KAAuD;QAE7E,IAAI,CAAC,QAAQ,GAAG,IAAI,0BAAiB,CAAC;YAClC,GAAG,EAAE,IAAI,CAAC,OAAO;YACjB,MAAM,EAAE,KAAK,CAAC,MAAM;SACvB,CAAC,CAAC;QAEH,OAAO,IAAI,CAAC,QAAQ,CAAC;IACzB,CAAC;IAED,KAAK,CAAC,WAAW;QAEb,MAAM,KAAK,GAAG,IAAI,CAAC;QACnB,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAC,EAAE;YAClC,IAAI,CAAC,GAAG,CAAC,CAAC;YAEV,MAAM,QAAQ,GAAmB,WAAW,CAAC,GAAG,EAAE;gBAC9C,IAAG,IAAI,CAAC,WAAW,EAAE,EAAC,CAAC;oBACnB,aAAa,CAAC,QAAQ,CAAC,CAAC;oBACxB,OAAO,CAAC,KAAK,CAAC,CAAC;gBACnB,CAAC;gBAED,IAAG,CAAC,GAAC,CAAC,EAAC,CAAC;oBACJ,aAAa,CAAC,QAAQ,CAAC,CAAC;oBACxB,MAAM,CAAC,IAAI,CAAC,CAAC;gBACjB,CAAC;gBAED,CAAC,EAAE,CAAC;YACR,CAAC,EAAE,GAAG,CAAC,CAAC;QACZ,CAAC,CAAC,CAAC;IACP,CAAC;IAEO,QAAQ,CAAC,GAAW,EAAE,QAA2C;QAErE,MAAM,MAAM,GAAG,IAAI,gBAAM,CAAC,MAAM,EAAE,CAAC;QAEnC,MAAM,CAAC,WAAW,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;QAClC,OAAO,MAAM,CAAC;IAClB,CAAC;IAED,MAAM,CAAC,aAAa,CAAC,EAAU;QAC3B,OAAO,cAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,OAAO,EAAE,eAAe,EAAE,EAAE,CAAC,CAAC;IACrE,CAAC;IAED,MAAM,CAAC,aAAa,CAAC,EAAU;QAC3B,OAAO,cAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,OAAO,EAAE,eAAe,EAAE,EAAE,EAAE,OAAO,CAAC,CAAC;IAC9E,CAAC;IAEM,cAAc;QACjB,OAAO,GAAG,WAAW,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,mBAAmB,CAAC;IACzE,CAAC;IAEM,cAAc,CAAC,CAAS;QAC3B,OAAO,GAAG,WAAW,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC;IACvE,CAAC;IAEO,aAAa;QAEjB,IAAI,UAAkB,CAAC;QACvB,IAAI,QAAQ,GAAuB,IAAI,CAAC;QAExC,MAAM,QAAQ,GAAG,WAAW,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;QAEzD,IAAG,CAAC,YAAE,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAC,CAAC;YACzB,YAAE,CAAC,SAAS,CAAC,QAAQ,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;QAChD,CAAC;QAED,MAAM,aAAa,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;QAE5C,IAAG,CAAC,YAAE,CAAC,UAAU,CAAC,aAAa,CAAC,EAAC,CAAC;YAC9B,UAAU,GAAG,iDAAiD,CAAC;YAE/D,YAAE,CAAC,aAAa,CAAC,aAAa,EAAE,UAAU,CAAC,CAAC;QAChD,CAAC;aAAI,CAAC;YACF,UAAU,GAAG,YAAE,CAAC,YAAY,CAAC,aAAa,EAAE,OAAO,CAAC,CAAC;QACzD,CAAC;QAED,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,CAAC,KAAY,EAAE,MAAM,EAAE,EAAE;YAC/C,QAAQ,GAAG,MAAM,CAAC;QACtB,CAAC,CAAC,CAAC;QAEH,IAAG,CAAC,QAAQ,CAAC,YAAY,CAAC,OAAO,EAAC,CAAC;YAC/B,QAAQ,CAAC,YAAY,CAAC,OAAO,GAAG,EAAE,CAAC;QACvC,CAAC;QAED,OAAO,EAAE,GAAG,EAAE,QAAQ,EAAE,IAAI,EAAE,aAAa,EAAE,CAAC;IAClD,CAAC;IAEO,SAAS,CAAC,GAAuB;QAErC,MAAM,OAAO,GAAG,IAAI,gBAAM,CAAC,OAAO,EAAE,CAAC;QACrC,YAAE,CAAC,aAAa,CAAC,IAAI,CAAC,cAAc,EAAE,EAAE,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,EAAE,OAAO,CAAC,CAAC;IAC/E,CAAC;CAEJ;AAED,qBAAe,WAAW,CAAC;;;;;;;;;;;;;;AC/Y3B,8HAAqE;AAMrE,MAAqB,cAAc;IAM/B,YAAY,IAAmB,EAAE,UAA+B;QAC5D,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;IACjC,CAAC;IAED,KAAK,CAAC,IAAI;QAEN,IAAI,CAAC,KAAK,GAAG,MAAM,kBAAU,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;QAExE,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,QAAQ;QAEJ,OAAO,IAAI,CAAC,KAAK,CAAC;IACtB,CAAC;CACJ;AAtBD,oCAsBC;;;;;;;;;;;;;;AC6CD,MAAM,SAAS;IAoBX,YAAY,MAAqB;QAlBzB,UAAK,GAAW,EAAE,CAAC;QAEnB,cAAS,GAAW,EAAE,CAAC;QACvB,kBAAa,GAAW,EAAE,CAAC;QAC3B,WAAM,GAAW,EAAE,CAAC;QAQpB,eAAU,GAAQ,EAAE,CAAC;QAErB,aAAQ,GAAG,CAAC,KAAa,EAAE,EAAE;QAErC,CAAC,CAAC;QAGE,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;QAC1B,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC,KAAK,CAAC;QAClC,IAAI,CAAC,eAAe,GAAG,MAAM,CAAC,eAAe,CAAC;QAC9C,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;QAC9B,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC;QAElC,IAAI,CAAC,UAAU,GAAG,IAAI,IAAI,EAAE,CAAC;IACjC,CAAC;IAED,MAAM,CAAC,MAAc,EAAE,SAAkB,IAAI;QAEzC,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;QAEjB,IAAI,CAAC,MAAM,EAAE,CAAC;YACV,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACzB,CAAC;aAAM,CAAC;YACJ,IAAI,CAAC,MAAM,IAAI,MAAM,CAAC;YACtB,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QAC1B,CAAC;QAED,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,iBAAiB,CAAC,QAAiC;QAE/C,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC7B,CAAC;IAED,cAAc,CAAC,WAA+B;QAE1C,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QACrC,IAAI,CAAC,KAAK,GAAG,WAAW,CAAC,KAAK,CAAC;IACnC,CAAC;IAED,iBAAiB;QAEb,OAAO,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC;IACpE,CAAC;IAED,UAAU;QAEN,OAAO,IAAI,CAAC,OAAO,CAAC;IACxB,CAAC;IAED,aAAa;QAET,OAAO,IAAI,CAAC,SAAS,CAAC;IAC1B,CAAC;IAED,SAAS;QAEL,OAAO,IAAI,CAAC,KAAK,CAAC;IACtB,CAAC;IAGD,aAAa;QAET,OAAO,IAAI,CAAC,aAAa,CAAC;IAC9B,CAAC;IAED,YAAY,CAAC,KAAa;QAEtB,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;QAE3B,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,YAAY,CAAC,OAAe;QAExB,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC;QAEtB,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,UAAU;QAEN,OAAO,IAAI,CAAC,MAAM,CAAC;IACvB,CAAC;IAED,kBAAkB,CAAmC,OAAY,IAAI;QAEjE,IAAG,IAAI,EAAC,CAAC;YACL,IAAI,CAAC,eAAe,GAAG,EAAC,GAAG,IAAI,EAAE,GAAG,IAAI,CAAC,eAAe,EAAC,CAAC;QAC9D,CAAC;QAED,OAAO,IAAI,CAAC,eAAoB,CAAC;IACrC,CAAC;IAED,iBAAiB,CAAI,GAAiC;QAElD,IAAG,CAAC,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,EAAC,CAAC;YAC3B,OAAO,IAAI,CAAC;QAChB,CAAC;QAED,OAAO,IAAI,CAAC,eAAe,CAAC,GAAG,CAAM,CAAC;IAC1C,CAAC;IAED,iBAAiB,CAAC,GAAW,EAAE,KAAU;QAErC,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;QAElC,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,kBAAkB,CAAC,KAAU;QAEzB,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;QAE7B,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,gBAAgB,CAAC,QAAwB;QAErC,IAAI,CAAC,aAAa,GAAG,QAAQ,CAAC;QAC9B,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,gBAAgB;QAEZ,OAAO,IAAI,CAAC,aAAa,CAAC;IAC9B,CAAC;IAED,QAAQ,CAAC,KAA+B;QAEpC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QAEnC,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,QAAQ;QAEJ,OAAO,IAAI,CAAC,KAAK,CAAC;IACtB,CAAC;IAED,gBAAgB,CAAC,GAAW,EAAE,GAAW;IAGzC,CAAC;IAED,gBAAgB;QAEZ,OAAO,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;IAC1C,CAAC;IAED,KAAK,CAAC,WAAW,CAAC,QAAmC,EAAE,iBAAyB,IAAI,EAAE,YAAiB,EAAE;QAErG,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC;QAC5B,MAAM,WAAW,GAAG,MAAM,QAAQ,CAAC,aAAa,CAAC,IAAI,EAAE,IAAI,EAAE,cAAc,EAAE,SAAS,CAAC,CAAC;QACxF,IAAI,CAAC,MAAM,GAAG,WAAW,CAAC,UAAU,EAAE,CAAC;IAC3C,CAAC;IAED,KAAK,CAAC,iBAAiB,CAAC,QAAyC,EAAE,iBAAyB,IAAI,EAAE,aAAsB,KAAK;QAEzH,MAAM,QAAQ,CAAC,mBAAmB,CAAC,IAAI,EAAE,IAAI,EAAE,cAAc,EAAE,UAAU,CAAC,CAAC;QAC3E,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC;IAChC,CAAC;IAED,KAAK,CAAC,UAAU,CAAC,QAAkC,EAAE,IAAgC,EAAE,MAAkB,GAAG,EAAE,GAAE,CAAC,EAAE,YAAiB,EAAE;QAElI,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC;QAC5B,OAAO,QAAQ,CAAC,YAAY,CAAC,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,SAAS,CAAC,CAAC;IAC7D,CAAC;IAED,QAAQ,CAAC,OAAe;QAEpB,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC;QACrB,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,MAAM,CAAI,GAAW;QAEjB,OAAO,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;IACpF,CAAC;IAED,MAAM,CAAI,GAAW,EAAE,GAAM;QACzB,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;QAE3B,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,KAAK,CAAC,cAAc,CAAC,MAAgB,EAAE,KAA8B;QAEjE,IAAI,KAAK,GAAG,IAAI,CAAC;QACjB,MAAM,MAAM,GAAa,EAAE,CAAC,CAAC,oDAAoD;QAEjF,IAAI,KAAK,EAAE,MAAM,KAAK,IAAI,MAAM,EAAE,CAAC;YAC/B,yFAAyF;YACzF,IAAI,OAAO,IAAI,KAAK,IAAI,KAAK,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;gBACxC,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;gBAC3E,IAAG,KAAK,EAAC,CAAC;oBACN,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;oBAC5B,KAAK,GAAG,KAAK,CAAC;gBAClB,CAAC;gBAED,KAAK,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;gBAExB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,IAAI,KAAK,CAAC,UAAU,CAAE,CAAC,CAAC,0DAA0D;YAClH,CAAC;iBAAM,IACH,yBAAyB,IAAI,KAAK;gBAClC,2BAA2B,IAAI,KAAK;gBACpC,qBAAqB,IAAI,KAAK;gBAC9B,qBAAqB,IAAI,KAAK,EAChC,CAAC;gBACC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;gBACrB,MAAM;YACV,CAAC;QACL,CAAC;IACL,CAAC;IAEO,KAAK,CAAC,iBAAiB,CAAC,MAAW;QACvC,IAAI,MAAM,IAAI,OAAO,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,KAAK,UAAU,EAAE,CAAC;YAC/D,MAAM,aAAa,GAAG,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,EAAE,CAAC;YACrD,IAAI,OAAO,aAAa,CAAC,IAAI,KAAK,UAAU;gBACxC,OAAO,aAAa,CAAC,KAAK,KAAK,UAAU;gBACzC,OAAO,aAAa,CAAC,MAAM,KAAK,UAAU,EAAE,CAAC;gBAC7C,IAAI,CAAC;oBACD,0EAA0E;oBAC1E,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,MAAM,aAAa,CAAC,IAAI,EAAE,CAAC;oBACnD,OAAO,CAAC,IAAI,IAAI,KAAK,YAAY,cAAc,CAAC,CAAC,wEAAwE;gBAC7H,CAAC;gBAAC,OAAO,KAAK,EAAE,CAAC;oBACb,yBAAyB;gBAC7B,CAAC;YACL,CAAC;QACL,CAAC;QACD,OAAO,KAAK,CAAC;IACjB,CAAC;IAED,KAAK,CAAE,gBAAgB,CAAC,cAA8B,EAAE,QAA+B;QACnF,MAAM,MAAM,GAAG,cAAc,CAAC,SAAS,EAAE,CAAC;QAE1C,IAAI,UAAe,CAAC;QAEpB,oCAAoC;QACpC,OAAO,CAAC,CAAC,UAAU,GAAG,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC;YAE9C,IAAI,UAAU,CAAC,KAAK,IAAI,UAAU,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;gBAChD,oCAAoC;gBACpC,QAAQ,CAAC,UAAU,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;YACxC,CAAC;QACL,CAAC;IAEL,CAAC;IAED,UAAU,CAAC,QAA8B,EAAE,aAAqB,EAAE,QAAmE;QACjI,MAAM,MAAM,GAAG;cACT,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC;kBACpB,OAAO,CAAC,OAAO,KAAK,OAAO,CAAC,OAAO;aACxC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC;cACb,aAAa;SAClB,CAAE;QAEH,IAAG,QAAQ,EAAC,CAAC;YACT,QAAQ,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;QAC/B,CAAC;aAAI,CAAC;YACF,IAAI,CAAC,KAAK,GAAG,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC;QACrC,CAAC;IACL,CAAC;IAED,MAAM;QAEF,OAAO;YACH,KAAK,EAAE,IAAI,CAAC,KAAK;YACjB,aAAa,EAAE,IAAI,CAAC,aAAa;YACjC,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,aAAa,EAAE,IAAI,CAAC,aAAa;YACjC,MAAM,EAAE,IAAI,CAAC,MAAM;YACnB,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,aAAa,EAAE,IAAI,CAAC,aAAa;YACjC,KAAK,EAAE;gBACH,EAAE,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE;aACzB;YACD,eAAe,EAAE,IAAI,CAAC,eAAe;YACrC,WAAW,EAAE,IAAI,CAAC,UAAU;YAC5B,UAAU,EAAE,IAAI,CAAC,UAAU,CAAC,WAAW,EAAE;SAC5C,CAAC;IACN,CAAC;CACJ;AAED,qBAAe,SAAS,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrXzB,0GAAgE;AAEhE,MAAqB,eAA4B,SAAQ,gBAAqC;IAU1F,YAAY,IAAU;QAClB,KAAK,CAAC,IAAI,CAAC,CAAC;QAEZ,IAAG,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC;YACjB,IAAI,CAAC,SAAS,GAAG,IAAI,IAAI,EAAE,CAAC;QAChC,CAAC;IACL,CAAC;CACJ;AAjBD,qCAiBC;AAfO;IADH,sBAAY,EAAC,MAAM,CAAC;;8CACH;AAGd;IADH,sBAAY,EAAC,IAAI,CAAC;8BACJ,IAAI;kDAAC;AAGhB;IADH,sBAAY,EAAC,MAAM,CAAC;;+CACL;;;;;;;;;;;;;;ACVpB,gEAA0B;AAc1B,SAAS,KAAK,CAAC,IAAY,EAAE,SAA4B,KAAK,EAAE,SAA2B,EAAE,YAAY,EAAE,MAAM,EAAE;IAC/G,MAAM,QAAQ,GAAmB,EAAC,IAAI,EAAE,MAAM,EAAE,MAAM,EAAC,CAAC;IAExD,OAAO,UAAS,MAAW,EAAE,GAAW;QACpC,OAAO,CAAC,cAAc,CAAC,SAAS,GAAG,EAAE,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC;IAC7D,CAAC,CAAC;AACN,CAAC;AAED,qBAAe,KAAK,CAAC;;;;;;;;;;;;;;;;;;ACtBrB,sHAA4B;AAGxB,gBAHG,eAAK,CAGH;;;;;;;;;;;;;;;;;ACHT,oHAAoC;AACpC,sIAA8C;AAE9C,0HAAsC;AACtC,mIAA4C;AAC5C,0HAAsC;AAEtC,MAAM,EAAG,KAAK,EAAE,MAAM,EAAE,GAAG,wBAAc,CAAC;AAE1C,MAAM,iBAAkB,SAAQ,kBAAU;IAGtC;QACI,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,MAAM,GAAG,oBAAU,CAAC,SAAS,EAAE,CAAC;IACzC,CAAC;IAED,KAAK,CAAC,cAAc,CAAC,WAAmB;QACpC,IAAI,MAAM,GAA2B,IAAI,CAAC;QAC1C,MAAM,IAAI,GAAG,MAAM,oBAAU,CAAC,aAAa,EAAE,CAAC,WAAW,EAAE,CAAC,OAAO,EAAE,CAAC;QACtE,KAAK,MAAM,GAAG,IAAI,IAAI,CAAC,KAAK,EAAE,CAAC;YAC3B,IAAI,GAAG,CAAC,IAAI,KAAK,WAAW,GAAG,MAAM,EAAE,CAAC;gBACpC,MAAM,GAAG,GAAG,CAAC;gBACb,MAAM;YACV,CAAC;QACL,CAAC;QAED,OAAO,MAAM,CAAC;IAClB,CAAC;IAED,KAAK,CAAC,gBAAgB,CAAC,KAAa;QAChC,MAAM,oBAAU,CAAC,aAAa,EAAE,CAAC,aAAa,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC;QAC/E,KAAK,CAAC,uBAAuB,GAAE,KAAK,CAAC,CAAC;IAC1C,CAAC;IAED,KAAK,CAAC,gBAAgB,CAAC,WAAmB;QAEtC,MAAM,cAAc,GAAkC,MAAM,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;QAE7F,IAAI,SAAS,GAAW,IAAI,CAAC;QAE7B,IAAG,CAAC,cAAc,EAAC,CAAC;YAChB,MAAM,MAAM,GAAwC;gBAChD,IAAI,EAAE,WAAW,GAAG,MAAM;gBAC1B,WAAW,EAAE,mBAAmB,WAAW,EAAE;gBAC7C,qBAAqB,EAAE;oBACnB,KAAK,EAAE,CAAC,UAAU,CAAC;iBACtB;aACJ,CAAC;YAEF,IAAI,CAAC;gBACD,MAAM,QAAQ,GAAG,MAAM,oBAAU,CAAC,aAAa,EAAE,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,CAAC;gBAClF,SAAS,GAAI,QAAQ,CAAC,EAAE,IAAI,IAAI,CAAC;YACrC,CAAC;YAAC,OAAO,GAAG,EAAE,CAAC;gBACX,KAAK,CAAC,6BAA6B,EAAE,GAAG,CAAC,CAAC;gBAC1C,MAAM,GAAG,CAAC;YACd,CAAC;QACL,CAAC;aAAM,CAAC;YACJ,SAAS,GAAG,cAAc,CAAC,EAAE,CAAC;QAClC,CAAC;QAED,OAAO,SAAS,CAAC;IACrB,CAAC;IAED,KAAK,CAAC,cAAc,CAAC,SAAiB,EAAE,aAAqB;QAEzD,MAAM,SAAS,GAAG,MAAM,oBAAU,CAAC,aAAa,EAAE,CAAC,YAAY,CAAC,EAAE,SAAS,EAAE,SAAS,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC;QACpG,MAAM,YAAY,GAAG,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,GAAG,CAAC,CAAC;QAE/D,yDAAyD;QACzD,IAAI,QAAQ,CAAC;QACb,MAAM,YAAY,GAAG,aAAa,GAAG,WAAW,CAAC;QAEjD,KAAK,MAAM,GAAG,IAAI,SAAS,CAAC,KAAK,EAAE,CAAC;YAChC,IAAI,GAAG,CAAC,QAAQ,KAAK,YAAY,EAAE,CAAC;gBAChC,QAAQ,GAAG,GAAG,CAAC;gBACf,MAAM;YACV,CAAC;QACL,CAAC;QACD,IAAI,CAAC,QAAQ,EAAE,CAAC;YACZ,QAAQ,GAAG,MAAM,oBAAU,CAAC,aAAa,EAAE,CAAC,cAAc,CAAC;gBACvD,SAAS,EAAE,SAAS;gBACpB,QAAQ,EAAE,YAAY,CAAC,EAAE;gBACzB,QAAQ,EAAE,YAAY;aACzB,CAAC,CAAC,OAAO,EAAE,CAAC;QACjB,CAAC;QAED,OAAO,QAAQ,CAAC;IACpB,CAAC;IAED,KAAK,CAAC,YAAY,CAAC,SAAkB,EAAE,QAAiC,EAAE,aAAqB,KAAK;QAEhG,OAAO,MAAM,oBAAU,CAAC,aAAa,EAAE,CAAC,SAAS,CAAC;YAC9C,SAAS,EAAE,SAAS;YACpB,UAAU,EAAE,QAAQ,CAAC,EAAE;YACvB,UAAU,EAAE,UAAU;YACtB,iBAAiB,EAAE,MAAM,EAAE,+CAA+C;YAC1E,cAAc,EAAE,KAAK;SACxB,CAAC,CAAC,OAAO,EAAE,CAAC;IACjB,CAAC;IAED,KAAK,CAAC,6BAA6B,CAAC,kBAA0B;QAC1D,MAAM,CAAC,6BAA6B,kBAAkB,mBAAmB,CAAC,CAAC;QAE3E,MAAM,YAAY,GAAqC,EAAC,GAAG,CAAC,MAAM,uBAAa,CAAC,iBAAiB,CAAC,kBAAkB,CAAC,CAAC,CAAC,aAAa,EAAC,CAAC;QACtI,MAAM,eAAe,GAAG,YAAY,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;QAE5D,kGAAkG;QAClG,uDAAuD;QAEvD,IAAG,CAAC;YAEA,MAAM,GAAG,GAAG,MAAM,oBAAU,CAAC,MAAM,EAAE,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC;YAEpE,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,CAAC;gBACpB,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;YACtD,CAAC;YAED,MAAM,UAAU,GAAG,MAAM,oBAAU,CAAC,MAAM,EAAE,CAAC,gBAAgB,CAAC;gBAC1D,QAAQ,EAAE,eAAe;gBACzB,YAAY,EAAE,GAAG,CAAC,YAAY;aACjC,CAAC,CAAC,OAAO,EAAE,CAAC;YAGb,MAAM,UAAU,GAAG,MAAM,oBAAU,CAAC,oBAAoB,CAAC,YAAY,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;YAEvF,IAAG,CAAC,UAAU,EAAC,CAAC;gBACZ,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;YAC9C,CAAC;YAED,MAAM,oBAAU,CAAC,0BAA0B,CAAC,UAAU,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;YAEhF,MAAM,oBAAU,CAAC,MAAM,EAAE,CAAC,WAAW,CAAC;gBAClC,YAAY,EAAE,UAAU,CAAC,YAAY;gBACrC,oBAAoB,EAAE,WAAW;gBACjC,YAAY,EAAE,UAAU,CAAC,UAAU,CAAC,YAAY;aACnD,CAAC,CAAC,OAAO,EAAE,CAAC;YAEb,MAAM,CAAC,2DAA2D,CAAC,CAAC;QAExE,CAAC;QAAC,OAAM,CAAc,EAAC,CAAC;YACpB,KAAK,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC;QAC7B,CAAC;IACL,CAAC;CACJ;AAED,qBAAe,iBAAiB,CAAC,YAAY,EAAE,CAAC;;;;;;;;;;;;;;;;;;ACnJhD,oHAAoC;AAEpC,4IAAkD;AAClD,sIAA8C;AAE9C,iFAA0B;AAG1B,MAAM,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,wBAAc,CAAC;AAGtC,MAAM,UAAW,SAAQ,kBAAU;IAW/B;QACI,KAAK,EAAE,CAAC;IACZ,CAAC;IAED,SAAS,CAAC,MAAe;QAErB,IAAG,CAAC,MAAM,EAAC,CAAC;YACR,IAAI,CAAC,MAAM,GAAG,8BAAgB,GAAE,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC;QAC9D,CAAC;aAAI,CAAC;YACF,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACzB,CAAC;QAED,2CAA2C;QAE3C,IAAG,CAAC,IAAI,CAAC,EAAE,IAAI,IAAI,CAAC,MAAM,EAAC,CAAC;YACxB,IAAI,CAAC,EAAE,GAAG,IAAI,iBAAG,CAAC,EAAE,CAAC;gBACjB,MAAM,EAAE,IAAI,CAAC,MAAM;gBACnB,WAAW,EAAE;oBACT,WAAW,EAAE,8BAAgB,GAAE,CAAC,GAAG,CAAC,gBAAgB,CAAC;oBACrD,eAAe,EAAE,8BAAgB,GAAE,CAAC,GAAG,CAAC,gBAAgB,CAAC;iBAC5D;aACJ,CAAC,CAAC;QACP,CAAC;QAED,IAAI,CAAC,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;YAClC,IAAI,CAAC,UAAU,GAAG,IAAI,iBAAG,CAAC,UAAU,CAAC;gBACjC,MAAM,EAAE,IAAI,CAAC,MAAM;gBACnB,WAAW,EAAE;oBACT,WAAW,EAAE,8BAAgB,GAAE,CAAC,GAAG,CAAC,gBAAgB,CAAC;oBACrD,eAAe,EAAE,8BAAgB,GAAE,CAAC,GAAG,CAAC,gBAAgB,CAAC;iBAC5D;aACJ,CAAC,CAAC;QACP,CAAC;QAED,IAAG,CAAC,IAAI,CAAC,GAAG,IAAI,IAAI,CAAC,MAAM,EAAC,CAAC;YACzB,IAAI,CAAC,GAAG,GAAG,IAAI,iBAAG,CAAC,GAAG,CAAC;gBACnB,MAAM,EAAE,IAAI,CAAC,MAAM;gBACnB,WAAW,EAAE;oBACT,WAAW,EAAE,8BAAgB,GAAE,CAAC,GAAG,CAAC,gBAAgB,CAAC;oBACrD,eAAe,EAAE,8BAAgB,GAAE,CAAC,GAAG,CAAC,gBAAgB,CAAC;iBAC5D;aACJ,CAAC,CAAC;QACP,CAAC;QAED,IAAG,CAAC,IAAI,CAAC,GAAG,IAAI,IAAI,CAAC,MAAM,EAAC,CAAC;YACzB,IAAI,CAAC,GAAG,GAAG,IAAI,iBAAG,CAAC,GAAG,CAAC;gBACnB,MAAM,EAAE,IAAI,CAAC,MAAM;gBACnB,WAAW,EAAE;oBACT,WAAW,EAAE,8BAAgB,GAAE,CAAC,GAAG,CAAC,gBAAgB,CAAC;oBACrD,eAAe,EAAE,8BAAgB,GAAE,CAAC,GAAG,CAAC,gBAAgB,CAAC;iBAC5D;aACJ,CAAC,CAAC;QACP,CAAC;QAED,IAAG,CAAC,IAAI,CAAC,GAAG,IAAI,IAAI,CAAC,MAAM,EAAC,CAAC;YACzB,IAAI,CAAC,GAAG,GAAG,IAAI,iBAAG,CAAC,GAAG,CAAC;gBACnB,MAAM,EAAE,8BAAgB,GAAE,CAAC,GAAG,CAAC,mBAAmB,CAAC;gBACnD,WAAW,EAAE;oBACT,WAAW,EAAE,8BAAgB,GAAE,CAAC,GAAG,CAAC,gBAAgB,CAAC;oBACrD,eAAe,EAAE,8BAAgB,GAAE,CAAC,GAAG,CAAC,gBAAgB,CAAC;iBAC5D;aACJ,CAAC,CAAC;QACP,CAAC;QAGD,IAAG,CAAC,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,EAAC,CAAC;YAC5B,IAAI,CAAC,MAAM,GAAG,IAAI,iBAAG,CAAC,MAAM,CAAC;gBACzB,MAAM,EAAE,IAAI,CAAC,MAAM;gBACnB,WAAW,EAAE;oBACT,WAAW,EAAE,8BAAgB,GAAE,CAAC,GAAG,CAAC,gBAAgB,CAAC;oBACrD,eAAe,EAAE,8BAAgB,GAAE,CAAC,GAAG,CAAC,gBAAgB,CAAC;iBAC5D;aACJ,CAAC,CAAC;QACP,CAAC;QAED,IAAG,CAAC,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,MAAM,EAAC,CAAC;YAChC,IAAI,CAAC,UAAU,GAAG,IAAI,iBAAG,CAAC,cAAc,CAAC;gBACrC,MAAM,EAAE,IAAI,CAAC,MAAM;gBACnB,WAAW,EAAE;oBACT,WAAW,EAAE,8BAAgB,GAAE,CAAC,GAAG,CAAC,gBAAgB,CAAC;oBACrD,eAAe,EAAE,8BAAgB,GAAE,CAAC,GAAG,CAAC,gBAAgB,CAAC;iBAC5D;aACJ,CAAC,CAAC;QACP,CAAC;IACL,CAAC;IAED,KAAK,CAAC,uBAAuB,CAAC,OAAe,EAAE,WAAqB;QAEhE,MAAM,EAAC,EAAE,EAAE,QAAQ,EAAC,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC;QAE5E,OAAO;YACH,EAAE;YACF,QAAQ;SACX,CAAC;IACN,CAAC;IAEO,KAAK,CAAC,mBAAmB,CAAC,OAAe,EAAE,WAAqB;QAEpE,MAAM,MAAM,GAAG;YACX,eAAe,EAAE,OAAO,EAAE,iCAAiC;YAC3D,WAAW,EAAE,WAAW;SAC3B,CAAC;QAEF,MAAM,QAAQ,GAAa,EAAE,CAAC;QAC9B,IAAI,OAAO,GAAG,IAAI,CAAC;QAEnB,IAAI,CAAC;YACD,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,MAAM,EAAE,CAAC,uBAAuB,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,CAAC;YAC3E,KAAK,MAAM,MAAM,IAAI,IAAI,CAAC,iBAAiB,EAAE,CAAC;gBAC1C,IAAG,MAAM,CAAC,YAAY,KAAK,SAAS,EAAC,CAAC;oBAClC,OAAO,GAAG,KAAK,CAAC;oBAChB,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;gBACzC,CAAC;YACL,CAAC;QACL,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACX,KAAK,CAAC,yBAAyB,CAAC,CAAC;YACjC,GAAG,CAAC,GAAG,CAAC,CAAC;YACT,OAAO,GAAG,KAAK,CAAC;QACpB,CAAC;QAED,OAAO;YACH,EAAE,EAAE,OAAO;YACX,QAAQ,EAAE,QAAQ;SACrB,CAAC;IACN,CAAC;IAED,KAAK,CAAC,MAAe;QAEjB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;QAEvB,OAAO,IAAI,CAAC,EAAE,CAAC;IACnB,CAAC;IAED,MAAM,CAAC,MAAe;QAElB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;QAEvB,OAAO,IAAI,CAAC,GAAG,CAAC;IACpB,CAAC;IAED,MAAM,CAAC,MAAe;QAElB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;QAEvB,OAAO,IAAI,CAAC,GAAG,CAAC;IACpB,CAAC;IAED,SAAS,CAAC,MAAe;QAErB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;QAEvB,OAAO,IAAI,CAAC,MAAM,CAAC;IACvB,CAAC;IAED,SAAS,CAAC,MAAe;QAErB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;QAEvB,OAAO,IAAI,CAAC,MAAM,CAAC;IACvB,CAAC;IAED,MAAM,CAAC,MAAe;QAElB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;QAEvB,OAAO,IAAI,CAAC,GAAG,CAAC;IACpB,CAAC;IAED,aAAa,CAAC,MAAe;QAEzB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;QAEvB,OAAO,IAAI,CAAC,UAAU,CAAC;IAC3B,CAAC;IAED,aAAa,CAAC,MAAe;QAEzB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;QAEvB,OAAO,IAAI,CAAC,UAAU,CAAC;IAC3B,CAAC;CACJ;AAGO,gCAAU;AADlB,qBAAe,UAAU,CAAC,YAAY,EAAE,CAAC;;;;;;;;;;;;;;;;;;AC7MzC,oHAAoC;AAGpC,MAAM,gBAAgB,GAAe;IACjC,SAAS,EAAE,IAAI;IACf,QAAQ,EAAE,IAAI;IACd,IAAI,EAAE,IAAI;IACV,OAAO,EAAE,IAAI;IACb,SAAS,EAAE,IAAI;IACf,YAAY,EAAE,IAAI;IAClB,MAAM,EAAE,IAAI;IACZ,QAAQ,EAAE,IAAI;IACd,OAAO,EAAE,IAAI;IACb,UAAU,EAAE,IAAI;IAChB,UAAU,EAAE,IAAI;IAChB,WAAW,EAAE,EAAE;IACf,eAAe,EAAE,EAAE;IACnB,SAAS,EAAE,EAAE;IACb,WAAW,EAAE,EAAE;IACf,QAAQ,EAAE,EAAE;IACZ,iBAAiB,EAAE,IAAI;IACvB,cAAc,EAAE,IAAI;IACpB,cAAc,EAAE,IAAI;IACpB,eAAe,EAAE,IAAI;IACrB,iBAAiB,EAAE,IAAI;IACvB,OAAO,EAAE,IAAI;CAChB,CAAC;AAEF,MAAM,gBAAiB,SAAQ,kBAAU;IAQrC,YAAY,GAAe;QACvB,KAAK,EAAE,CAAC;QARJ,iBAAY,GAElB,EAAE,CAAC;QAOD,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC;IACpB,CAAC;IAED,OAAO;QAEH,OAAO,IAAI,CAAC,IAAI,CAAC;IACrB,CAAC;IAEM,GAAG,CAAC,GAA8B;QAErC,IAAG,GAAG,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,GAAuB,CAAC,KAAK,IAAI,EAAC,CAAC;YAChE,OAAO,IAAI,CAAC,IAAI,CAAC,GAAuB,CAAC,CAAC;QAC9C,CAAC;QAED,IAAG,GAAG,IAAI,IAAI,CAAC,YAAY,EAAC,CAAC;YACzB,OAAO,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;QAClC,CAAC;QAED,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,GAAG,CAAC,GAAW,EAAE,GAAQ;QAE5B,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;IACjC,CAAC;IAEM,YAAY,CAAC,SAAiB;QAEjC,MAAM,GAAG,GAAqB,CAAC,iEAAQ,SAAS,CAAC,CAAC,CAAC,QAAQ,CAAC;QAC5D,IAAI,CAAC,IAAI,GAAG,GAAG,EAAE,CAAC;QAElB,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,MAAM,CAAC,kBAAkB,CAAwD,GAAgB;QAEpG,MAAM,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC;QAC5B,MAAM,cAAc,GAAG,kBAAU,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;QAExD,IAAI,GAAG,EAAE,CAAC;YACN,kBAAU,CAAC,UAAU,CAAC,SAAS,CAAC,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC;QACrD,CAAC;aAAK,IAAG,CAAC,cAAc,IAAI,CAAC,GAAG,EAAC,CAAC;YAC9B,kBAAU,CAAC,UAAU,CAAC,SAAS,CAAC,GAAG,IAAI,IAAI,CAAC,gBAAgB,CAAC,CAAC;QAClE,CAAC;QAED,OAAO,kBAAU,CAAC,UAAU,CAAC,SAAS,CAAqB,CAAC;IAChE,CAAC;CACJ;AAGoB,4CAAgB;AADrC,qBAAe,CAAC,GAAgB,EAAoB,EAAE,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC;;;;;;;;;;;;;;;;;;ACvFhG,4IAAkD;AAClD,sIAA8C;AAC9C,gGAA+B;AAC/B,oHAAoC;AAiBpC,MAAM,2BAA2B,GAAG;IAChC,OAAO,EAAE,GAAG,EAAE,GAAG,OAAO,EAAE,EAAC,CAAC;IAC5B,GAAG,EAAE,CAAC,QAAgB,EAAkB,EAAE,CAAC,IAAI;IAC/C,GAAG,EAAE,CAAC,QAAgB,EAAE,GAAc,EAAE,EAAE,GAAE,CAAC;IAC7C,QAAQ,EAAE,CAAC,QAAgB,EAAiB,EAAE,CAAC,IAAI;IACnD,QAAQ,EAAE,CAAC,QAAgB,EAAE,GAAW,EAAE,EAAE,GAAE,CAAC;IAC/C,YAAY,EAAE,GAAG,EAAE,GAAG,OAAO,EAAE,EAAC,CAAC;IACjC,gBAAgB,EAAE,CAAC,QAAgB,EAAE,EAAE,GAAE,CAAC;CAC7C;AAyFqB,kEAA2B;AAvFjD;;GAEG;AACH,MAAM,WAAY,SAAQ,kBAAU;IAGhC;QACI,KAAK,EAAE,CAAC;IACZ,CAAC;IAED,KAAK,CAAC,YAAY,CAAC,QAAgB,EAAE,YAA2B,IAAI,EAAE,kBAAmC,2BAA2B;QAEhI,IAAG,SAAS,EAAC,CAAC;YACV,SAAS,GAAI,SAAS,CAAC,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;QAClD,CAAC;QAED,MAAM,SAAS,GAAG,MAAM,8BAAgB,GAAE,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;QAE7D,IAAG,CAAC,SAAS,EAAC,CAAC;YACX,OAAO,IAAI,CAAC;QAChB,CAAC;QAED,IAAG,CAAC,eAAe,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAC,CAAC;YAC/B,IAAG,CAAC;gBACA,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,SAAS,CAAmB,SAAS,EAAE,SAAS,CAAC,CAAC;gBAC/E,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;gBAExB,eAAe,CAAC,GAAG,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;gBAEzC,IAAG,CAAC,eAAe,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAC,CAAC;oBACpC,eAAe,CAAC,QAAQ,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;gBAClD,CAAC;gBAED,OAAO,IAAI,CAAC;YAChB,CAAC;YAAC,OAAM,CAAc,EAAC,CAAC;gBACpB,wBAAc,CAAC,KAAK,CAAC,gBAAgB,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC;gBAElD,OAAO,KAAK,CAAC;YACjB,CAAC;QACL,CAAC;QAED,IAAG,CAAC,eAAe,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAC,CAAC;YAC/B,eAAe,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;YAC3C,OAAO,KAAK,CAAC;QACjB,CAAC;IACL,CAAC;IAED,OAAO,CAAoE,IAAW;QAElF,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QAEjB,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,OAAO;QAEH,OAAO,IAAI,CAAC,IAAa,CAAC;IAC9B,CAAC;IAED,KAAK,CAAC,SAAS,CAAoE,KAAa,EAAE,WAAqC;QACnI,MAAM,SAAS,GAAW,8BAAgB,GAAE,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;QAE/D,OAAO,MAAM,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACzC,sBAAG,CAAC,MAAM,CAAC,KAAK,EAAE,SAAS,EAAE,CAAC,KAAK,EAAE,SAAS,EAAE,EAAE;gBAC9C,IAAI,KAAK,EAAE,CAAC;oBACR,MAAM,CAAC,KAAK,CAAC,CAAC;oBACd,OAAO;gBACX,CAAC;gBAED,MAAM,OAAO,GAAU,IAAI,WAAW,CAAC,SAAS,CAAC,CAAC;gBAElD,IAAG,IAAI,CAAC,OAAO,EAAE,EAAC,CAAC;oBACf,OAAO,CAAC,IAAI,CAAC,OAAO,EAAW,CAAC,CAAC;oBACjC,OAAO;gBACX,CAAC;qBAAI,CAAC;oBACF,OAAO,CAAC,UAAU,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE;wBAC3B,wBAAc,CAAC,MAAM,CAAC,cAAc,EAAE,wBAAc,CAAC,KAAK,EAAE,CAAC,KAAK,CAAC,uBAAuB,CAAC,EAAE,OAAO,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;wBAE5G,OAAO,CAAC,OAAO,CAAC,CAAC;oBACrB,CAAC,CAAC,CAAC;gBACP,CAAC;YACL,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC;CACJ;AAGQ,kCAAW;AADpB,qBAAe,WAAW,CAAC,YAAY,EAAE,CAAC;;;;;;;;;;;;;;;;;;ACnH1C,0HAAsC;AACtC,oHAAoC;AACpC,sIAA8C;AAC9C,MAAM,EAAE,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,wBAAc,CAAC;AAE7C,MAAM,GAAG,GAAG,IAAI,CAAC;AAEjB,MAAM,iBAAkB,SAAQ,kBAAU;IAG/B,KAAK,CAAC,kBAAkB,CAAC,kBAA0B,EAAE,SAAkB,EAAE,OAAgB,EAAE,mBAA2B,EAAE,GAAG,GAAG;QACjI,MAAM,cAAc,GAAG,oBAAU,CAAC,aAAa,EAAE,CAAC;QAClD,MAAM,YAAY,GAAG,eAAe,kBAAkB,EAAE,CAAC,CAAE,4CAA4C;QAEvG,IAAI,aAAqB,CAAC;QAC1B,MAAM,WAAW,GAA6B,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;QAE7D,4BAA4B;QAC5B,MAAM,cAAc,GAA8B;YAC9C,YAAY;YACZ,OAAO,EAAE,eAAe;YACxB,UAAU,EAAE,IAAI;YAChB,KAAK,EAAE,CAAC;SACX,CAAC;QAEF,IAAI,CAAC;YACD,MAAM,cAAc,GAAG,MAAM,cAAc,CAAC,kBAAkB,CAAC,cAAc,CAAC,CAAC,OAAO,EAAE,CAAC;YACzF,IAAI,cAAc,CAAC,UAAU,IAAI,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC;gBAC5D,aAAa,GAAG,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,aAAc,CAAC;YAChE,CAAC;iBAAM,CAAC;gBACJ,KAAK,CAAC,yDAAyD,CAAC,CAAC;gBACjE,OAAO;YACX,CAAC;QACL,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACX,KAAK,CAAC,iDAAiD,EAAE,GAAG,CAAC,CAAC;YAC9D,OAAO;QACX,CAAC;QAED,IAAI,cAAc,GAA0B,IAAI,CAAC;QAEjD,MAAM,OAAO,GAAG,KAAK,EAAE,SAAkB,EAAiB,EAAE;YAC5D,wFAAwF;YACpF,MAAM,MAAM,GAAwB;gBAChC,YAAY;gBACZ,aAAa;gBACb,SAAS;gBACT,OAAO;gBACP,SAAS;gBACT,KAAK,EAAE,GAAG;aACb,CAAC;YAEF,IAAI,CAAC;gBACD,MAAM,IAAI,GAAyB,MAAM,cAAc,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,CAAC;gBACvF,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;oBACxC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;oBAE5B,4DAA4D;oBAC5D,IAAI,cAAc,KAAK,IAAI,EAAE,CAAC;wBAC1B,YAAY,CAAC,cAAc,CAAC,CAAC;oBACjC,CAAC;oBAED,cAAc,GAAG,UAAU,CAAC,GAAG,EAAE;wBAC7B,GAAG,CAAC,uCAAuC,CAAC,CAAC;wBAC7C,YAAY,CAAC,cAAe,CAAC,CAAC;wBAC9B,OAAO;oBACX,CAAC,EAAE,gBAAgB,CAAC,CAAC,CAAE,gEAAgE;gBAC3F,CAAC;gBAED,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,CAAC;gBAE9C,8CAA8C;gBAC9C,WAAW,CAAC,IAAI,GAAG,UAAU,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,gBAAgB,CAAC,EAAE,IAAI,CAAC,CAAC,CAAE,EAAE;YAClF,CAAC;YAAC,OAAO,GAAG,EAAE,CAAC;gBACX,KAAK,CAAC,wCAAwC,EAAE,GAAG,CAAC,CAAC;YACzD,CAAC;QACL,CAAC,CAAC;QAEF,OAAO,EAAE,CAAC;QAEV,OAAO,WAAW,CAAC;IACvB,CAAC;IAEO,SAAS,CAAC,MAAwB;QACtC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;YACnB,GAAG,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,mBAAmB,CAAC,GAAG,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,SAAU,CAAC,CAAC,WAAW,EAAE,OAAO,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;QAChH,CAAC,CAAC,CAAC;IACP,CAAC;CACJ;AAGQ,8CAAiB;AAD1B,qBAAe,iBAAiB,CAAC,YAAY,EAAE,CAAC;;;;;;;;;;;;;;;;;;AC1FhD,oHAAoC;AACpC,2EAAqC;AACrC,wEAAkD;AAClD,6FAAqC,CAAC,qBAAqB;AAM3D,MAAM,cAAe,SAAQ,kBAAU;IAInC;QACI,KAAK,EAAE,CAAC;QAJJ,cAAS,GAAY,IAAI,CAAC;QAC1B,uBAAkB,GAAS,IAAI,CAAC;QA2MhC,4BAAuB,GAAG,GAAG,EAAE;YACnC,OAAO;gBACH,GAAG,EAAE,OAAO,CAAC,GAAG;gBAChB,IAAI,EAAE,OAAO,CAAC,IAAI;gBAClB,KAAK,EAAE,OAAO,CAAC,KAAK;aACvB,CAAC;QACN,CAAC,CAAC;QAEM,gCAA2B,GAAG,GAAG,EAAE;YACvC,OAAO,CAAC,GAAG,GAAG,CAAC,GAAG,IAAc,EAAE,EAAE,GAAG,CAAC,CAAC;YACzC,OAAO,CAAC,IAAI,GAAG,CAAC,GAAG,IAAc,EAAE,EAAE,GAAG,CAAC,CAAC;YAC1C,OAAO,CAAC,KAAK,GAAG,CAAC,GAAG,IAAc,EAAE,EAAE,GAAG,CAAC,CAAC;QAC/C,CAAC,CAAC;QAEM,gCAA2B,GAAG,GAAG,EAAE;YACvC,MAAM,SAAS,GAAG,IAAI,CAAC,kBAAkB,CAAC;YAE1C,OAAO,CAAC,GAAG,GAAG,SAAS,CAAC,GAAG,CAAC;YAC5B,OAAO,CAAC,IAAI,GAAG,SAAS,CAAC,IAAI,CAAC;YAC9B,OAAO,CAAC,KAAK,GAAG,SAAS,CAAC,KAAK,CAAC;QACpC,CAAC,CAAC;QA1NE,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC/B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACnC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAEjC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACtB,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,uBAAuB,EAAE,CAAC;IAC7D,CAAC;IAGD,KAAK;QACD,OAAO,eAAK,CAAC;IACjB,CAAC;IAED,GAAG,CAAC,GAAG,GAAU;QACb,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC;YAClB,OAAO;QACX,CAAC;QAED,MAAM,KAAK,GAAG,IAAI,CAAC;QAEnB,IAAI,UAAU,GAAU,EAAE,CAAC;QAC3B,IAAI,QAAQ,GAAW,IAAI,CAAC;QAE5B,GAAG,CAAC,OAAO,CAAC,CAAC,IAAS,EAAE,KAAa,EAAE,EAAE;YACrC,MAAM,QAAQ,GAAG,OAAO,IAAI,CAAC;YAC7B,MAAM,MAAM,GAAY,KAAK,IAAI,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC;YAEhD,IAAI,CAAC,CAAC,QAAQ,KAAK,IAAI,IAAI,GAAG,CAAC,MAAM,KAAK,CAAC,CAAC,IAAI,CAAC,QAAQ,KAAK,IAAI,IAAI,QAAQ,KAAK,QAAQ,CAAC,CAAC,IAAI,MAAM,EAAE,CAAC;gBACtG,IAAI,QAAQ,KAAK,QAAQ,EAAE,CAAC;oBACxB,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;gBACtC,CAAC;qBAAM,CAAC;oBAEJ,UAAU,CAAC,OAAO,CAAC,CAAC,aAAa,EAAE,EAAE;wBACjC,KAAK,CAAC,iBAAiB,CAAC,aAAa,CAAC,CAAC;oBAC3C,CAAC,CAAC,CAAC;gBACP,CAAC;gBAED,UAAU,GAAG,EAAE,CAAC;gBAEhB,IAAI,MAAM,EAAE,CAAC;oBACT,IAAI,QAAQ,KAAK,QAAQ,EAAE,CAAC;wBACxB,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;oBACtB,CAAC;yBAAM,CAAC;wBACJ,KAAK,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;oBAClC,CAAC;oBACD,OAAO;gBACX,CAAC;YACL,CAAC;YAED,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAEtB,QAAQ,GAAG,QAAQ,CAAC,CAAC,6CAA6C;QACtE,CAAC,CAAC,CAAC;IACP,CAAC;IAGD,WAAW,CAAC,GAAQ;QAChB,MAAM,YAAY,GAAgB;YAC9B,MAAM,EAAE,OAAO;YACf,aAAa,EAAE,SAAS;YACxB,QAAQ,EAAE,MAAM;YAChB,aAAa,EAAE,QAAQ;YACvB,QAAQ,EAAE,OAAO,EAAE,mBAAmB;YACtC,SAAS,EAAE,OAAO,CAAC,gDAAgD;SACtE,CAAC;QAEF,MAAM,YAAY,GAAG,CAAC,QAAgB,EAAE,SAAiB,EAAU,EAAE;YACjE,OAAQ,eAAa,CAAC,QAAQ,CAAC,CAAC,SAAS,CAAC,CAAC;QAC/C,CAAC,CAAC;QAEF,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;QACpE,MAAM,KAAK,GAAG,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAEpC,MAAM,YAAY,GAAa,EAAE,CAAC;QAElC,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE,CAAC;YACvB,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,2CAA2C,CAAC,CAAC,CAAC,8EAA8E;YAErJ,6CAA6C;YAC7C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;gBACpC,MAAM,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;gBACtB,IAAI,IAAI,KAAK,SAAS,EAAE,CAAC;oBACrB,MAAM,WAAW,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;oBAChC,IAAI,WAAW,KAAK,GAAG,EAAE,CAAC;wBAC1B,+CAA+C;wBAC3C,KAAK,CAAC,CAAC,CAAC,GAAG,YAAY,CAAC,YAAY,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;oBACtD,CAAC;yBAAM,IAAI,WAAW,KAAK,GAAG,EAAE,CAAC;wBACjC,+CAA+C;wBAC3C,KAAK,CAAC,CAAC,CAAC,GAAG,YAAY,CAAC,YAAY,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;oBACtD,CAAC;yBAAM,IAAI,WAAW,KAAK,GAAG,IAAI,WAAW,KAAK,GAAG,EAAE,CAAC;wBACxD,iEAAiE;wBAC7D,KAAK,CAAC,CAAC,CAAC,GAAG,YAAY,CAAC,YAAY,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;oBAC5D,CAAC;yBAAM,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC;wBACzB,sDAAsD;wBAClD,MAAM,GAAG,GAAG,WAAW,CAAC;wBACxB,IAAI,GAAG,KAAK,GAAG,EAAE,CAAC;4BACd,KAAK,CAAC,CAAC,CAAC,GAAG,YAAY,CAAC,YAAY,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;wBACtD,CAAC;6BAAM,CAAC;4BACJ,KAAK,CAAC,CAAC,CAAC,GAAG,YAAY,CAAC,YAAY,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;wBACpD,CAAC;oBACL,CAAC;yBAAM,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC;wBACzB,qDAAqD;wBACjD,MAAM,KAAK,GAAG,WAAW,CAAC;wBAC1B,KAAK,CAAC,CAAC,CAAC,GAAG,YAAY,CAAC,YAAY,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;oBAC7D,CAAC;gBACL,CAAC;YACL,CAAC;YAED,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,+CAA+C;QACtF,CAAC;QAED,OAAO,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,uDAAuD;IAC3F,CAAC;IAID,IAAI,CAAC,GAAG,GAAU;QACd,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC;YAClB,OAAO;QACX,CAAC;QAED,IAAI,KAAK,GAAG,iBAAiB,CAAC;QAE9B,IAAG,GAAG,CAAC,MAAM,GAAG,CAAC,IAAI,OAAO,GAAG,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAC,CAAC;YAC7C,KAAK,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;YACf,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC,EAAO,EAAE,KAAa,EAAE,EAAE,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;QAC5D,CAAC;QAED,GAAG,GAAG,CAAC,eAAK,CAAC,MAAM,CAAC,IAAI,KAAK,GAAG,CAAC,EAAE,GAAG,GAAG,CAAC,CAAC;QAE3C,OAAO,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC;IACzB,CAAC;IAED,cAAc,CAAC,GAAQ;QACnB,MAAM,aAAa,GAAG,CAAC,WAAW,EAAE,UAAU,EAAE,UAAU,EAAE,SAAS,EAAE,YAAY,EAAE,gBAAgB,EAAE,gBAAgB,CAAC,CAAC;QAEzH,MAAM,YAAY,GAAG,EAAE,GAAG,GAAG,EAAE,CAAC,CAAC,sCAAsC;QAEvE,KAAK,MAAM,GAAG,IAAI,aAAa,EAAE,CAAC;YAC9B,IAAI,YAAY,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE,CAAC;gBACnC,YAAY,CAAC,GAAG,CAAC,GAAG,gBAAgB,CAAC;YACzC,CAAC;QACL,CAAC;QAED,OAAO,YAAY,CAAC;IACxB,CAAC;IAED,OAAO;QAEH,OAAO,kBAAI,EAAC,yBAAU,GAAE,CAAC,CAAC;IAC9B,CAAC;IAED,iBAAiB,CAAC,GAAQ;QACtB,IAAI,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACpE,CAAC;IAED,KAAK,CAAC,GAAG,GAAU;QACf,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC;YAClB,OAAO;QACX,CAAC;QAED,IAAI,KAAK,GAAG,eAAe,CAAC;QAE5B,IAAG,GAAG,CAAC,MAAM,GAAG,CAAC,IAAI,OAAO,GAAG,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAC,CAAC;YAC7C,KAAK,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;YACf,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC,EAAO,EAAE,KAAa,EAAE,EAAE,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;QAC5D,CAAC;QAED,GAAG,GAAG,CAAC,eAAK,CAAC,GAAG,CAAC,IAAI,KAAK,GAAG,CAAC,EAAE,GAAG,GAAG,CAAC,CAAC;QAExC,OAAO,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC;IACxB,CAAC;IAED,MAAM,CAAC,GAAG,GAAa;QAGnB,IAAI,KAAK,GAAG,eAAe,CAAC;QAE5B,IAAG,GAAG,CAAC,MAAM,GAAG,CAAC,IAAI,OAAO,GAAG,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAC,CAAC;YAC7C,KAAK,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;YACf,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC,EAAO,EAAE,KAAa,EAAE,EAAE,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;QAC5D,CAAC;QAED,GAAG,GAAG,CAAC,eAAK,CAAC,KAAK,CAAC,IAAI,KAAK,GAAG,CAAC,EAAE,GAAG,GAAG,CAAC,CAAC;QAE1C,OAAO,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC;IACxB,CAAC;IAED,WAAW;QACP,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QACvB,IAAI,CAAC,2BAA2B,EAAE,CAAC;IACvC,CAAC;IAED,YAAY;QACR,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACtB,IAAI,CAAC,2BAA2B,EAAE,CAAC;IACvC,CAAC;IAwBD,aAAa,CAAC,OAAe;QACzB,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,GAAG,OAAO,CAAC,CAAC;IACzC,CAAC;CAGJ;AAIG,wCAAc;AAFlB,qBAAe,cAAc,CAAC,YAAY,EAAE,CAAC;;;;;;;;;;;;;;;;;;ACnP7C,6EAA8C;AAC9C,gEAAsD;AAGtD,4IAA2C;AAC3C,oHAAoC;AACpC,sIAA8C;AAC9C,2FAAqC;AAOrC,MAAM,SAAU,SAAQ,kBAAU;IAK9B,YAAY,OAAwB,IAAI;QACpC,KAAK,EAAE,CAAC;QAJJ,SAAI,GAAoB,IAAI,CAAC;QAC7B,cAAS,GAAG,KAAK,CAAC;QAItB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACrB,CAAC;IAEO,WAAW,CAAC,OAAwB,IAAI;QAC5C,IAAG,IAAI,EAAC,CAAC;YACL,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACrB,CAAC;aAAI,CAAC;YACF,IAAI,CAAC,IAAI,GAAG;gBACR,KAAK,EAAE,8BAAS,GAAE,CAAC,GAAG,CAAC,WAAW,CAAC;gBACnC,MAAM,EAAE,8BAAS,GAAE,CAAC,GAAG,CAAC,UAAU,CAAC;aACtC,CAAC;QACN,CAAC;QAED,IAAG,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAC,CAAC;YACjB,wBAAc,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;YAElC,OAAO;QACX,CAAC;QAED,IAAG,CAAC;YACA,IAAI,CAAC,MAAM,GAAG,IAAI,qBAAY,CAAC;gBAC3B,WAAW,EAAE;oBACT,EAAE,EAAE;wBACA,GAAG,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK;qBACvB;iBACJ;aACJ,CAAC,CAAC;YAEH,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QAC1B,CAAC;QAAC,OAAO,CAAc,EAAC,CAAC;YACrB,wBAAc,CAAC,KAAK,CAAC,yBAAyB,EAAE,CAAC,CAAC,CAAC;YACnD,MAAM,IAAI,iBAAQ,CAAC,CAAC,EAAE,MAAM,CAAC,EAAE,GAAG,eAAe,CAAC,CAAC;QACvD,CAAC;IACL,CAAC;IAEO,KAAK,CAAC,qBAAqB;;QAE/B,MAAM,KAAK,GAAG,WAAI,CAAC,IAAI,0CAAE,KAAK,KAAI,8BAAS,GAAE,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QAC/D,MAAM,MAAM,GAAG,IAAI,qBAAW,CAAC,KAAK,CAAC,CAAC;QAEtC,MAAM,MAAM,CAAC,OAAO,EAAE,CAAC;QAEvB,OAAO,MAAM,CAAC;IAElB,CAAC;IAEO,KAAK,CAAC,uBAAuB;;QAEjC,MAAM,MAAM,GAAG,WAAI,CAAC,IAAI,0CAAE,MAAM,KAAI,8BAAS,GAAE,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QAChE,MAAM,MAAM,GAAG,MAAM,IAAI,CAAE,qBAAqB,EAAE,CAAC;QACnD,OAAO,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC;IAC7B,CAAC;IAEM,KAAK,CAAC,aAAa,CAAC,MAAc,EAAE,MAAc;QACrD,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,qBAAqB,EAAE,CAAC;QAElD,uBAAuB;QACvB,MAAM,QAAQ,GAAG,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC;QACnC,MAAM,QAAQ,GAAG,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC;QAEnC,qCAAqC;QACrC,MAAM,WAAW,GAAG,MAAM,QAAQ,CAAC,eAAe,EAAE,CAAC,OAAO,EAAE,CAAC;QAE/D,2DAA2D;QAC3D,KAAK,MAAM,UAAU,IAAI,WAAW,EAAE,CAAC;YACnC,MAAM,IAAI,GAAG,MAAM,QAAQ,CAAC,UAAU,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC;YAC3E,MAAM,QAAQ,CAAC,UAAU,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QAChE,CAAC;QAED,MAAM,MAAM,CAAC,KAAK,EAAE,CAAC;IACzB,CAAC;IAED,KAAK,CAAC,eAAe,CAAC,cAAsB,EAAE,MAAkB;QAE5D,MAAM,EAAE,GAAG,MAAM,IAAI,CAAC,uBAAuB,EAAE,CAAC;QAChD,MAAM,UAAU,GAAG,EAAE,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC;QAEjD,MAAM,YAAY,GAAG,UAAU,CAAC,KAAK,EAAE,CAAC;QACxC,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;YAC3B,YAAY,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC,MAAM,EAAE,EAAE;gBACjC,OAAO,CAAC,MAAM,CAAC,CAAC;YACpB,CAAC,CAAC,CAAC;YAEH,MAAM,EAAE,CAAC;QACb,CAAC,CAAC,CAAC;IACP,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,IAAS,EAAE,UAAkB,EAAE,eAAwB,KAAK;QAErE,IAAI,MAAM,GAAQ,IAAI,CAAC;QACvB,qDAAqD;QAErD,IAAG,YAAY,EAAC,CAAC;YACb,MAAM,EAAE,GAAG,MAAM,IAAI,CAAC,uBAAuB,EAAE,CAAC;YAChD,MAAM,iBAAiB,GAAG,EAAE,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;YAEpD,MAAM,MAAM,GAAG,MAAM,iBAAiB,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;YAEvD,MAAM,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,EAAE,EAAE,EAAE,MAAM,CAAC,UAAU,CAAC,QAAQ,EAAE,EAAG,CAAC,CAAC;YACjF,OAAO,MAAM,CAAC;QAClB,CAAC;QAED,MAAM,gBAAgB,GAAG,IAAI,CAAC,oBAAoB,CAAC,UAAU,CAAC,CAAC;QAE/D,MAAM,GAAG,MAAM,gBAAgB,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC;QAEjD,OAAO,MAAM,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,EAAE,EAAE,EAAE,MAAM,CAAC,EAAE,EAAE,CAAC,CAAC;IAC/D,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,IAAS,EAAE,UAAkB;QAEtC,MAAM,QAAQ,GAAW,IAAI,CAAC,EAAE,CAAC;QACjC,OAAO,IAAI,CAAC,IAAI,CAAC,CAAC;QAElB,MAAM,gBAAgB,GAAG,IAAI,CAAC,oBAAoB,CAAC,UAAU,CAAC,CAAC;QAE/D,MAAM,gBAAgB,CAAC,MAAM,CAAC;YAC1B,KAAK,EAAE;gBACH,EAAE,EAAE,QAAQ;aACf;YACD,IAAI,EAAE,IAAI;SACb,CAAC,CAAC;QAEH,OAAO,MAAM,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,EAAE,EAAE,EAAE,QAAQ,EAAE,CAAC,CAAC;IAC9D,CAAC;IAGD,KAAK,CAAC,SAAS,CAAC,UAAkB,EAAE,UAAe,EAAE,SAA0B,IAAI,EAAE,WAA4C,IAAI;QAEjI,MAAM,MAAM,GAAQ,EAAE,KAAK,EAAE,UAAU,EAAE,CAAC;QAE1C,IAAG,MAAM,EAAC,CAAC;YACP,MAAM,CAAC,MAAM,GAAG,EAAE,CAAC;YACnB,MAAM,CAAC,OAAO,CAAC,CAAC,SAAiB,EAAE,EAAE;gBACjC,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC;YACpC,CAAC,CAAC,CAAC;QACP,CAAC;QAED,IAAG,QAAQ,EAAC,CAAC;YACT,MAAM,CAAC,OAAO,GAAG,QAAQ,CAAC;QAC9B,CAAC;QAED,OAAO,MAAM,IAAI,CAAC,oBAAoB,CAAC,UAAU,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;IACzE,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,UAAkB,EAAE,UAAe;QAE5C,MAAM,IAAI,CAAC,oBAAoB,CAAC,UAAU,CAAC,CAAC,UAAU,CAAC,EAAE,KAAK,EAAE,UAAU,EAAE,CAAC,CAAC;QAC9E,OAAO;IACX,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,UAAkB,EAAE,UAAe,EAAE,SAA0B,IAAI,EAAE,WAA4C,IAAI;QAE9H,MAAM,MAAM,GAAO,EAAE,KAAK,EAAE,UAAU,EAAE,CAAC;QAEzC,IAAG,MAAM,EAAC,CAAC;YACP,MAAM,CAAC,MAAM,GAAG,EAAE,CAAC;YACnB,MAAM,CAAC,OAAO,CAAC,CAAC,SAAiB,EAAE,EAAE;gBACjC,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC;YACpC,CAAC,CAAC,CAAC;QACP,CAAC;QAED,IAAG,QAAQ,EAAC,CAAC;YACT,MAAM,CAAC,OAAO,GAAG,QAAQ,CAAC;QAC9B,CAAC;QAED,OAAO,MAAM,IAAI,CAAC,oBAAoB,CAAC,UAAU,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;IACxE,CAAC;IAED,KAAK,CAAC,gBAAgB,CAAC,eAAuB;;QAE1C,MAAM,KAAK,GAAG,WAAI,CAAC,IAAI,0CAAE,KAAK,KAAI,8BAAS,GAAE,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QAC/D,MAAM,MAAM,GAAG,IAAI,qBAAW,CAAC,KAAK,CAAC,CAAC;QAEtC,IAAI,CAAC;YACD,MAAM,MAAM,CAAC,OAAO,EAAE,CAAC;YAEvB,MAAM,EAAE,GAAG,MAAM,CAAC,EAAE,CAAC,YAAY,CAAC,CAAC,CAAC,kCAAkC;YAEtE,MAAM,WAAW,GAAG,MAAM,EAAE,CAAC,eAAe,EAAE,CAAC,OAAO,EAAE,CAAC;YACzD,MAAM,uBAAuB,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC,UAAU,EAAE,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;YAEjF,OAAO,uBAAuB,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC;QAC7D,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACb,wBAAc,CAAC,KAAK,CAAC,8BAA8B,EAAE,KAAK,CAAC,CAAC;YAE5D,MAAM,KAAK,CAAC;QAChB,CAAC;IACL,CAAC;IAED,KAAK,CAAC,0BAA0B,CAAC,eAAuB;QAEpD,IAAI,CAAC;YACD,MAAM,EAAE,GAAG,MAAM,IAAI,CAAC,uBAAuB,EAAE,CAAC;YAEhD,kCAAkC;YAClC,MAAM,OAAO,GAAG;gBACZ,UAAU,EAAE;oBACR,SAAS,EAAE,WAAW,EAAE,oCAAoC;oBAC5D,SAAS,EAAE,QAAQ,CAAC,mCAAmC;iBAC1D;aACJ,CAAC;YAEF,MAAM,EAAE,CAAC,gBAAgB,CAAC,eAAe,EAAE,OAAO,CAAC,CAAC,CAAC,oCAAoC;YAEzF,OAAO,EAAE,CAAC,UAAU,CAAC,eAAe,CAAC,CAAC;QAE1C,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACb,wBAAc,CAAC,KAAK,CAAC,8BAA8B,EAAE,KAAK,CAAC,CAAC;YAE5D,MAAM,KAAK,CAAC;QAChB,CAAC;IACL,CAAC;IAEO,oBAAoB,CAAC,UAAkB;QAE3C,IAAG,CAAC,IAAI,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,SAAS,EAAC,CAAC;YAChC,IAAI,CAAC,WAAW,EAAE,CAAC;QACvB,CAAC;QAED,OAAQ,IAAI,CAAC,MAAM,CAAC,UAAgC,CAAS,CAAC;IAClE,CAAC;CACJ;AAGQ,8BAAS;AADlB,qBAAe,SAAS,CAAC,YAAY,EAAE,CAAC;;;;;;;;;;;;;;;;;;ACrPxC,oHAAoC;AAGpC,sIAA8C;AAC9C,mIAA4C;AAC5C,0HAAsC;AACtC,sIAA8C;AAE9C,wEAAwB;AAExB,0HAAsC;AAEtC,MAAM,EAAE,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,wBAAc,CAAC;AAErD,MAAM,iBAAiB,GAAG,IAAI,CAAC,CAAC,IAAI;AAEpC,MAAM,UAAW,SAAQ,kBAAU;IAQ/B;QACI,KAAK,EAAE,CAAC;IACZ,CAAC;IAED,KAAK,CAAC,cAAc,CAAC,YAAoB,EAAE,KAAa;QAEpD,MAAM,QAAQ,GAAG,MAAM,oBAAU,CAAC,MAAM,EAAE,CAAC,mBAAmB,CAAC,EAAE,aAAa,EAAE,YAAY,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC;QAE1G,IAAI,QAAQ,CAAC,WAAW,IAAI,QAAQ,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YAC1D,MAAM,YAAY,GAAG,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC;YAC1D,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,CAAC;YAE9D,IAAG,CAAC,YAAY,CAAC,MAAM,EAAC,CAAC;gBACrB,MAAM,uCAAuC,CAAC;YAClD,CAAC;YAED,GAAG,CAAC,GAAG,KAAK,EAAE,CAAC,KAAK,CAAC,wBAAwB,CAAC,cAAc,EAAE;gBAC1D,KAAK,EAAE,YAAY;gBACnB,KAAK,EAAE,YAAY,CAAC,CAAC,CAAC,CAAC,cAAc;aACxC,CAAC,CAAC;YAEH,OAAO,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC,CAAC,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC;QAChE,CAAC;aAAM,CAAC;YACJ,MAAM,MAAM,GAAG;gBACX,aAAa,EAAE,YAAY;gBAC3B,eAAe,EAAE,gBAAgB;aACpC,CAAC;YAEF,IAAI,CAAC;gBACD,MAAM,QAAQ,GAAG,MAAM,oBAAU,CAAC,MAAM,EAAE,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,CAAC;gBAC9E,MAAM,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;gBAE7C,MAAM,IAAI,CAAC,sBAAsB,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;gBACzD,MAAM,CAAC,aAAa,EAAE,cAAc,CAAC,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;gBAC5F,MAAM,IAAI,CAAC,kBAAkB,CAAC,aAAa,CAAC,CAAC;gBAE7C,MAAM,UAAU,GAAG,MAAM,oBAAU,CAAC,2BAA2B,CAAC,KAAK,CAAC,CAAC;gBACvE,MAAM,oBAAU,CAAC,wBAAwB,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;gBAE7D,GAAG,CAAC,GAAG,KAAK,EAAE,CAAC,KAAK,CAAC,wBAAwB,CAAC,eAAe,EAAE,QAAQ,CAAC,CAAC;gBACzE,OAAO,CAAC,QAAQ,CAAC,YAAY,EAAE,cAAc,EAAE,KAAK,CAAC,CAAC;YAC1D,CAAC;YAAC,OAAO,GAAG,EAAE,CAAC;gBACX,KAAK,CAAC,qBAAqB,EAAE,GAAG,CAAC,CAAC;gBAClC,MAAM,GAAG,CAAC,CAAE,oFAAoF;YACpG,CAAC;QACL,CAAC;IACL,CAAC;IAED,KAAK,CAAC,SAAS,CAAC,YAAoB;QAChC,IAAI,CAAC;YACD,MAAM,oBAAU,CAAC,MAAM,EAAE,CAAC,gBAAgB,CAAC,EAAE,YAAY,EAAE,YAAY,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC;YACrF,KAAK,CAAC,eAAe,YAAY,oBAAoB,CAAC,CAAC;QAC3D,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACX,KAAK,CAAC,2BAA2B,CAAC,CAAC;YACnC,GAAG,CAAC,GAAG,CAAC,CAAC;YACT,MAAM,GAAG,CAAC;QACd,CAAC;IACL,CAAC;IAED,KAAK,CAAC,UAAU,CAAC,YAAoB;QAEjC,IAAI,WAAW,GAAG,KAAK,CAAC;QAExB,GAAG,CAAC,GAAG,KAAK,EAAE,CAAC,YAAY,CAAC,0CAA0C,CAAC,EAAE,CAAC,CAAC;QAE3E,OAAO,CAAC,WAAW,EAAE,CAAC;YAClB,MAAM,aAAa,GAAG,MAAM,oBAAU,CAAC,MAAM,EAAE,CAAC,mBAAmB,CAAC,EAAE,YAAY,EAAE,YAAY,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC;YAE9G,IAAI,aAAa,CAAC,WAAW,IAAI,aAAa,CAAC,WAAW,CAAC,MAAM,IAAI,aAAa,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,cAAc,KAAK,WAAW,EAAE,CAAC;gBAC/H,WAAW,GAAG,IAAI,CAAC;YACvB,CAAC;iBAAM,CAAC;gBACJ,GAAG,CAAC,GAAG,KAAK,EAAE,CAAC,YAAY,CAAC,kBAAkB,CAAC,EAAE,CAAC,CAAC;gBACnD,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,iBAAiB,CAAC,CAAC,CAAC,CAAE,2CAA2C;YACtH,CAAC;QACL,CAAC;IACL,CAAC;IAED,KAAK,CAAC,EAAU;QACZ,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,CAAC;IAC3D,CAAC;IAED,KAAK,CAAC,sBAAsB,CAAC,YAAoB;QAC7C,iDAAiD;QACjD,OAAO,IAAI,EAAE,CAAC;YACV,IAAI,CAAC;gBACD,GAAG,CAAC,GAAG,KAAK,EAAE,CAAC,YAAY,CAAC,gDAAgD,CAAC,EAAE,CAAC,CAAC;gBAEjF,MAAM,QAAQ,GAAG,MAAM,oBAAU,CAAC,MAAM,EAAE,CAAC,oBAAoB,CAAC,EAAE,YAAY,EAAE,YAAY,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC;gBAE1G,MAAM,SAAS,GAAG,QAAQ,CAAC,YAAY,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,WAAW,CAAC,cAAc,KAAK,WAAW,CAAC,CAAC;gBAExG,IAAI,SAAS,EAAE,CAAC;oBACZ,GAAG,CAAC,GAAG,KAAK,EAAE,CAAC,YAAY,CAAC,2BAA2B,CAAC,EAAE,CAAC,CAAC;oBAC5D,OAAO,IAAI,CAAC;gBAChB,CAAC;qBAAI,CAAC;oBACF,GAAG,CAAC,GAAG,KAAK,EAAE,CAAC,YAAY,CAAC,oDAAoD,CAAC,EAAE,CAAC,CAAC;gBACzF,CAAC;gBAED,GAAG,CAAC,GAAG,KAAK,EAAE,CAAC,YAAY,CAAC,wBAAwB,CAAC,EAAE,CAAC,CAAC;gBAEzD,MAAM,wBAAc,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC;YAElD,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACb,OAAO,CAAC,KAAK,CAAC,wCAAwC,EAAE,KAAK,CAAC,CAAC;gBAC/D,MAAM,KAAK,CAAC;YAChB,CAAC;QACL,CAAC;IACL,CAAC;IAED,KAAK,CAAC,kBAAkB,CAAC,aAAqB;QAC1C,IAAI,WAAW,GAAG,KAAK,CAAC;QAExB,GAAG,CAAC,GAAG,KAAK,EAAE,CAAC,YAAY,CAAC,oDAAoD,CAAC,EAAE,EAAE,aAAa,CAAC,CAAC;QAEpG,OAAO,CAAC,WAAW,EAAE,CAAC;YAClB,MAAM,mBAAmB,GAAG,MAAM,oBAAU,CAAC,MAAM,EAAE,CAAC,oBAAoB,CAAC,EAAE,aAAa,EAAE,aAAa,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC;YAEvH,IAAI,mBAAmB,CAAC,YAAY,IAAI,mBAAmB,CAAC,YAAY,CAAC,MAAM,IAAI,mBAAmB,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,cAAc,KAAK,WAAW,EAAE,CAAC;gBACpJ,WAAW,GAAG,IAAI,CAAC;YACvB,CAAC;iBAAM,CAAC;gBACJ,GAAG,CAAC,GAAG,KAAK,EAAE,CAAC,YAAY,CAAC,qBAAqB,CAAC,EAAE,CAAC,CAAC;gBACtD,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC,CAAE,2DAA2D;YACzH,CAAC;QACL,CAAC;IACL,CAAC;IAGD,mBAAmB;QAEf,OAAO,IAAI,CAAC,GAAG,EAAE,CAAC,QAAQ,EAAE,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC3E,CAAC;IAED,KAAK,CAAC,eAAe,CAAC,YAAoB;QAEtC,IAAI,CAAC;YACD,MAAM,MAAM,GAAG;gBACX,YAAY,EAAE,YAAY,CAAE,sEAAsE;aACrG,CAAC;YAEF,MAAM,QAAQ,GAAG,MAAM,oBAAU,CAAC,MAAM,EAAE,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,CAAC;YAClF,IAAI,QAAQ,CAAC,YAAY,IAAI,QAAQ,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;gBAC5D,OAAO,QAAQ,CAAC,YAAY,CAAC,CAAE,6CAA6C;YAChF,CAAC;iBAAM,CAAC;gBACJ,GAAG,CAAC,+CAA+C,CAAC,CAAC;gBACrD,OAAO,IAAI,CAAC;YAChB,CAAC;QACL,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACX,KAAK,CAAC,6BAA6B,EAAE,KAAK,CAAC,CAAC;YAC5C,MAAM,GAAG,CAAC;QACd,CAAC;IACL,CAAC;IAED,KAAK,CAAC,iBAAiB,CAAC,YAAoB;QAExC,MAAM,WAAW,GAAG,IAAI,CAAC,mBAAmB,EAAE,CAAC,CAAE,iCAAiC;QAElF,MAAM,MAAM,GAAG;YACX,YAAY,EAAE,YAAY;YAC1B,WAAW,EAAE,WAAW,EAAG,4BAA4B;YACvD,SAAS,EAAE;gBACP,GAAG,EAAE,IAAI,EAAG,wDAAwD;gBACpE,GAAG,EAAE,IAAI;aACZ;YACD,aAAa,EAAE;gBACX,IAAI,EAAE,UAAU,EAAG,4CAA4C;gBAC/D,YAAY,EAAE;oBACV,QAAQ,EAAE,IAAI;oBACd,QAAQ,EAAE,IAAI;oBACd,WAAW,EAAE,KAAK;iBACrB;aACJ;SACJ,CAAC;QAEF,IAAI,CAAC;YACD,MAAM,QAAQ,GAAG,MAAM,oBAAU,CAAC,MAAM,EAAE,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,CAAC;YAC/E,GAAG,CAAC,GAAG,KAAK,EAAE,CAAC,KAAK,CAAC,wBAAwB,CAAC,kBAAkB,EAAE,QAAQ,CAAC,CAAC;YAE5E,OAAO,CAAC,QAAQ,CAAC,aAAa,EAAE,QAAQ,CAAC,cAAc,CAAC,CAAC;QAC7D,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACX,KAAK,CAAC,kCAAkC,EAAE,GAAG,CAAC,CAAC;YAC/C,MAAM,GAAG,CAAC;QACd,CAAC;IACL,CAAC;IAED,KAAK,CAAC,iBAAiB,CAAC,YAAoB,EAAE,QAAgB;QAE1D,MAAM,MAAM,GAAG;YACX,YAAY,EAAE,YAAY;YAC1B,QAAQ,EAAE,QAAQ;SACrB,CAAC;QAEF,IAAI,CAAC;YACD,MAAM,QAAQ,GAAG,MAAM,oBAAU,CAAC,MAAM,EAAE,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,CAAC;YAC/E,GAAG,CAAC,GAAG,KAAK,EAAE,CAAC,KAAK,CAAC,wBAAwB,CAAC,4BAA4B,EAAE,QAAQ,CAAC,CAAC;YAEtF,OAAO,QAAQ,CAAC,aAAa,CAAC;QAClC,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACb,OAAO,CAAC,KAAK,CAAC,8BAA8B,EAAE,KAAK,CAAC,CAAC;QACzD,CAAC;IACL,CAAC;IAED,KAAK,CAAC,WAAW,CAAC,gBAAwB,EAAE,KAAa,EAAE,YAAoB,EAAE,QAAgB,EAAE,KAAa,EAAE,QAAgB;QAE9H,MAAM,qBAAqB,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;QAE3E,MAAM,MAAM,GAAG;YACX,YAAY,EAAE,GAAG,gBAAgB,EAAE;YACnC,KAAK;YACL,YAAY;YACZ,QAAQ;SACX,CAAC;QAEF,IAAI,CAAC;YACD,GAAG,CAAC,GAAG,KAAK,EAAE,CAAC,KAAK,CAAC,sBAAsB,CAAC,4BAA4B,qBAAqB,0BAA0B,gBAAgB,UAAU,YAAY,OAAO,QAAQ,UAAU,CAAC,CAAC;YAExL,MAAM,QAAQ,GAAG,MAAM,uBAAa,CAAC,YAAY,CAAC,qBAAqB,EAAE,MAAM,CAAC,CAAC;YACjF,MAAM,CAAC,oBAAoB,EAAE,KAAK,EAAE,CAAC,YAAY,CAAC,IAAI,qBAAqB,6BAA6B,CAAC,CAAC,CAAC;YAC3G,GAAG,CAAC,QAAQ,CAAC,CAAC;YACd,OAAO,oDAAmD;QAC9D,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACb,qCAAqC;YACrC,OAAO,CAAC,KAAK,CAAC,wBAAwB,EAAE,KAAK,CAAC,CAAC;YAC/C,MAAM,KAAK,CAAC;QAChB,CAAC;IACL,CAAC;IAED,KAAK,CAAC,gBAAgB,CAAC,KAAa,EAAE,QAAgB;QAElD,MAAM,YAAY,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC;QAEnC,MAAM,QAAQ,GAAW,MAAM,CAAC,EAAE,CAAC;QACnC,MAAM,MAAM,GAAG,QAAQ,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC,CAAC;QACtE,MAAM,SAAS,GAAG,cAAI,CAAC,OAAO,CAAC,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;QAC/D,MAAM,YAAY,GAAG,GAAG,YAAY,oBAAoB,CAAC;QAEzD,MAAM,oBAAoB,GAAW,YAAY,CAAC;QAElD,IAAG,CAAC,CAAC,MAAM,uBAAa,CAAC,cAAc,CAAC,MAAM,GAAG,oBAAoB,CAAC,CAAC,EAAC,CAAC;YACrE,GAAG,CAAC,GAAG,KAAK,EAAE,CAAC,KAAK,CAAC,sBAAsB,CAAC,4BAA4B,oBAAoB,oBAAoB,EAAE,SAAS,CAAC,CAAC;YAC7H,MAAM,OAAO,GAAG,MAAM,uBAAa,CAAC,aAAa,CAAC,GAAG,SAAS,8BAA8B,EAAE,YAAY,CAAC,CAAC;YAE5G,MAAM,uBAAa,CAAC,YAAY,CAAC,oBAAoB,EAAE,OAAO,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC;QAC3F,CAAC;QAED,OAAO,oBAAoB,CAAC;IAChC,CAAC;IAED,KAAK,CAAC,SAAS;IAGf,CAAC;CACJ;AAIG,gCAAU;AAFd,qBAAe,UAAU,CAAC,YAAY,EAAE,CAAC;;;;;;;;;;;;;;;;;;ACrRzC,oHAAoC;AAEpC,4IAA8C;AAC9C,0HAAsC;AACtC,sIAA8C;AAC9C,0HAAsC;AACtC,0HAAsC;AACtC,uHAAoC;AACpC,+IAAoD;AAEpD,wEAAwB;AACxB,kEAAoB;AAEpB,gIAA0C;AAC1C,sIAA8C;AAC9C,0HAAsC;AAGtC,MAAM,EAAE,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,wBAAc,CAAC;AAErD,MAAM,GAAG,GAAG,EAAE,CAAC,CAAC,aAAa;AAwB7B,MAAM,aAAc,SAAQ,kBAAU;IAIlC;QACI,KAAK,EAAE,CAAC;IACZ,CAAC;IAED,KAAK,CAAC,aAAa,CAAC,aAAqB,EAAE,YAAoB,EAAE,UAAmB,KAAK;QACrF,MAAM,aAAa,GAAG,aAAa,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,CAAC;QACrE,MAAM,UAAU,GAAG,cAAI,CAAC,IAAI,CAAC,YAAY,EAAE,QAAQ,EAAE,OAAO,aAAa,UAAU,CAAC,CAAC;QAErF,IAAI,CAAC,YAAE,CAAC,UAAU,CAAC,cAAI,CAAC,IAAI,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC,EAAE,CAAC;YACpD,YAAE,CAAC,SAAS,CAAC,cAAI,CAAC,IAAI,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC,CAAC;QACpD,CAAC;QAED,kBAAkB;QAClB,MAAM,KAAK,GAAsB,EAAE,CAAC;QAEpC,IAAI,YAAE,CAAC,UAAU,CAAC,UAAU,CAAC,EAAE,CAAC;YAC5B,YAAE,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;QAC9B,CAAC;QAED,mDAAmD;QACnD,6EAA6E;QAC7E,IAAI;QACJ,MAAM,SAAS,GAAG,GAAG,cAAI,CAAC,OAAO,CAAC,aAAa,EAAE,IAAI,CAAC,WAAW,CAAC;QAClE,MAAM,eAAe,GAAG,GAAG,aAAa,WAAW,CAAC;QAEpD,YAAE,CAAC,YAAY,CAAC,SAAS,EAAE,eAAe,CAAC,CAAC;QAE5C,GAAG,CAAC,GAAG,KAAK,EAAE,CAAC,KAAK,CAAC,sBAAsB,CAAC,cAAc,KAAK,EAAE,CAAC,YAAY,CAAC,aAAa,CAAC,UAAU,KAAK,EAAE,CAAC,YAAY,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;QAC3I,KAAK,CAAC,IAAI,CAAC,oBAAU,CAAC,aAAa,CAAC,UAAU,EAAE,aAAa,EAAE,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;YAC5E,QAAQ,EAAE,CAAC,mBAAmB,CAAC;SAClC,CAAC,CAAC,CAAC;QAEJ,MAAM,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QAEzB,YAAE,CAAC,UAAU,CAAC,eAAe,CAAC,CAAC;QAE/B,GAAG,CAAC,GAAG,KAAK,EAAE,CAAC,KAAK,CAAC,sBAAsB,CAAC,IAAI,KAAK,EAAE,CAAC,YAAY,CAAC,uBAAuB,CAAC,EAAE,CAAC,CAAC;QAEjG,OAAO,UAAU,CAAC;IACtB,CAAC;IAED,2BAA2B,CAAC,aAAqB,EAAE,YAAoB;QACnE,MAAM,WAAW,GAAG,cAAI,CAAC,IAAI,CAAC,YAAY,EAAE,QAAQ,EAAE,iBAAiB,CAAC,CAAC;QACzE,MAAM,UAAU,GAAG,cAAI,CAAC,IAAI,CAAC,YAAY,EAAE,QAAQ,EAAE,UAAU,aAAa,UAAU,CAAC,CAAC;QACxF,OAAO,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC;IACrC,CAAC;IAED,SAAS,CAAC,MAAc;QAEpB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACzB,CAAC;IAED,KAAK,CAAC,YAAY,CAAC,eAAuB,EAAE,OAAe,EAAE,KAAa,EAAE,QAAiB,EAAE,QAAiB,KAAK;QACjH,IAAI,CAAC,MAAM,GAAG,8BAAY,GAAE,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC;QAEtD,MAAM,OAAO,GAAG,YAAE,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;QAEzC,IAAI,CAAC;YAED,MAAM,YAAY,GAAG,8BAAY,GAAE,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC;YAE7D,MAAM,mBAAS,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;YAE3C,MAAM,CAAE,cAAc,CAAC,GAAG,MAAM,oBAAU,CAAC,cAAc,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;YAE5E,GAAG,CAAC,GAAG,KAAK,EAAE,CAAC,KAAK,CAAC,sBAAsB,CAAC,IAAI,KAAK,EAAE,CAAC,YAAY,CAAC,sBAAsB,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,KAAK,EAAE,CAAC,GAAG,CAAC,QAAQ,YAAY,IAAI,eAAe,MAAM,CAAC,EAAE,CAAC,CAAC;YAElL,GAAG,CAAC,GAAG,KAAK,EAAE,CAAC,KAAK,CAAC,sBAAsB,CAAC,cAAc,KAAK,EAAE,CAAC,YAAY,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YAE9F,MAAM,QAAQ,GAAG;gBACb,MAAM,EAAE,YAAY;gBACpB,GAAG,EAAE,MAAM,GAAG,eAAe,GAAG,MAAM,EAAE,sCAAsC;gBAC9E,IAAI,EAAE,OAAO;aAChB,CAAC;YAEF,MAAM,MAAM,GAAG,MAAM,mBAAS,CAAC,MAAM,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;YACtD,GAAG,CAAC,GAAG,KAAK,EAAE,CAAC,KAAK,CAAC,sBAAsB,CAAC,aAAa,KAAK,EAAE,CAAC,YAAY,CAAC,OAAO,CAAC,OAAO,KAAK,EAAE,CAAC,GAAG,CAAC,QAAQ,YAAY,QAAQ,eAAe,MAAM,CAAC,EAAE,CAAC,CAAC;YAG/J,MAAM,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC;YAC1B,MAAM,IAAI,GAAG;gBACT,QAAQ,EAAE,YAAY;gBACtB,KAAK,EAAE,MAAM;aAChB,CAAC;YAEF,MAAM,kBAAkB,GAAE,MAAM,GAAG,eAAe,CAAC;YAEnD,MAAM,QAAQ,GAAG,eAAe,CAAC;YACjC,MAAM,gBAAgB,GAAY,MAAM,IAAI,CAAC,cAAc,CAAC,kBAAkB,CAAC,CAAC;YAEhF,IAAI,gBAAgB,EAAE,CAAC;gBACnB,MAAM,oBAAU,CAAC,SAAS,EAAE,CAAC,kBAAkB,CAAC;oBAC5C,YAAY,EAAE,kBAAkB;oBAChC,GAAG,IAAI;iBACV,CAAC,CAAC,OAAO,EAAE,CAAC;YACjB,CAAC;iBAAM,CAAC;gBACJ,MAAM,YAAY,GAA2C;oBACzD,YAAY,EAAE,kBAAkB;oBAChC,OAAO,EAAE,YAAY;oBACrB,IAAI,EAAE,8BAAY,GAAE,CAAC,GAAG,CAAC,iBAAiB,CAAC;oBAC3C,OAAO,EAAE,QAAQ;oBACjB,IAAI;oBACJ,SAAS,EAAE;wBACP,SAAS,EAAE,CAAC,QAAQ,CAAC,EAAG,sBAAsB;wBAC9C,gBAAgB,EAAE,MAAM,oBAAU,CAAC,kBAAkB,EAAE,EAAG,6BAA6B;qBAC1F;oBACD,iBAAiB,EAAE;wBACf;4BACI,GAAG,EAAE,cAAc;4BACnB,cAAc,EAAE,UAAU,CAAE,6EAA6E;yBAC5G;qBACJ;oBACD,UAAU,EAAE,IAAI;oBAChB,OAAO,EAAE,EAAE,GAAG,GAAG;oBACjB,WAAW,EAAE;wBACT,SAAS,EAAE;4BACP,SAAS,EAAE,uBAAuB,GAAG,eAAe;4BACpD,IAAI,EAAE,mBAAmB,GAAG,eAAe;yBAC9C;qBACJ;iBACJ,CAAC;gBAEF,GAAG,CAAC,KAAK,EAAE,CAAC,KAAK,CAAC,0BAA0B,GAAG,CAAC,gBAAgB,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,GAAG,0BAA0B,CAAC,GAAG,KAAK,EAAE,CAAC,YAAY,CAAC,kBAAkB,CAAC,CAAC,CAAC;gBAEtK,MAAM,oBAAU,CAAC,SAAS,EAAE,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,OAAO,EAAE,CAAC;YACxE,CAAC;YAED,MAAM,IAAI,CAAC,aAAa,CAAC,eAAe,EAAE,gBAAgB,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC;YAEpF,IAAG,gBAAgB,EAAC,CAAC;gBACjB,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,kBAAkB,CAAC,CAAC;gBAEtE,IAAG,YAAY,CAAC,aAAa,CAAC,OAAO,KAAK,QAAQ,EAAC,CAAC;oBAChD,GAAG,CAAC,KAAK,EAAE,CAAC,KAAK,CAAC,sBAAsB,CAAC,GAAG,kDAAkD,GAAG,KAAK,EAAE,CAAC,YAAY,CAAC,kBAAkB,CAAC,CAAC,CAAC;oBAE3I,MAAM,oBAAU,CAAC,SAAS,EAAE,CAAC,2BAA2B,CAAC;wBACrD,YAAY,EAAE,kBAAkB;wBAChC,OAAO,EAAE,QAAQ;qBACpB,EAAE,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE;wBACb,IAAI,GAAG,EAAE,CAAC;4BACN,OAAO,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,KAAK,CAAC,CAAC;wBAChC,CAAC;6BAAM,CAAC;4BACJ,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;wBACtB,CAAC;oBACL,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;oBAEb,MAAM,IAAI,CAAC,aAAa,CAAC,eAAe,EAAE,gBAAgB,CAAC,CAAC;oBAE5D,2BAA2B;oBAC3B,6BAA6B;oBAC7B,sBAAsB;oBACtB,MAAM;oBAEN,wGAAwG;gBAC5G,CAAC;YACL,CAAC;YAED,MAAM,CAAC,oBAAoB,EAAE,oBAAoB,kBAAkB,cAAc,gBAAgB,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC,CAAC;YAE7H,MAAM,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,eAAe,CAAC,CAAC;YAEvD,IAAG,CAAC,CAAC,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,UAAU,CAAC,YAAY,CAAC,SAAS,KAAK,IAAI,EAAC,CAAC;gBAE1E,IAAG,CAAC,MAAM,2BAAiB,CAAC,cAAc,CAAC,kBAAkB,CAAC,CAAC,KAAK,IAAI,EAAC,CAAC;oBACtE,MAAM,IAAI,CAAC,wBAAwB,CAAC,kBAAkB,EAAE,KAAK,CAAC,CAAC;gBACnE,CAAC;gBAED,IAAG,CAAC,CAAC,MAAM,oBAAU,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAC,EAAC,CAAC;oBACjD,MAAM,2BAAiB,CAAC,6BAA6B,CAAC,kBAAkB,CAAC,CAAC;gBAC9E,CAAC;YACL,CAAC;QACL,CAAC;QAAC,OAAO,GAAgB,EAAE,CAAC;YACxB,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YACnB,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YACf,MAAM,GAAG,CAAC;QACd,CAAC;IACL,CAAC;IAED,aAAa,CAAC,aAAqB;QAE/B,MAAM,SAAS,GAAG,cAAI,CAAC,OAAO,CAAC,SAAS,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;QAC3E,MAAM,cAAc,GAAG,GAAG,SAAS,qBAAqB,aAAa,eAAe,CAAC;QAErF,IAAG,CAAC,YAAE,CAAC,UAAU,CAAC,cAAc,CAAC,EAAC,CAAC;YAC/B,MAAM,IAAI,KAAK,CAAC,sBAAsB,aAAa,+BAA+B,CAAC,CAAC;QACxF,CAAC;QAED,OAAO,IAAI,CAAC,KAAK,CAAC,YAAE,CAAC,YAAY,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC,CAAC;IAChE,CAAC;IAED,KAAK,CAAC,aAAa,CAAC,YAAoB,EAAE,KAAa,EAAE,KAAa,EAAE,QAAgB,EAAE,QAAiB,KAAK;QAC5G,MAAM,qBAAqB,GAAG,2BAA2B,CAAC;QAC1D,MAAM,QAAQ,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,sBAAY,CAAC,SAAS,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;QAC/E,MAAM,QAAQ,GAAG,8BAAY,GAAE,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC;QACzD,MAAM,SAAS,GAAG,cAAI,CAAC,OAAO,CAAC,SAAS,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;QAG3E,IAAG,CAAC,IAAI,CAAC,MAAM,EAAC,CAAC;YACb,IAAI,CAAC,MAAM,GAAG,8BAAY,GAAE,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC;QAC1D,CAAC;QAED,IAAG,QAAQ,EAAC,CAAC;YACT,GAAG,CAAC,GAAG,KAAK,EAAE,CAAC,KAAK,CAAC,sBAAsB,CAAC,iCAAiC,CAAC,CAAC;YAC/E,MAAM,oBAAU,CAAC,WAAW,CAAC,YAAY,EAAE,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAAE,KAAK,EAAC,QAAQ,CAAC,CAAC;YAEtF,OAAO;QACX,CAAC;QAED,GAAG,CAAC,GAAG,KAAK,EAAE,CAAC,KAAK,CAAC,sBAAsB,CAAC,IAAI,KAAK,EAAE,CAAC,YAAY,CAAC,8BAA8B,GAAG,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;QAEtH,IAAG,CAAC,QAAQ,EAAC,CAAC;YACV,MAAM,MAAM,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC;YAC7B,OAAO,CAAC,KAAK,CAAC,GAAG,SAAS,qBAAqB,YAAY,EAAE,CAAC,CAAC;YAE/D,MAAM,CAAC,cAAc,YAAY,aAAa,CAAC,CAAC;YAEhD,MAAM,wBAAc,CAAC,eAAe,CAAC,aAAa,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;YAEhE,MAAM,CAAC,KAAK,EAAE,CAAC,KAAK,CAAC,GAAG,YAAY,+BAA+B,CAAC,CAAC,CAAC;YAEtE,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;YAEtB,MAAM,WAAW,GAAG,GAAG,SAAS,qBAAqB,YAAY,eAAe,CAAC;YAEjF,MAAM,OAAO,GAAG,MAAM,oBAAU,CAAC,aAAa,CAAC,GAAG,OAAO,CAAC,GAAG,EAAE,iCAAiC,YAAY,cAAc,EAAE,WAAW,CAAC,CAAC;YAEzI,MAAM,QAAQ,GAAG;gBACb,MAAM,EAAE,QAAQ;gBAChB,GAAG,EAAE,OAAO,YAAY,cAAc;gBACtC,IAAI,EAAE,YAAE,CAAC,YAAY,CAAC,OAAO,CAAC;aACjC,CAAC;YAEF,GAAG,CAAC,GAAG,KAAK,EAAE,CAAC,KAAK,CAAC,sBAAsB,CAAC,2BAA2B,OAAO,cAAc,CAAC,CAAC;YAE9F,MAAM,MAAM,GAAG,MAAM,mBAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;YAChD,MAAM,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC;YAE1B,oCAAoC;YAEpC,GAAG,CAAC,GAAG,KAAK,EAAE,CAAC,KAAK,CAAC,sBAAsB,CAAC,IAAI,KAAK,EAAE,CAAC,YAAY,CAAC,kCAAkC,GAAG,IAAI,CAAC,MAAM,GAAG,cAAc,GAAG,MAAM,CAAC,EAAE,CAAC,CAAC;YAEpJ,sBAAY,CAAC,SAAS,CAAC,qBAAqB,EAAE,MAAM,CAAC,CAAC;YACtD,MAAM,oBAAU,CAAC,WAAW,CAAC,YAAY,EAAE,KAAK,EAAE,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;YAErF,2BAA2B;YAC3B,6BAA6B;YAC7B,sBAAsB;YACtB,MAAM;YAEN,+GAA+G;QACnH,CAAC;IACL,CAAC;IAED,KAAK,CAAC,iBAAiB,CAAC,kBAA0B;QAE9C,IAAI,CAAC;YACD,OAAO,MAAM,oBAAU,CAAC,SAAS,EAAE,CAAC,WAAW,CAAC,EAAE,YAAY,EAAE,kBAAkB,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC;QACpG,CAAC;QAAC,OAAO,CAAc,EAAE,CAAC;YACtB,OAAO,IAAI,CAAC;QAChB,CAAC;IACL,CAAC;IAED,KAAK,CAAC,cAAc,CAAC,kBAA0B;QAC3C,OAAO,CAAC,CAAC,CAAC,MAAM,IAAI,CAAC,iBAAiB,CAAC,kBAAkB,CAAC,CAAC,CAAC;IAChE,CAAC;IAED,KAAK,CAAC,aAAa,CAAC,YAAoB,EAAE,UAAkB,IAAI,EAAC,YAAoB,MAAM,EAAE,aAAqB,IAAI;QAClH,MAAM,kBAAkB,GAAG,MAAM,GAAG,YAAY,CAAC;QACjD,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QAC7B,GAAG,CAAC,GAAG,KAAK,EAAE,CAAC,YAAY,CAAC,mCAAmC,GAAG,CAAC,OAAO,KAAK,IAAI,CAAC,CAAC,CAAC,IAAI,GAAG,OAAO,GAAG,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAE,eAAe,CAAC,EAAE,CAAC,CAAC;QAEtI,OAAO,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS,GAAG,SAAS,EAAE,CAAC;YACxC,GAAG,CAAC,GAAG,KAAK,EAAE,CAAC,YAAY,CAAC,qBAAqB,CAAC,EAAE,CAAC,CAAC;YACtD,MAAM,EAAE,aAAa,EAAE,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,kBAAkB,CAAC,CAAC;YAE3E,IAAI,aAAa,CAAC,KAAK,KAAK,QAAQ,EAAE,CAAC;gBACnC,OAAO,CAAC,6BAA6B;YACzC,CAAC;YAED,0GAA0G;YAC1G,IAAI,aAAa,CAAC,KAAK,KAAK,QAAQ,EAAE,CAAC;gBACnC,MAAM,IAAI,KAAK,CAAC,mBAAmB,kBAAkB,gCAAgC,aAAa,CAAC,WAAW,EAAE,CAAC,CAAC;YACtH,CAAC;YAED,kCAAkC;YAClC,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC,CAAC;QAClE,CAAC;QAED,MAAM,IAAI,KAAK,CAAC,mBAAmB,kBAAkB,gCAAgC,SAAS,KAAK,CAAC,CAAC;IACzG,CAAC;IAED,KAAK,CAAC,YAAY,CAAC,kBAA0B;QAGzC,MAAM,OAAO,GAAG,MAAM,2BAAiB,CAAC,cAAc,CAAC,kBAAkB,CAAC,CAAC;QAE3E,MAAM,2BAAiB,CAAC,gBAAgB,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QAErD,MAAM,oBAAU,CAAC,SAAS,EAAE,CAAC,cAAc,CAAC;YACxC,YAAY,EAAE,kBAAkB;SACnC,CAAC,CAAC,OAAO,EAAE,CAAC;IACjB,CAAC;IAED,KAAK,CAAC,YAAY,CACd,eAAuB,EACvB,OAAY;QAGZ,IAAI,cAAc,GAAuB,iBAAiB,CAAC;QAE3D,MAAM,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,eAAe,CAAC,CAAC;QAEvD,IAAG,CAAC,CAAC,UAAU,CAAC,YAAY,IAAI,UAAU,CAAC,YAAY,CAAC,cAAc,EAAC,CAAC;YACpE,cAAc,GAAG,UAAU,CAAC,YAAY,CAAC,cAAc,CAAC;QAC5D,CAAC;QAED,IAAG,OAAO,CAAC,iBAAiB,EAAC,CAAC;YAC1B,MAAM,gBAAgB,GAAG,OAAO,CAAC,iBAAiB,CAAC;YACnD,cAAc,GAAG,gBAAgB,CAAC,cAAc,CAAC;YACjD,OAAO,OAAO,CAAC,mBAAmB,CAAC,CAAC;QACxC,CAAC;QAED,MAAM,MAAM,GAAiC;YACzC,YAAY,EAAE,MAAM,GAAG,eAAe;YACtC,cAAc,EAAE,cAAc;YAC9B,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC;SACnC,CAAC;QAEF,GAAG,CAAC,KAAK,EAAE,CAAC,KAAK,CAAC,sBAAsB,CAAC,GAAG,KAAK,EAAE,CAAC,YAAY,CAAC,mBAAmB,cAAc,eAAe,eAAe,kBAAkB,CAAC,CAAC,CAAC;QACrJ,GAAG,CAAC,OAAO,CAAC,CAAC;QAEb,IAAI,CAAC;YACD,MAAM,QAAQ,GAAkC,MAAM,oBAAU,CAAC,SAAS,EAAE;iBACvE,MAAM,CAAC,MAAM,CAAC;iBACd,OAAO,EAAE,CAAC;YAEf,OAAO;gBACH,UAAU,EAAE,QAAQ,CAAC,UAAU;gBAC/B,QAAQ,EAAE,QAAQ;gBAClB,cAAc,EAAE,cAAc;aACjC,CAAC;QACN,CAAC;QAAC,OAAM,CAAc,EAAE,CAAC;YACrB,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;YACjB,MAAM,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;QACvB,CAAC;IACL,CAAC;IAED,WAAW,CAAC,SAAiB;QAEzB,MAAM,YAAY,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC;QAGnC,MAAM,SAAS,GAAG,cAAI,CAAC,OAAO,CAAC,SAAS,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;QAE3E,IAAI,WAAW,GAAG,GAAG,YAAY,aAAa,SAAS,OAAO,CAAC;QAE/D,IAAG,CAAC,YAAE,CAAC,UAAU,CAAC,WAAW,CAAC,EAAC,CAAC;YAC5B,MAAM,CAAC,KAAK,EAAE,CAAC,YAAY,CAAC,uBAAuB,WAAW,GAAG,CAAC,CAAC,CAAC;YACpE,MAAM,cAAc,GAAG,GAAG,SAAS,aAAa,SAAS,OAAO,CAAC;YAEjE,IAAG,CAAC,YAAE,CAAC,UAAU,CAAC,cAAc,CAAC,EAAC,CAAC;gBAC/B,MAAM,CAAC,KAAK,EAAE,CAAC,GAAG,CAAC,8BAA8B,cAAc,GAAG,CAAC,CAAC,CAAC;gBACrE,MAAM,IAAI,KAAK,CAAC,YAAY,CAAC,CAAC;YAClC,CAAC;iBAAI,CAAC;gBACF,MAAM,CAAC,KAAK,EAAE,CAAC,KAAK,CAAC,uBAAuB,WAAW,GAAG,CAAC,CAAC,CAAC;gBAE7D,WAAW,GAAG,cAAc,CAAC;YACjC,CAAC;QACL,CAAC;QAED,OAAO,WAAW,CAAC;IACvB,CAAC;IAED,KAAK,CAAC,wBAAwB,CAAC,kBAA0B,EAAE,SAAiB,EAAE,QAAiC,EAAE,UAAU,GAAG,KAAK;QAG/H,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,kBAAkB,CAAC,CAAC;QACpE,MAAM,SAAS,GAAI,UAAU,CAAC,aAAa,CAAC,WAAW,CAAC;QAExD,MAAM,oBAAU,CAAC,aAAa,EAAE,CAAC,cAAc,CAAC;YAC5C,SAAS,EAAE,SAAS;YACpB,UAAU,EAAE,QAAQ,CAAC,EAAE;YACvB,UAAU,EAAE,UAAU;YACtB,IAAI,EAAE,WAAW;YACjB,qBAAqB,EAAE,MAAM;YAC7B,GAAG,EAAE,sBAAsB,oBAAU,CAAC,SAAS,EAAE,qCAAqC,SAAS,cAAc;SAChH,CAAC,CAAC,OAAO,EAAE,CAAC;IACjB,CAAC;IAED,KAAK,CAAC,wBAAwB,CAAC,kBAA0B,EAAE,KAAa;QAGpE,MAAM,CAAC,wCAAwC,CAAC,CAAC;QACjD,MAAM,SAAS,GAAG,MAAM,2BAAiB,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,CAAC;QAC/E,MAAM,QAAQ,GAAG,MAAM,2BAAiB,CAAC,cAAc,CAAC,SAAS,EAAE,kBAAkB,CAAC,CAAC;QAEvF,MAAM,WAAW,GAAG,CAAC,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;QACrD,MAAM,UAAU,GAAG,EAAE,CAAC;QAEtB,MAAM,CAAC,0CAA0C,CAAC,CAAC;QAEnD,KAAK,MAAM,SAAS,IAAI,WAAW,EAAC,CAAC;YACjC,UAAU,CAAC,IAAI,CAAC,MAAM,2BAAiB,CAAC,YAAY,CAAC,SAAS,EAAE,QAAQ,EAAE,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;QACvG,CAAC;QAED,MAAM,CAAC,0CAA0C,KAAK,EAAE,CAAC,YAAY,CAAC,kBAAkB,CAAC,oBAAoB,CAAC,CAAC;QAE/G,KAAK,MAAM,YAAY,IAAI,UAAU,EAAC,CAAC;YACnC,MAAM,SAAS,GAA0B,UAAU,CAAC,YAAY,CAAC,CAAC;YAClE,MAAM,IAAI,CAAC,wBAAwB,CAAC,kBAAkB,EAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,CAAC,UAAU,CAAC,CAAC;QACvG,CAAC;QAED,MAAM,oBAAU,CAAC,aAAa,EAAE,CAAC,gBAAgB,CAAC;YAC9C,SAAS,EAAE,SAAS;YACpB,SAAS,EAAE,MAAM;SACpB,CAAC,CAAC,OAAO,EAAE,CAAC;QAEb,MAAM,CAAC,gBAAgB,KAAK,EAAE,CAAC,YAAY,CAAC,kBAAkB,GAAC,MAAM,CAAC,aAAa,CAAC,CAAC;IAEzF,CAAC;CACJ;AAGQ,sCAAa;AADtB,qBAAe,aAAa,CAAC,YAAY,EAAE,CAAC;;;;;;;;;;;;;;;;;;ACtd5C,oHAAoC;AACpC,8EAA4B;AAG5B,wEAAwB;AACxB,kEAAoB;AACpB,4IAAkD;AAClD,gIAA0C;AAE1C,MAAM,UAAW,SAAQ,kBAAU;IAC/B,KAAK,CAAC,gBAAgB,CAAC,QAAgB;QAInC,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACnC,MAAM,IAAI,GAAG,gBAAM,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;YACtC,MAAM,KAAK,GAAG,YAAE,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;YAE5C,KAAK,CAAC,EAAE,CAAC,UAAU,EAAE,GAAG,EAAE;gBACtB,MAAM,IAAI,GAAG,KAAK,CAAC,IAAI,EAAE,CAAC;gBAC1B,IAAI,IAAI,EAAE,CAAC;oBACP,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBACtB,CAAC;qBAAM,CAAC;oBACJ,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;gBAChC,CAAC;YACL,CAAC,CAAC,CAAC;YAEH,KAAK,CAAC,EAAE,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;QAC9B,CAAC,CAAC,CAAC;IACP,CAAC;IAED,KAAK,CAAC,iBAAiB,CAAC,SAAmB;QAEvC,MAAM,OAAO,GAAa,EAAE,CAAC;QAE7B,KAAK,MAAM,GAAG,IAAI,SAAS,EAAE,CAAC;YAC1B,MAAM,QAAQ,GAAW,SAAS,CAAC,GAAG,CAAC,CAAC;YACxC,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;YAClD,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACtB,CAAC;QAED,OAAO,OAAO,CAAC;IACnB,CAAC;IAED,KAAK,CAAC,mBAAmB,CAAC,qBAA6B,EAAE,UAAkB;QAEvE,MAAM,YAAY,GAAG,cAAI,CAAC,OAAO,CAAC,sBAAY,CAAC,qBAAqB,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,EAAE,cAAc,EAAE,MAAM,CAAC,CAAC;QAC7G,MAAM,aAAa,GAAW,YAAE,CAAC,YAAY,CAAC,qBAAqB,EAAE,OAAO,CAAC,CAAC;QAG9E,MAAM,QAAQ,GAAG,IAAI,CAAC,2BAA2B,CAAC,YAAY,CAAC,CAAC;QAChE,MAAM,gBAAgB,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,IAAI,CAAC,iBAAiB,CAAC,CAAC,UAAU,EAAE,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;QAEvG,IAAI,aAAa,KAAK,gBAAgB,EAAE,CAAC;YACrC,OAAO,IAAI,CAAC;QAChB,CAAC;QAED,OAAO,KAAK,CAAC;IACjB,CAAC;IAED,2BAA2B,CAAC,YAAoB;QAG5C,IAAI,CAAC,YAAE,CAAC,UAAU,CAAC,YAAY,CAAC,EAAE,CAAC;YAC/B,YAAE,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;QAC/B,CAAC;QAED,IAAI,CAAC,YAAE,CAAC,UAAU,CAAC,GAAG,YAAY,iBAAiB,CAAC,IAAI,CAAC,YAAE,CAAC,UAAU,CAAC,GAAG,YAAY,eAAe,CAAC,EAAE,CAAC;YACrG,OAAO,EAAE,CAAC;QACd,CAAC;QAED,MAAM,WAAW,GAAa,YAAE,CAAC,YAAY,CAAC,GAAG,YAAY,eAAe,EAAE,OAAO,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QACnG,IAAI,YAAY,GAA8B,EAAE,CAAC;QAEjD,WAAW,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;YAC5B,MAAM,QAAQ,GAAG,0BAAgB,CAAC,mBAAmB,CAAC,OAAO,EAAE;gBAC3D,gBAAgB;gBAChB,mBAAmB;aACtB,CAAC,CAAC;YAEH,QAAQ,CAAC,OAAO,CAAC,CAAC,OAAe,EAAE,EAAE;gBACjC,MAAM,aAAa,GAAa,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBACnD,MAAM,QAAQ,GAAW,aAAa,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;gBACjE,IAAG,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAC,CAAC;oBAC9C,YAAY,CAAC,QAAQ,CAAC,GAAG,OAAO,CAAC;gBACrC,CAAC;YACL,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;QAEH,OAAO,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC;IACrE,CAAC;IAED,GAAG,CAAC,KAAa;QAEb,OAAO,gBAAM,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IAChE,CAAC;CACJ;AAGO,gCAAU;AADlB,qBAAe,UAAU,CAAC,YAAY,EAAE,CAAC;;;;;;;;;;;;;;;;;;AClGzC,oHAAoC;AACpC,kFAAyC;AACzC,sIAA8C;AAE9C,oFAAgC;AAChC,8FAAkD;AAElD,MAAM,EAAE,KAAK,EAAE,GAAG,wBAAc,CAAC;AAmBjC,MAAM,cAAe,SAAQ,kBAAU;IAAvC;;QAaI,oBAAe,GAA8E,kBAAQ,CAAC,UAAU,CAAC;IAmBrH,CAAC;IA9BG,YAAY,CAAC,GAAW;QACpB,MAAM,OAAO,GAAG,kBAAkB,GAAG,qBAAqB,CAAC;QAC3D,OAAO,QAAQ,CAAC,4BAAQ,EAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,CAAC,IAAI,EAAE,EAAE,EAAE,CAAC,CAAC;IAC7D,CAAC;IAED,kBAAkB;QACd,MAAM,WAAW,GAAG,OAAO,CAAC,GAAG,CAAC;QAEhC,OAAO,CAAC,WAAW,EAAE,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC,CAAC;IACzD,CAAC;IAID,KAAK,CAAC,EAAU;QACZ,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,CAAC;IAC3D,CAAC;IAED,KAAK,CAAC,QAAQ,CAAC,MAAc;QACzB,MAAM,EAAE,GAAG,kBAAQ,CAAC,eAAe,CAAC;YAChC,KAAK,EAAE,OAAO,CAAC,KAAK;YACpB,MAAM,EAAE,OAAO,CAAC,MAAM;SACzB,CAAC,CAAC;QAEH,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;YAC3B,EAAE,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC,GAAG,CAAC,yBAAyB,GAAG,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,EAAE;gBACpE,OAAO,CAAC,MAAM,CAAC,CAAC;gBAChB,EAAE,CAAC,KAAK,EAAE,CAAC;YACf,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC;CACJ;AAIoC,wCAAc;AAFnD,qBAAe,cAAc,CAAC,YAAY,EAAE,CAAC;;;;;;;;;;;;;;;;;;AC5D7C,gEAA0B;AAE1B,oHAAoC;AAIpC,4IAA2C;AAC3C,wEAAwB;AACxB,gGAA2C;AAC3C,sIAA8C;AAa9C;;GAEG;AACH,MAAM,aAAc,SAAQ,kBAAU;IAClC;QACI,KAAK,EAAE,CAAC;IACZ,CAAC;IAED,MAAM,CAAC,kBAAkB,CAAC,YAAoB;QAC1C,QAAQ,YAAY,EAAC,CAAC;YACtB,KAAK,MAAM,CAAC,CAAC,OAAO,WAAW,CAAC;YAChC,OAAO,CAAC,CAAC,OAAO,kBAAkB,CAAC;QACnC,CAAC;IACL,CAAC;IAED,oBAAoB,CAAC,WAA8B;QAC/C,MAAM,eAAe,GAA4D,EAAE,CAAC;QAEpF,MAAM,YAAY,GAAa,OAAO,CAAC,eAAe,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,IAAY,EAAU,EAAE;YACvG,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QAC9B,CAAC,CAAC,CAAC;QAEH,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;YACvB,MAAM,WAAW,GAAa,CAAC,OAAO,CAAC,CAAC;YAExC,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE;gBAC7B,MAAM,WAAW,GAAG,GAAG,UAAU,IAAI,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC;gBAEnD,MAAM,IAAI,GAAG,OAAO,CAAC,WAAW,CAAC,WAAW,EAAE,WAAW,CAAC,SAAS,CAAC,CAAC;gBAErE,IAAI,IAAI,EAAE,CAAC;oBACP,eAAe,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,EAAC,cAAc,EAAE,UAAU,EAAE,QAAQ,EAAE,IAAI,EAAC,CAAC;gBAChF,CAAC;YACL,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;QAEH,OAAO,eAAe,CAAC;IAC3B,CAAC;IAED,KAAK,CAAC,YAAY,CAAC,GAAoB,EAAE,aAAoC,EAAE,cAA4B;QAEvG,MAAM,gBAAgB,GAAsB;YACxC,GAAG,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE;SACzC,CAAC;QAEF,cAAc,CAAC,OAAO,CAAC,CAAC,kBAA8B,EAAE,EAAE;YACtD,MAAM,kBAAkB,GAA4D,IAAI,CAAC,oBAAoB,CAAC,kBAAkB,CAAC,WAAgC,CAAC,CAAC;YAEnK,IAAG,kBAAkB,EAAC,CAAC;gBACnB,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,OAAO,CAAC,CAAC,GAAW,EAAE,EAAE;oBACpD,IAAG,kBAAkB,CAAC,GAAG,CAAC,CAAC,cAAc,KAAK,OAAO,EAAC,CAAC;wBACnD,OAAO;oBACX,CAAC;oBAED,IAAI,CAAC,mBAAmB,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,gBAAgB,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;gBACjG,CAAC,CAAC,CAAC;YACP,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,IAAI,MAAM,GAAiB,EAAE,CAAC;QAE9B,aAAa,CAAC,OAAO,CAAC,CAAC,IAAyB,EAAE,EAAE;YAChD,IAAI,QAAQ,IAAI,IAAI,IAAI,QAAQ,IAAI,IAAI,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC;gBACrE,4DAA4D;gBAC5D,MAAM,GAAG,CAAC,GAAG,MAAM,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,YAAwB,EAAc,EAAE;wBAC7E,MAAM,QAAQ,GAAe;4BACzB,IAAI,EAAE,IAAI,CAAC,MAAM,GAAG,YAAY,CAAC,IAAI;4BACrC,IAAI,EAAE,YAAY,CAAC,IAAI;yBAC1B,CAAC;wBAEF,OAAO,QAAQ,CAAC;oBACpB,CAAC,CAAC,CAAC,CAAC;YACR,CAAC;iBAAM,CAAC;gBACJ,mDAAmD;gBACnD,MAAM,CAAC,IAAI,CAAC,IAAkB,CAAC,CAAC;YACpC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,OAAO,CAAC,CAAC,KAAiB,EAAE,EAAE;YACjC,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,OAAO,CAAC,CAAC,OAAe,EAAE,EAAE;gBACtD,MAAM,OAAO,GAAG,gBAAgB,CAAC,OAAkC,CAAC,CAAC;gBAErE,IAAG,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,EAAC,CAAC;oBACrB,OAAO;gBACX,CAAC;gBAED,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;YAC1C,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;QAEH,OAAO,MAAM,CAAC;IAClB,CAAC;IAEO,gBAAgB,CAAC,OAAmB,EAAE,KAAiB;QAE3D,MAAM,CAAC,WAAW,EAAE,SAAS,EAAE,WAAW,CAAC,GAAG,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAElE,IAAG,CAAC,SAAS,EAAC,CAAC;YACX,OAAO;QACX,CAAC;QAED,SAAS,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,EAAE,GAAY,EAAE,GAAa,EAAE,EAAE;YACxD,IAAI,CAAC;gBAED,MAAM,sBAAsB,GAAG,MAAM,WAAW,CAAC;oBAC7C,GAAG,EAAE,GAAG;oBACR,KAAK,EAAE,GAAG,CAAC,KAAK;oBAChB,MAAM,EAAE,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,MAAM;oBACxC,IAAI,EAAE,GAAG,CAAC,IAAI;oBACd,GAAG,EAAE,GAAG;iBACX,CAAC,CAAC;gBAEH,GAAG,CAAC,SAAS,CAAC,cAAc,EAAE,aAAa,CAAC,kBAAkB,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC,CAAC;gBAE1F,IAAI,MAAM,GAAG,GAAG,CAAC;gBAEjB,IAAG,sBAAsB,YAAY,gBAAQ,EAAC,CAAC;oBAC3C,MAAM,GAAG,sBAAsB,CAAC,OAAO,EAAE,CAAC;gBAC9C,CAAC;gBAED,IAAI,CAAC,sBAAsB,CAAC,GAAG,EAAE,MAAM,EAAE,WAAW,EAAE,sBAAsB,CAAC,CAAC;gBAE9E,OAAO;YACX,CAAC;YAAA,OAAM,GAA2B,EAAC,CAAC;gBAChC,IAAI,MAAM,CAAC;gBACX,IAAI,KAAK,CAAC;gBAEV,IAAG,GAAG,CAAC,cAAc,EAAC,CAAC;oBACnB,GAAG,CAAC,cAAc,EAAE,CAAC;oBACrB,MAAM,GAAG,GAAG,CAAC,UAAU,EAAE,CAAC;oBAE1B,KAAK,GAAG,GAAG,CAAC,QAAQ,EAAE,CAAC;gBAC3B,CAAC;qBAAI,CAAC;oBACF,MAAM,GAAG,GAAG,CAAC,OAAO,CAAC;oBACrB,wBAAc,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;oBAC7B,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;oBACvB,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC;oBAClB,GAAG,CAAC,OAAO,GAAG,MAAM,CAAC;gBACzB,CAAC;gBAED,MAAM,IAAI,GAAG,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC;gBAE/C,IAAI,CAAC,sBAAsB,CAAC,GAAG,EAAE,IAAI,EAAE,WAAW,EAAE;oBAChD,OAAO,EAAE,KAAK;oBACd,IAAI,EAAE;wBACF,KAAK,EAAE;4BACH,IAAI,EAAE,IAAI;4BACV,OAAO,EAAE,MAAM;4BACf,KAAK;yBACR;qBACJ;iBACJ,CAAC,CAAC;YACP,CAAC;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAEO,sBAAsB,CAAC,GAAa,EAAE,MAAc,EAAE,WAA6B,EAAE,MAAW;QAEpG,IAAG,WAAW,CAAC,YAAY,KAAK,MAAM,IAAI,CAAC,WAAW,CAAC,YAAY,EAAC,CAAC;YACjE,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAChC,OAAO;QACX,CAAC;QAED,IAAG,WAAW,CAAC,YAAY,KAAK,MAAM,IAAI,8BAAS,GAAE,CAAC,GAAG,CAAC,SAAS,CAAC,EAAC,CAAC;YAClE,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,cAAI,CAAC,IAAI,CAAC,8BAAS,GAAE,CAAC,GAAG,CAAC,SAAS,CAAC,EAAG,MAAM,CAAC,aAAa,GAAG,OAAO,CAAC,CAAC,CAAC;YACpG,OAAO;QACX,CAAC;QAED,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,CAAC;IAC9B,CAAC;IAEO,mBAAmB,CACvB,kBAA8B,EAC9B,kBAA2E,EAC3E,gBAAmC,EAAE,GAAW,EAAE,GAAoB;QAEtE,MAAM,MAAM,GAAsB,kBAAiC,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;QACpF,MAAM,IAAI,GAAG,kBAAkB,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC;QAC9C,QAAO,IAAI,CAAC,MAAM,EAAE,CAAC;YACrB,KAAK,KAAK;gBACN,gBAAgB,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;gBACzG,MAAM;YAEV,KAAK,MAAM;gBACP,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,EAAE,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;gBAC3G,MAAM;YAEV,KAAK,KAAK;gBACN,gBAAgB,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;gBACzG,MAAM;YAEV,KAAK,QAAQ;gBACT,gBAAgB,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,EAAE,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;gBAC/G,MAAM;QACV,CAAC;IACL,CAAC;IAED,QAAQ,CAAC,SAAiB,EAAE,MAAoB;QAE5C,OAAO,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,MAAM,CAAC,KAAK,IAAI,CAAC;IACrD,CAAC;IAED,QAAQ,CAAC,SAAiB,EAAE,MAAoB;QAG5C,wDAAwD;QAExD,MAAM,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,IAAgB,EAAE,EAAE;YAChD,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC;QAC/D,CAAC,CAAC,CAAC;QAEH,OAAO,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC;IAC1C,CAAC;CACJ;AAIG,sCAAa;AAFjB,qBAAe,aAAa,CAAC,YAAY,EAAE,CAAC;;;;;;;;;;;;;;;;;;AC7O5C,oHAAoC;AACpC,0HAAsC;AACtC,sIAA8C;AAE9C,MAAM,EAAE,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,wBAAc,CAAC;AAE7C,MAAM,SAAU,SAAQ,kBAAU;IAC9B;QACI,KAAK,EAAE,CAAC;IACZ,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,MAAqC,EAAE,WAAoB,IAAI,EAAE,SAAiB,IAAI;QAG/F,IAAI,QAAQ,EAAE,CAAC;YACX,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,EAAE,MAAM,EAAE,MAAM,CAAC,MAAM,EAAE,GAAG,EAAE,MAAM,CAAC,GAAG,EAAE,EAAE,MAAM,CAAC,CAAC;YAC3F,IAAI,MAAM,EAAE,CAAC;gBAET,GAAG,CAAC,GAAG,KAAK,EAAE,CAAC,KAAK,CAAC,sBAAsB,CAAC,IAAI,KAAK,EAAE,CAAC,GAAG,CAAC,8BAA8B,CAAC,IAAI,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC;gBAC7G,MAAM,IAAI,CAAC,YAAY,CAAC,EAAE,MAAM,EAAE,MAAM,CAAC,MAAM,EAAE,GAAG,EAAE,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC;YACxE,CAAC;QACL,CAAC;aAAI,CAAC;YACF,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,EAAE,MAAM,EAAE,MAAM,CAAC,MAAM,EAAE,GAAG,EAAE,MAAM,CAAC,GAAG,EAAE,EAAE,MAAM,CAAC,CAAC;YAC3F,IAAI,MAAM,EAAE,CAAC;gBACT,OAAO,IAAI,CAAC;YAChB,CAAC;QACL,CAAC;QAED,OAAO,oBAAU,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,CAAC;IAC7D,CAAC;IAED,KAAK,CAAC,cAAc,CAAC,MAAqC,EAAE,SAAiB,IAAI;QAE7E,OAAO,oBAAU,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,CAAC;IAChE,CAAC;IAED,KAAK,CAAC,gBAAgB,CAAC,KAAa,EAAE,MAAc,EAAE,MAAe;QAEjE,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACnC,IAAI,CAAC,cAAc,CAAC;gBAChB,GAAG,EAAE,KAAK;gBACV,MAAM,EAAE,MAAM;aACjB,EAAE,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,cAA6C,EAAE,EAAE;gBAC9D,IAAI,cAAc,CAAC,IAAI,YAAY,MAAM,IAAI,cAAc,CAAC,IAAI,YAAY,UAAU,EAAE,CAAC;oBACrF,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;gBAC5C,CAAC;qBAAM,IAAI,OAAO,cAAc,CAAC,IAAI,KAAK,QAAQ,EAAE,CAAC;oBACjD,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;gBACjC,CAAC;qBAAM,CAAC;oBACR,uCAAuC;oBACnC,OAAO,CAAC,KAAK,CAAC,uBAAuB,CAAC,CAAC;oBACvC,MAAM,CAAC,uBAAuB,CAAC,CAAC;gBACpC,CAAC;YACL,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,MAAwC,EAAE,SAAiB,IAAI;QAExE,MAAM,IAAI,CAAC,YAAY,CAAC,EAAE,MAAM,EAAE,MAAM,CAAC,MAAM,EAAE,GAAG,EAAE,MAAM,CAAC,GAAG,EAAE,EAAE,MAAM,CAAC,CAAC;QAE5E,OAAO;IACX,CAAC;IAED,KAAK,CAAC,YAAY,CAAC,MAAsC,EAAE,SAAiB,IAAI;QAC5E,IAAI,CAAC;YACD,MAAM,oBAAU,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,CAAC;YAC5D,OAAO,IAAI,CAAC;QAChB,CAAC;QAAC,OAAO,KAAkB,EAAE,CAAC;YAC1B,IAAI,KAAK,CAAC,IAAI,KAAK,UAAU,EAAE,CAAC;gBAC5B,OAAO,KAAK,CAAC;YACjB,CAAC;YACD,MAAM,KAAK,CAAC;QAChB,CAAC;IACL,CAAC;IAED,KAAK,CAAC,YAAY,CAAC,MAAwC,EAAE,SAAiB,IAAI;QAC9E,MAAM,oBAAU,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,CAAC;IAClE,CAAC;IAED,KAAK,CAAC,YAAY,CAAC,UAAkB,EAAE,SAAiB,IAAI;QACxD,IAAI,CAAC;YACD,MAAM,oBAAU,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,UAAU,CAAC,EAAE,MAAM,EAAE,UAAU,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC;YAE5E,OAAO,UAAU,CAAC;QACtB,CAAC;QAAC,OAAO,GAAgB,EAAE,CAAC;YACxB,IAAI,GAAG,CAAC,IAAI,KAAK,UAAU,EAAE,CAAC;gBAC1B,oCAAoC;gBACpC,MAAM,MAAM,GAAG;oBACX,MAAM,EAAE,UAAU;iBACrB,CAAC;gBAEF,MAAM,oBAAU,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,CAAC;gBAC9D,GAAG,CAAC,GAAG,KAAK,EAAE,CAAC,KAAK,CAAC,sBAAsB,CAAC,cAAc,UAAU,WAAW,CAAC,CAAC;gBACjF,OAAO,UAAU,CAAC;YACtB,CAAC;iBAAM,CAAC;gBACJ,sBAAsB;gBACtB,KAAK,CAAC,yBAAyB,UAAU,GAAG,EAAE,GAAG,CAAC,CAAC;YACvD,CAAC;QACL,CAAC;IACL,CAAC;CACJ;AAIG,8BAAS;AAFb,qBAAe,SAAS,CAAC,YAAY,EAAE,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtGxC,sEAAyD;AACzD,2EAA0B;AAC1B,4IAAkD;AAClD,wEAAuC;AACvC,qEAA4C;AAE5C,0HAAyE;AACzE,kEAAoB;AACpB,iFAAoE;AACpE,mIAA4C;AAG5C,sIAA8C;AAC9C,gIAA0C;AAC1C,wEAAwB;AACxB,6FAAqC;AACrC,0HAA0C;AAE1C,6FAAsC;AAEtC,0HAAsC;AAGtC,2BAA2B;AAC3B,kHAA4C;AAc5C,MAAM,wBAAwB,GAAG,EAAE,CAAC;AACpC,MAAM,oBAAoB,GAAG,sBAAY,CAAC,oBAAoB,CAAC;AAE/D,MAAM,KAAK,GAAG,KAAK,EAAE,SAAgB,EAAE,IAAS,EAAE,WAAmB,IAAI,EAAE,UAAmB,KAAK,EAAiB,EAAE;IAClH,MAAM,KAAK,GAAG,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC;IAEpD,MAAM,QAAQ,GAAG,MAAM,CAAC,EAAE,CAAC;IAC3B,6CAA6C;IAE7C,MAAM,MAAM,GAAG,iBAAiB,CAAC;IAEjC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,wBAAc,CAAC,KAAK,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,wBAAc,CAAC,KAAK,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,GAAG,EAAC,GAAG,QAAQ,IAAI,MAAM,oBAAoB,CAAC,SAAS,CAAC,EAAE,EAAC,IAAI,QAAQ,CAAC,CAAC,CAAC,wBAAc,CAAC,KAAK,EAAE,CAAC,UAAU,CAAC,KAAK,QAAQ,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,EAAC,GAAG,IAAI,EAAE,CAAC,CAAC;AAChP,CAAC,CAAC;AAEF,MAAM,MAAM,GAAG,IAAI,GAAG,EAAE,CAAC;AAEzB,MAAM,oBAAoB,GAAc;IACpC,WAAW,EAAE,IAAI;IACjB,SAAS,EAAE,IAAI;IACf,OAAO,EAAE,IAAI;CAChB,CAAC;AAEF,MAAM,aAAc,SAAQ,kBAAU;IAUlC,YAAY,SAAoB,EAAE,UAAmB,EAAE,IAAe;QAClE,MAAM,OAAO,GAAY,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,MAAM,CAAC;QAEzD,MAAM,cAAc,GAAG;YACnB,MAAM,EAAE,OAAO;YACf,OAAO,EAAE,CAAC,KAAK,EAAE,MAAM,CAAC;SAC3B,CAAC;QAEF,MAAM,YAAY,GAAa,CAAC,cAAc,EAAE,cAAc,EAAC,QAAQ,EAAE,eAAe,EAAE,uBAAuB,CAAC,CAAC;QAEnH,KAAK,CAAC,SAAS,EAAE;YACb,IAAI,EAAE,cAAc;YACpB,UAAU,EAAE,CAAC,IAAI,CAAC,SAAS,IAAI,WAAW,CAAC;YAC3C,WAAW,EAAE,CAAC,GAAC,MAAM;SACxB,CAAC,CAAC;QAlBC,WAAM,GAAe,EAAE,CAAC;QACxB,UAAK,GAAa,EAAE,CAAC;QAsG7B,qBAAgB,GAAG,CAAC,YAAoB,EAAE,EAAE;YACxC,YAAY,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QAClC,CAAC,CAAC;QApFE,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,GAAG,GAAG,SAAS,CAAC;QACrB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QAEpB,MAAM,mBAAmB,GAAG;YACxB,6BAA6B,EAAE,OAAO,EAAE,oCAAoC;YAC5E,8BAA8B,EAAE,oBAAoB;YACpD,8BAA8B,EAAE,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC;YACvD,kCAAkC,EAAE,MAAM;SAC7C,CAAC;QAEF,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,SAAS,EAAE,CAAC,GAAY,EAAE,GAAa,EAAE,EAAE;YACnD,GAAG,CAAC,SAAS,CAAC,GAAG,EAAE,mBAAmB,CAAC,CAAC;YACxC,GAAG,CAAC,GAAG,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE;YAEnC,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC,OAAO,CAAC,CAAC,GAAW,EAAE,EAAE;gBACrD,GAAG,CAAC,SAAS,CAAC,GAAG,EAAG,mBAA2B,CAAC,GAAG,CAAC,CAAC,CAAC;YAC1D,CAAC,CAAC,CAAC;YAEH,IAAI,EAAE,CAAC;QACX,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,WAAW,GAAG;YACf,MAAM,EAAE,OAAO,EAAE,wDAAwD;YACzE,OAAO,EAAE,CAAC,KAAK,EAAE,MAAM,EAAE,SAAS,CAAC;YACnC,cAAc,EAAE,YAAY;SAC/B,CAAC;QAEF,MAAM,cAAc,GAAG,kBAAI,EAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAE9C,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE;YAC5B,MAAM,OAAO,GAAyB,MAAM,CAAC,OAAO,CAAC;YACrD,MAAM,QAAQ,GAAmB,IAAI,qBAAc,CAAC,OAAO,CAAC,CAAC;YAC7D,cAAc,CAAC,OAAO,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC;QAC5C,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,GAAG,EAAE,kBAAI,EAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,mDAAmD;IAC7G,CAAC;IAEM,MAAM,CAAC,KAAK,CAAC,aAAa,CAA6B,OAAkB,oBAAoB,EAAE,kBAAwC,IAAI;;QAE9I,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,oBAAoB,EAAE,IAAI,CAAC,CAAC;QACjD,MAAM,KAAK,GAAG,IAAI,CAAC,WAAW,KAAK,IAAI,IAAI,OAAO,IAAI,CAAC,WAAW,KAAK,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,oCAAgB,GAAE,CAAC,GAAG,CAAC,UAAU,CAAC,0CAAE,GAAG,CAAC;QAEhJ,IAAI,CAAC,EAAa,CAAC,WAAW,EAAE,CAAC;YAC7B,MAAM,CAAC,cAAc,EAAE,iBAAiB,CAAC,GAAG,MAAM,EAAa,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC;YAE3F,MAAM,aAAa,GAAG,IAAI,EAAa,CAAC,cAAc,EAAE,iBAAiB,EAAE,IAAI,CAAC,CAAC;YACjF,MAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,IAAI,8BAAgB,GAAE,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;YAElE,EAAa,CAAC,WAAW,GAAG,EAAE,QAAQ,EAAE,MAAM,aAAa,CAAC,mBAAmB,CAAa,eAAe,CAAC,EAAE,OAAO,EAAE,aAAa,CAAC,mBAAmB,CAAC,QAAQ,EAAE,GAAG,EAAE;oBACpK,wBAAc,CAAC,GAAG,CAAC,wBAAc,CAAC,KAAK,EAAE,CAAC,KAAK,CAAC,yBAAyB,GAAG,uBAAuB,QAAQ,cAAc,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC;gBAC3J,CAAC,CAAC,EAAC,CAAC;QACR,CAAC;QAED,IAAI,CAAC,EAAa,CAAC,SAAS,EAAE,CAAC;YAC3B,MAAM,CAAC,YAAY,EAAE,eAAe,CAAC,GAAG,MAAM,EAAa,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC;YAEvF,MAAM,WAAW,GAAG,IAAI,EAAa,CAAC,YAAY,EAAE,eAAe,EAAE,IAAI,CAAC,CAAC;YAC3E,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,IAAI,8BAAgB,GAAE,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;YAEjE,EAAa,CAAC,SAAS,GAAG,EAAE,QAAQ,EAAE,MAAM,WAAW,CAAC,iBAAiB,CAAa,eAAe,CAAC,EAAE,OAAO,EAAE,WAAW,CAAC,mBAAmB,CAAC,MAAM,EAAE,GAAG,EAAE;oBAC1J,wBAAc,CAAC,GAAG,CAAC,wBAAc,CAAC,KAAK,EAAE,CAAC,KAAK,CAAC,kBAAkB,GAAG,uBAAuB,MAAM,YAAY,KAAK,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC;gBACtJ,CAAC,CAAC,EAAC,CAAC;QACR,CAAC;QAED,MAAM,UAAU,GAAG,sBAAY,CAAC,qBAAqB,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC;QACrE,MAAM,MAAM,GAAG,GAAG,UAAU,oBAAoB,CAAC;QAEjD,IAAG,CAAC,YAAE,CAAC,UAAU,CAAC,MAAM,CAAC,EAAC,CAAC;YACvB,YAAE,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;QACzB,CAAC;QAED,OAAO;YACH,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,IAAI,EAAE,IAAI,CAAC,WAAW;SACzB,CAAC;IACN,CAAC;IAMD,WAAW,CAAC,QAAgB,EAAE,KAAa;QACvC,IAAG,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAC,CAAC;YAC7B,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QAChD,CAAC;aAAI,CAAC;YACF,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,KAAK,CAAC;QAClC,CAAC;IACL,CAAC;IAEM,SAAS;QAEZ,OAAO,IAAI,CAAC,GAAG,CAAC;IACpB,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,oBAAoB,CAAC,IAAe;;QAE7C,MAAM,GAAG,GAAG,qBAAa,GAAE,CAAC;QAC5B,MAAM,KAAK,GAAG,oCAAgB,GAAE,CAAC,GAAG,CAAC,UAAU,CAAC,0CAAE,GAAG,CAAC;QACtD,MAAM,OAAO,GAAkC,EAAE,CAAC;QAElD,IAAG,KAAK,EAAC,CAAC;YACN,MAAM,OAAO,GAAG,8BAAgB,GAAE,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;YACnD,MAAM,MAAM,GAAG,8BAAgB,GAAE,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;YAEjD,IAAI,CAAC,MAAM,IAAI,CAAC,OAAO,IAAI,CAAC,YAAE,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,YAAE,CAAC,UAAU,CAAC,MAAM,CAAC,EAAC,CAAC;gBAC1E,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAC;YAC5D,CAAC;YAED,OAAO,CAAC,GAAG,GAAG,YAAE,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;YACtC,OAAO,CAAC,IAAI,GAAG,YAAE,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;QAC5C,CAAC;QAED,MAAM,SAAS,GAAG,KAAK,CAAC,CAAC,CAAC,eAAK,CAAC,YAAY,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,cAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;QAEpF,OAAO,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;IAC5B,CAAC;IAED,mBAAmB,CAAC,IAAY,EAAE,WAAuB,GAAG,EAAE,GAAE,CAAC;QAE7D,OAAO,CAAC,KAAK,EAAE,WAAuB,GAAG,EAAE,GAAE,CAAC,EAAE,EAAE;YAC9C,IAAI,CAAC,SAAS,EAAE,CAAC,MAAM,CAAC,IAAI,EAAE,GAAG,EAAE;gBAC/B,QAAQ,EAAE,CAAC;gBACX,QAAQ,EAAE,CAAC;YACf,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAClB,CAAC;IAEM,KAAK,CAAC,mBAAmB,CAA6B,kBAAoD,IAAI;;QAEjH,IAAG,IAAI,CAAC,OAAO,CAAC,aAAa,EAAC,CAAC;YAC3B,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,KAAK,EAAE,GAAY,EAAE,GAAa,EAAE,IAAgB,EAAE,EAAE;gBACxE,MAAM,KAAK,GAAW,oBAAU,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;gBAC9C,IAAI,OAAO,GAAc,IAAI,CAAC;gBAC9B,IAAI,QAAQ,GAAW,IAAI,CAAC;gBAE5B,MAAM,OAAO,GAAG,CAAC,KAAa,EAAE,IAAe,EAAE,EAAE;oBAC/C,OAAO,GAAG,IAAI,CAAC;oBAEf,IAAG,eAAe,EAAC,CAAC;wBAChB,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,IAAI,eAAe,CAAC,OAAO,CAAC,CAAC;oBACrD,CAAC;yBAAI,CAAC;wBACF,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,OAAO,CAAC;oBAChC,CAAC;gBACL,CAAC,CAAC;gBAEF,MAAM,QAAQ,GAAG,CAAC,MAAc,EAAE,KAAa,EAAE,EAAE;oBAC/C,QAAQ,GAAG,KAAK,CAAC;oBAEjB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,QAAQ,CAAC;gBAClC,CAAC,CAAC;gBAEF,IAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,MAAM,GAAG,wBAAwB,EAAC,CAAC;oBAC1D,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;oBAChB,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;gBACrB,CAAC;gBAED,MAAM,UAAU,GAAmB,MAAM,qBAAW,CAAC,YAAY,CAAC,KAAK,EAAE,GAAG,CAAC,OAAO,CAAC,aAAa,EAAE;oBAChG,GAAG,yCAA2B;oBAC9B,GAAG,EAAE,OAAO;oBACZ,QAAQ;oBACR,OAAO,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,KAAK;oBACzB,GAAG,EAAE,CAAC,KAAa,EAAE,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC;oBACzC,YAAY,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,MAAM;oBAC/B,QAAQ,EAAE,CAAC,KAAa,EAAE,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;iBAClD,CAAC,CAAC;gBAEH,MAAM,UAAU,GAAW,GAAG,CAAC,OAAO,CAAC,aAAa,CAAC;gBAErD,IAAG,UAAU,KAAK,IAAI,IAAI,UAAU,KAAK,SAAS,EAAC,CAAC;oBAChD,wBAAc,CAAC,IAAI,CAAC,kBAAkB,EAAE,wBAAc,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,IAAI,KAAK,GAAG,CAAC,EAAE,yBAAyB,CAAC,CAAC;oBAC9G,GAAG,CAAC,SAAS,CAAC,GAAG,EAAE,8BAA8B,CAAC,CAAC;oBACnD,GAAG,CAAC,GAAG,EAAE,CAAC;oBAEV,OAAO;gBACX,CAAC;gBAED,IAAG,UAAU,KAAK,KAAK,EAAC,CAAC;oBACrB,wBAAc,CAAC,KAAK,CAAC,gBAAgB,EAAE,wBAAc,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,IAAI,KAAK,GAAG,CAAC,EAAE,wBAAwB,CAAC,CAAC;oBAC5G,GAAG,CAAC,SAAS,CAAC,GAAG,EAAE,oBAAoB,CAAC,CAAC;oBACzC,GAAG,CAAC,GAAG,EAAE,CAAC;oBAEV,OAAO;gBACX,CAAC;gBAED,IAAI,EAAE,CAAC;YACX,CAAC,CAAC,CAAC;YAGH,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,MAAM,EAAE,IAAI,EAAG,EAAE;gBAC7B,IAAG,IAAI,CAAC,OAAO,CAAC,WAAW,EAAC,CAAC;oBACzB,MAAM,IAAI,CAAC,OAAO,CAAC,WAAW,CAAa,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,CAAQ,EAAE,IAAI,CAAC,CAAC;gBACnF,CAAC;gBACD,IAAI,EAAE,CAAC;YACX,CAAC,CAAC,CAAC;QACP,CAAC;QAGD,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,gCAAU,GAAE,CAAC,CAAC;QAElC,6CAA6C;QAC7C,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,qBAAU,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC;QAEzD,IAAG,oCAAgB,GAAE,CAAC,GAAG,CAAC,UAAU,CAAC,0CAAE,eAAe,EAAC,CAAC;YACpD,IAAG,IAAI,CAAC,OAAO,CAAC,OAAO,EAAC,CAAC;gBACrB,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,iBAAa,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;YACpE,CAAC;YAED,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;YAE1C,MAAM,gBAAgB,GAAiB,MAAM,uBAAa,CAAC,YAAY,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;YAE/I,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE;gBACnC,IAAG,CAAC,uBAAa,CAAC,QAAQ,CAAC,GAAG,CAAC,WAAW,EAAE,gBAAgB,CAAC,EAAC,CAAC;oBAC3D,EAAa,CAAC,KAAK,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;gBAClC,CAAC;qBAAI,CAAC;oBACF,IAAI,EAAE,CAAC;gBACX,CAAC;YACL,CAAC,CAAC,CAAC;QACP,CAAC;QAED,IAAI,CAAC,GAAG,CAAC,qBAAW,CAAC,CAAC;QAGtB,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,KAAK,CAAC,iBAAiB,CAA6B,kBAAoD,IAAI;;QAE/G,IAAG,CAAC,qCAAgB,GAAE,CAAC,GAAG,CAAC,UAAU,CAAC,0CAAE,UAAU,GAAC,CAAC;YAChD,OAAO,CAAC,KAAK,CAAC,qDAAqD,CAAC,CAAC;YACrE,OAAO,IAAI,CAAC;QAChB,CAAC;QAED,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,YAAY,EAAE,KAAK,EAAE,MAAc,EAAE,EAAE;YACnD,MAAM,QAAQ,GAAW,MAAM,CAAC,EAAE,CAAC;YAEnC,KAAK,CAAC,IAAI,KAAK,EAAE,EAAE,4BAA4B,EAAE,QAAQ,CAAC,CAAC;YAE3D,MAAM,CAAC,EAAE,CAAC,YAAY,EAAG,KAAK,EAAE,MAAc,EAAE,EAAE;gBAC9C,KAAK,CAAC,IAAI,KAAK,EAAE,EAAE,8BAA8B,MAAM,EAAE,EAAE,QAAQ,CAAC,CAAC;gBAErE,IAAI,MAAM,KAAK,iBAAiB,EAAE,CAAC;oBAC/B,KAAK,CAAC,IAAI,KAAK,EAAE,EAAE,iBAAiB,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC;gBAC1D,CAAC;YACL,CAAC,CAAC,CAAC;YAEH,MAAM,CAAC,EAAE,CAAC,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,EAAE;gBAE/B,KAAK,CAAC,IAAI,KAAK,EAAE,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC;YAC9C,CAAC,CAAC,CAAC;YAGH,MAAM,CAAC,EAAE,CAAC,UAAU,EAAE,KAAK,IAAI,EAAE;gBAC7B,KAAK,CAAC,IAAI,KAAK,EAAE,EAAE,8CAA8C,EAAE,QAAQ,CAAC,CAAC;gBAC7E,MAAM,CAAC,IAAI,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;YACxC,CAAC,CAAC,CAAC;YAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC,SAAS,EAAE,EAAE;gBACrD,MAAM,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;gBAErD,IAAI,WAAW,CAAC,EAAa,CAAC,SAAS,CAAC,CAAC,gBAAgB,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;YACjF,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;QAEH,IAAG,IAAI,CAAC,OAAO,CAAC,aAAa,EAAC,CAAC;YAE3B,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,MAAM,EAAE,IAAI,EAAG,EAAE;gBAC7B,MAAM,OAAO,GAAyB,MAAM,CAAC,OAAO,CAAC;gBACrD,MAAM,QAAQ,GAAmB,IAAI,qBAAc,CAAC,OAAO,CAAC,CAAC;gBAE7D,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC;gBAEpE,MAAM,UAAU,GAAmB,MAAM,qBAAW,CAAC,YAAY,CAAC,MAAM,CAAC,EAAE,EAAE,KAAK,EAAE;oBAChF,OAAO,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,KAAK;oBACzB,GAAG,EAAE,CAAC,QAAgB,EAAE,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC;oBAC/C,GAAG,EAAE,CAAC,QAAgB,EAAE,IAAe,EAAE,EAAE;wBACvC,IAAG,eAAe,EAAC,CAAC;4BAChB,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,IAAI,eAAe,CAAC,IAAI,CAAC,CAAC;wBACrD,CAAC;6BAAI,CAAC;4BACF,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC;wBAChC,CAAC;oBAEL,CAAC;oBACD,YAAY,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,MAAM;oBAC/B,QAAQ,EAAE,CAAC,QAAgB,EAAE,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC;oBACrD,QAAQ,EAAE,CAAC,QAAgB,EAAE,KAAa,EAAE,EAAE;wBAC1C,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,KAAK,CAAC;oBAClC,CAAC;oBACD,gBAAgB,EAAE,GAAG,EAAE;wBACnB,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;oBAClC,CAAC;iBACJ,CAAC,CAAC;gBAEH,IAAG,UAAU,KAAK,KAAK,EAAC,CAAC;oBACrB,wBAAc,CAAC,KAAK,CAAC,gBAAgB,EAAE,wBAAc,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,IAAI,MAAM,CAAC,EAAE,GAAG,CAAC,EAAE,+BAA+B,CAAC,CAAC;oBACvH,QAAQ,CAAC,SAAS,CAAC,GAAG,EAAE,oBAAoB,CAAC,CAAC;oBAC9C,QAAQ,CAAC,GAAG,EAAE,CAAC;gBACnB,CAAC;qBAAK,IAAG,UAAU,KAAK,IAAI,EAAC,CAAC;oBAC1B,wBAAc,CAAC,IAAI,CAAC,kBAAkB,EAAE,wBAAc,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,IAAI,MAAM,CAAC,EAAE,GAAG,CAAC,EAAE,gCAAgC,CAAC,CAAC;oBACzH,QAAQ,CAAC,SAAS,CAAC,GAAG,EAAE,uBAAuB,CAAC,CAAC;oBACjD,QAAQ,CAAC,GAAG,EAAE,CAAC;gBACnB,CAAC;qBAAI,CAAC;oBACF,IAAI,EAAE,CAAC;gBACX,CAAC;YACL,CAAC,CAAC,CAAC;QACP,CAAC;QAED,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,MAAM,EAAE,IAAI,EAAG,EAAE;YAC7B,IAAG,IAAI,CAAC,OAAO,CAAC,WAAW,EAAC,CAAC;gBACzB,MAAM,IAAI,CAAC,OAAO,CAAC,WAAW,CAAa,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,CAAQ,EAAE,MAAM,CAAC,CAAC;YACrF,CAAC;YACD,IAAI,EAAE,CAAC;QACX,CAAC,CAAC,CAAC;QAEH,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,GAAY,EAAE,GAAa;QAEpC,MAAM,KAAK,GAAI,IAAI,kBAAQ,CAAC,IAAI,KAAK,CAAC,qDAAqD,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC;QAEvG,KAAK,CAAC,cAAc,EAAE,CAAC;QAEvB,IAAI,QAAQ,GAAG,KAAK,CAAC,UAAU,EAAE,CAAC;QAElC,IAAG,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,EAAC,CAAC;YAC7C,MAAM,YAAY,GAAG,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC;YAEtD,QAAQ,GAAG,YAAY,CAAC;QAC5B,CAAC;QAED,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACnC,CAAC;IAED,MAAM,CAAC,oBAAoB,CAAC,KAAe;QAEvC,OAAO,YAAE,CAAC,YAAY,CAAE,cAAI,CAAC,OAAO,CAAC,SAAS,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,CAAC,GAAG,aAAa,EAAE,OAAO,CAAC;aAC9F,OAAO,CAAC,kBAAkB,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC,QAAQ,EAAE,CAAC;aACvD,OAAO,CAAC,mBAAmB,EAAE,KAAK,CAAC,UAAU,EAAE,CAAC;aAChD,OAAO,CAAC,uBAAuB,EAAG,KAAK,CAAC,mBAAmB,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,6BAA6B,KAAK,CAAC,mBAAmB,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CACjJ;IACL,CAAC;IA2BM,UAAU;QAEb,OAAO,IAAI,CAAC,OAAO,CAAC;IACxB,CAAC;IAEM,cAAc;QAEjB,OAAO,IAAI,CAAC,WAAW,CAAC;IAC5B,CAAC;;;AAjCM,qBAAO,GAAG;IACb,UAAU,EAAE,KAAK,EAAC,OAA4B,EAAuB,EAAE;QAEnE,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;YAC3B,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,WAAmB,EAAE,EAAE;gBAC1D,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,GAAG,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBAE5C,OAAO;oBACH,CAAC,GAAG,CAAC,EAAE,KAAK;iBACf,CAAC;YACN,CAAC,CAAC,CAAC,CAAC;QACR,CAAC,CAAC,CAAC;IACP,CAAC;IACD,SAAS,EAAE,KAAK,EAAE,OAA4B,EAAE,GAAW,EAA0B,EAAE;QAEnF,MAAM,UAAU,GAAe,MAAM,EAAa,CAAC,OAAO,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QAE/E,IAAG,CAAC,UAAU,CAAC,GAAG,CAAC,EAAC,CAAC;YACjB,OAAO,IAAI,CAAC;QAChB,CAAC;QAED,OAAO,UAAU,CAAC,GAAG,CAAC,CAAC;IAC3B,CAAC;CACJ,CAAC;AAaN,qBAAe,aAAa,CAAC;;;;;;;;;;;;;;;;;;ACvd7B,oHAAoC;AAEpC,wEAAwB;AACxB,kEAAoB;AAGpB,MAAM,gBAAiB,SAAQ,kBAAU;IACrC,mBAAmB,CAAC,UAAkB,EAAE,kBAA4B,EAAE,EAAE,YAAqB,KAAK;QAE9F,MAAM,KAAK,GAAa,EAAE,CAAC;QAE3B,SAAS,iBAAiB,CAAC,WAAmB;YAE1C,MAAM,OAAO,GAAG,YAAE,CAAC,WAAW,CAAC,WAAW,EAAE,EAAE,aAAa,EAAE,IAAI,EAAE,CAAC,CAAC;YAErE,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;gBACpB,MAAM,SAAS,GAAG,cAAI,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC;gBAErD,IAAI,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC;oBACjB,IAAI,IAAI,GAAG,IAAI,CAAC;oBAEhB,eAAe,CAAC,OAAO,CAAC,CAAC,KAAa,EAAE,EAAE;wBACtC,IAAG,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,EAAC,CAAC;4BACtB,IAAI,GAAG,KAAK,CAAC;wBACjB,CAAC;oBACL,CAAC,CAAC;oBAEF,IAAG,IAAI,EAAC,CAAC;wBACL,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;oBAC1B,CAAC;gBACL,CAAC;qBAAM,IAAI,KAAK,CAAC,WAAW,EAAE,IAAI,SAAS,EAAE,CAAC;oBAC1C,iBAAiB,CAAC,SAAS,CAAC,CAAC;gBACjC,CAAC;YACL,CAAC,CAAC,CAAC;QACP,CAAC;QAED,iBAAiB,CAAC,UAAU,CAAC,CAAC;QAE9B,OAAO,KAAK,CAAC;IACjB,CAAC;CACJ;AAGO,4CAAgB;AADxB,qBAAe,gBAAgB,CAAC,YAAY,EAAE,CAAC;;;;;;;;;;;;;;;;;;AC1C/C,oHAAoC;AACpC,kEAAoB;AAEpB,8FAAiD;AAEjD,yEAA8D;AAE9D,MAAM,YAAa,SAAQ,kBAAU;IAArC;;QAEI,0BAAqB,GAAG,iBAAO,CAAC,qBAAqB,CAAC;IA0F1D,CAAC;IAxFG,mBAAmB;QAEf,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC;IACvC,CAAC;IAED,iBAAiB;QAGb,IAAG,IAAI,CAAC,UAAU,KAAK,IAAI,EAAC,CAAC;YACzB,OAAO,CAAC,CAAC;QACb,CAAC;QAED,MAAM,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAEhD,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QAEvB,OAAO,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,IAAI,GAAG,OAAO,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC;IAC5D,CAAC;IAED,cAAc,CAAI,GAAQ;QAEtB,OAAO,GAAG,CAAC,MAAM,CAAC,CAAC,UAAa,EAAE,EAAE,CAAC,UAAU,KAAK,EAAE,IAAI,OAAO,UAAU,KAAK,WAAW,IAAI,UAAU,KAAK,IAAI,CAAC,CAAC;IACxH,CAAC;IAED,WAAW,CAAI,IAAS;QACpB,OAAO,OAAO,IAAI,KAAK,UAAU,CAAC;IACtC,CAAC;IAED,SAAS,CAAC,QAAgB;QAEtB,MAAM,UAAU,GAAG,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC;QAC7D,MAAM,YAAY,GAAG,GAAG,UAAU,oBAAoB,CAAC;QAEvD,IAAG,CAAC,YAAE,CAAC,UAAU,CAAC,GAAG,YAAY,IAAI,QAAQ,EAAE,CAAC,EAAC,CAAC;YAC9C,OAAO;QACX,CAAC;QAED,IAAG,CAAC;YACA,OAAO,YAAE,CAAC,YAAY,CAAC,GAAG,YAAY,IAAI,QAAQ,EAAE,EAAE,OAAO,CAAC,CAAC;QACnE,CAAC;QAAC,OAAO,CAAM,EAAC,CAAC;YACb,OAAO,IAAI,CAAC;QAChB,CAAC;IACL,CAAC;IAED,SAAS,CAAC,QAAgB,EAAE,KAAa;QAErC,MAAM,UAAU,GAAG,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC;QAC7D,MAAM,YAAY,GAAG,GAAG,UAAU,oBAAoB,CAAC;QAEvD,IAAG,CAAC,YAAE,CAAC,UAAU,CAAC,YAAY,CAAC,EAAC,CAAC;YAC7B,YAAE,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;QAC/B,CAAC;QAED,YAAE,CAAC,aAAa,CAAC,GAAG,YAAY,IAAI,QAAQ,EAAE,EAAE,KAAK,CAAC,CAAC;IAC3D,CAAC;IAED,KAAK,CAAC,oBAAoB,CAAC,QAAe,IAAI;QAC1C,IAAG,CAAC,KAAK,EAAC,CAAC;YACP,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC;QACxB,CAAC;QACD,MAAM,KAAK,GAAG,KAAK,CAAC,KAAK,IAAI,EAAE,CAAC;QAChC,MAAM,UAAU,GAAG,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QACrC,MAAM,YAAY,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC;QAEnC,wCAAwC;QACxC,MAAM,KAAK,GAAG,YAAY,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC;QACtD,IAAI,CAAC,KAAK;YAAE,OAAO,CAAC,CAAC,CAAC;QACtB,MAAM,QAAQ,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;QAE1B,yEAAyE;QACzE,MAAM,aAAa,GAAG,GAAG,QAAQ,MAAM,CAAC;QAExC,sBAAsB;QACtB,MAAM,gBAAgB,GAAG,YAAE,CAAC,YAAY,CAAC,aAAa,EAAE,OAAO,CAAC,CAAC;QACjE,MAAM,SAAS,GAAiB,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;QAC7D,MAAM,QAAQ,GAAG,MAAM,IAAI,8BAAiB,CAAC,SAAS,CAAC,CAAC;QAExD,iCAAiC;QACjC,MAAM,SAAS,GAAG,YAAY,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;QACrD,IAAI,CAAC,SAAS;YAAE,OAAO,CAAC,CAAC,CAAC;QAE1B,MAAM,gBAAgB,GAAG,QAAQ,CAAC,mBAAmB,CAAC;YAClD,IAAI,EAAE,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;YAC5B,MAAM,EAAE,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;SACjC,CAAC,CAAC;QAEH,OAAO,gBAAgB,CAAC,IAAI,CAAC;IACjC,CAAC;CACJ;AAGO,oCAAY;AADpB,qBAAe,YAAY,CAAC,YAAY,EAAE,CAAC;;;;;;;;;;;;;;;;;;ACrG3C,0HAAsC;AACtC,sIAA8C;AAC9C,oHAAoC;AAEpC,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,wBAAc,CAAC;AAGpD,MAAM,UAAW,SAAQ,kBAAU;IAE/B,KAAK,CAAC,uBAAuB;QAEzB,IAAI,CAAC;YACD,MAAM,QAAQ,GAAG,MAAM,oBAAU,CAAC,MAAM,EAAE,CAAC,YAAY,CAAC,EAAE,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,WAAW,EAAE,MAAM,EAAE,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC;YAE1H,IAAI,QAAQ,CAAC,IAAI,IAAI,QAAQ,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;gBAC5C,OAAO,CAAC,MAAM,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;YAC1F,CAAC;iBAAM,CAAC;gBACJ,OAAO,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC;YACzC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACb,OAAO,CAAC,KAAK,CAAC,6BAA6B,EAAE,KAAK,CAAC,CAAC;QACxD,CAAC;IACL,CAAC;IAEO,KAAK,CAAC,iBAAiB,CAAC,KAAa;QACzC,MAAM,MAAM,GAAG;YACX,OAAO,EAAE,CAAC;oBACN,IAAI,EAAE,QAAQ;oBACd,MAAM,EAAE,CAAC,KAAK,CAAC;iBAClB,CAAC;SACL,CAAC;QAEF,MAAM,MAAM,GAAG,MAAM,oBAAU,CAAC,MAAM,EAAE,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,CAAC;QAE3E,IAAI,MAAM,CAAC,OAAO,IAAI,MAAM,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YAC9C,OAAO,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,QAAkB,CAAC,CAAC,CAAC,CAAC,CAAC;QACtE,CAAC;aAAM,CAAC;YACJ,OAAO,IAAI,CAAC;QAChB,CAAC;IACL,CAAC;IAED,KAAK,CAAC,kBAAkB;QAEpB,IAAI,CAAC;YACD,MAAM,MAAM,GAAG,MAAM,oBAAU,CAAC,MAAM,EAAE,CAAC,sBAAsB,EAAE,CAAC,OAAO,EAAE,CAAC;YAE5E,MAAM,cAAc,GAAG,MAAM,CAAC,cAAc,IAAI,EAAE,CAAC;YAEnD,MAAM,gBAAgB,GAAG,cAAc,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC;YAE9D,OAAO,gBAAgB,CAAC;QAC5B,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACb,OAAO,CAAC,KAAK,CAAC,iCAAiC,EAAE,KAAK,CAAC,CAAC;YACxD,OAAO,EAAE,CAAC;QACd,CAAC;IACL,CAAC;IAED,KAAK,CAAC,oBAAoB,CAAC,KAAa,EAAE,WAAmB,IAAI;;QAE7D,MAAM,OAAO,GAAG,CAAE;gBACd,IAAI,EAAE,QAAQ;gBACd,MAAM,EAAE,CAAC,KAAK,CAAC;aAClB,CAAC,CAAC;QAEH,IAAG,QAAQ,EAAC,CAAC;YACT,OAAO,CAAC,IAAI,CAAC;gBACT,IAAI,EAAE,uBAAuB;gBAC7B,MAAM,EAAE,CAAC,QAAQ,CAAC;aACrB,CAAC,CAAC;QACP,CAAC;QAED,MAAM,mBAAmB,GAAG,MAAM,oBAAU,CAAC,MAAM,EAAE,CAAC,mBAAmB,CAAC;YACtE,OAAO,EAAE,OAAO;SACnB,CAAC,CAAC,OAAO,EAAE,CAAC;QAEb,OAAO,yBAAmB,CAAC,WAAW,0CAAE,IAAI,CAAC,EAAE,CAAC,EAAE;YAC9C,gEAAgE;YAChE,OAAO,CAAC,EAAE,CAAC,YAAY,IAAI,EAAE,CAAC,YAAY,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QAC/E,CAAC,CAAC,CAAC;IACP,CAAC;IAED,KAAK,CAAC,2BAA2B,CAAC,KAAa;QAC3C,MAAM,YAAY,GAAG,aAAa,CAAC;QACnC,MAAM,WAAW,GAAG,iBAAiB,oBAAU,CAAC,SAAS,EAAE,KAAK,CAAC;QAEjE,yBAAyB;QACzB,MAAM,iBAAiB,GAAG,MAAM,oBAAU,CAAC,MAAM,EAAE,CAAC,oBAAoB,CAAC;YACrE,OAAO,EAAE;gBACL;oBACI,IAAI,EAAE,UAAU;oBAChB,MAAM,EAAE,CAAC,YAAY,CAAC;iBACzB;aACJ;SACJ,CAAC,CAAC,OAAO,EAAE,CAAC;QAEb,MAAM,iBAAiB,GAAG,MAAM,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC;QAEjE,uCAAuC;QACvC,MAAM,cAAc,GAAG,iBAAiB,CAAC,YAAY,IAAI,iBAAiB,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC;QAEnG,IAAI,CAAC,cAAc,EAAE,CAAC;YAClB,6BAA6B;YAE7B,MAAM,gBAAgB,GAAG,MAAM,oBAAU,CAAC,MAAM,EAAE,CAAC,iBAAiB,CAAC;gBACjE,KAAK,EAAE,KAAK;gBACZ,WAAW,EAAE,WAAW;gBACxB,eAAe,EAAE,SAAS;gBAC1B,aAAa,EAAE,CAAC,iBAAiB,CAAC,YAAY,CAAC,EAAE,gCAAgC;gBACjF,iBAAiB,EAAE;oBACf;wBACI,YAAY,EAAE,cAAc;wBAC5B,IAAI,EAAE;4BACF;gCACI,GAAG,EAAE,MAAM;gCACX,KAAK,EAAE,YAAY;6BACtB;yBACJ;qBACJ;iBACJ;aACJ,CAAC,CAAC,OAAO,EAAE,CAAC;YAGb,IAAI,gBAAgB,CAAC,WAAW,EAAE,CAAC;gBAC/B,GAAG,CAAC,iBAAiB,YAAY,sBAAsB,gBAAgB,CAAC,WAAW,CAAC,aAAa,EAAE,CAAC,CAAC;gBACrG,OAAO,gBAAgB,CAAC,WAAW,CAAC,aAAa,CAAC;YACtD,CAAC;iBAAM,CAAC;gBACJ,KAAK,CAAC,+BAA+B,CAAC,CAAC;gBACvC,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;YACrD,CAAC;QACL,CAAC;aAAM,CAAC;YACJ,GAAG,CAAC,iBAAiB,YAAY,mBAAmB,CAAC,CAAC;YACtD,OAAO,iBAAiB,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC;QAE3D,CAAC;IACL,CAAC;IAED,KAAK,CAAC,wBAAwB,CAAC,KAAa,EAAE,aAAqB;QAE/D,IAAI,CAAC;YACD,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC;YAE1D,MAAM,MAAM,GAAG,UAAU,CAAC,MAAM,IAAI,EAAE,CAAC;YACvC,MAAM,kBAAkB,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,KAAoB,EAAE,EAAE,CAAC,KAAK,CAAC,SAAS,KAAK,aAAa,CAAC,CAAC;YAEpG,IAAI,CAAC,kBAAkB,EAAE,CAAC;gBACtB,0DAA0D;gBAC1D,MAAM,sBAAsB,GAAI,CAAC,MAAM,oBAAU,CAAC,MAAM,EAAE,CAAC,oBAAoB,CAAC;oBAC5E,cAAc,EAAE,CAAC,aAAa,CAAC;iBAClC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,YAAY,CAAC;gBAE3B,MAAM,CAAC,6BAA6B,CAAC,CAAC;gBACtC,iCAAiC;gBACjC,MAAM,oBAAU,CAAC,MAAM,EAAE,CAAC,WAAW,CAAC;oBAClC,YAAY,EAAE,UAAU,CAAC,YAAY;oBACrC,oBAAoB,EAAE,WAAW;oBACjC,aAAa,EAAE,sBAAsB,CAAC,CAAC,CAAC,CAAC,aAAa;iBACzD,CAAC,CAAC,OAAO,EAAE,CAAC;gBAEb,GAAG,CAAC,+BAA+B,aAAa,mBAAmB,UAAU,CAAC,YAAY,EAAE,CAAC,CAAC;YAClG,CAAC;iBAAM,CAAC;gBACJ,GAAG,CAAC,yBAAyB,aAAa,kCAAkC,UAAU,CAAC,YAAY,EAAE,CAAC,CAAC;YAC3G,CAAC;QAEL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACb,OAAO,CAAC,KAAK,CAAC,uCAAuC,EAAE,KAAK,CAAC,CAAC;QAClE,CAAC;IACL,CAAC;IAED,KAAK,CAAC,qBAAqB,CAAC,KAAa;QACrC,MAAM,OAAO,GAAG,MAAM,oBAAU,CAAC,MAAM,EAAE,CAAC,eAAe,CAAC,EAAE,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC;QAExH,KAAK,MAAM,MAAM,IAAI,OAAO,CAAC,OAAO,IAAI,EAAE,EAAE,CAAC;YACzC,MAAM,WAAW,GAAG,MAAM,oBAAU,CAAC,MAAM,EAAE,CAAC,mBAAmB,CAAC;gBAC9D,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,uBAAuB,EAAE,MAAM,EAAE,CAAC,MAAM,CAAC,QAAS,CAAC,EAAE,CAAC;aAC3E,CAAC,CAAC,OAAO,EAAE,CAAC;YAEb,KAAK,MAAM,UAAU,IAAI,WAAW,CAAC,WAAW,IAAI,EAAE,EAAE,CAAC;gBACrD,KAAK,MAAM,KAAK,IAAI,UAAU,CAAC,MAAM,IAAI,EAAE,EAAE,CAAC;oBAC1C,IAAI,KAAK,CAAC,oBAAoB,KAAK,WAAW,IAAI,KAAK,CAAC,SAAS,IAAI,KAAK,CAAC,SAAS,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE,CAAC;wBACtG,OAAO,MAAM,CAAC;oBAClB,CAAC;gBACL,CAAC;YACL,CAAC;QACL,CAAC;QAED,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,gCAAgC,CAAC,KAAa;QAE1C,kEAAkE;QAClE,MAAM,YAAY,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,GAAG,KAAK,CAAC,CAAC;QAE7C,oEAAoE;QACpE,MAAM,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,YAAY,GAAG,GAAG,CAAC,CAAC;QAEhD,MAAM,cAAc,GAAG,SAAS,CAAC;QAEjC,OAAO,cAAc,CAAC;IAC1B,CAAC;IAED,KAAK,CAAC,kBAAkB,CAAC,KAAa,EAAE,QAAgB,EAAE,EAAC,kBAA0B,IAAI;;QACrF,MAAM,gBAAgB,GAAG,IAAI,CAAC,gCAAgC,CAAC,KAAK,CAAC,CAAC;QAEtE,MAAM,OAAO,GAAG,MAAM,oBAAU,CAAC,MAAM,EAAE,CAAC,YAAY,CAAC,EAAE,MAAM,EAAE,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC;QACtF,IAAI,CAAC,OAAO,CAAC,IAAI,IAAI,OAAO,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YAC7C,MAAM,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAC;QACtC,CAAC;QAED,MAAM,YAAY,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;QAE/C,2CAA2C;QAC3C,MAAM,OAAO,GAAG,MAAM,oBAAU,CAAC,MAAM,EAAE,CAAC,eAAe,CAAC,EAAE,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC;QACxH,MAAM,aAAa,GAAG,cAAO,CAAC,OAAO,0CAAE,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,EAAE,SAAS,EAAE,EAAE,WAAW,EAAE,MAAM,EAAE,CAAC,CAAC,KAAI,EAAE,CAAC;QAEpJ,MAAM,MAAM,GAAW,CAAC,eAAe,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QAExF,MAAM,aAAa,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;YACvD,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAC/B,OAAO,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;QAC/B,CAAC,CAAC,CAAC,CAAC;QAEJ,MAAM,KAAK,GAAG,KAAK,EAAE,QAAgB,EAAE,QAAgB,EAAE,EAAE,CAAC,MAAM,IAAI,CAAC,kBAAkB,CAAC,KAAK,EAAE,KAAK,EAAE,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,QAAQ,MAAM,QAAQ,EAAE,CAAC,CAAC;QAEhL,MAAM,cAAc,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC;QAEhE,IAAI,cAAc,GAAW,cAAc,GAAG,gBAAgB,CAAC;QAE/D,MAAM,YAAY,GAAG,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,cAAe,MAAM,KAAK,CAAC,QAAQ,EAAE,EAAE,CAAC;QAC3G,MAAM,CAAC,uCAAuC,KAAK,eAAe,YAAY,WAAW,CAAC,CAAC;QAE3F,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,YAAY,CAAC,EAAE,CAAC;YACxC,IAAI,CAAC;gBACD,MAAM,MAAM,GAAG,MAAM,oBAAU,CAAC,MAAM,EAAE,CAAC,YAAY,CAAC;oBAClD,KAAK,EAAE,KAAK;oBACZ,SAAS,EAAE,YAAY;iBAC1B,CAAC,CAAC,OAAO,EAAE,CAAC;gBAEb,MAAM,CAAC,0BAA0B,MAAM,CAAC,MAAM,CAAC,QAAQ,UAAU,KAAK,eAAe,YAAY,WAAW,CAAC,CAAC;gBAE9G,OAAO,MAAM,CAAC;YAClB,CAAC;YAAC,OAAO,GAAgB,EAAE,CAAC;gBACxB,kEAAkE;gBAClE,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;gBAEf,IAAI,CAAC,qBAAqB,EAAE,wBAAwB,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC;oBACvE,cAAc,IAAI,gBAAgB,CAAC;oBAEnC,KAAK,CAAC,iCAAiC,CAAC,CAAC;oBAEzC,OAAO,MAAM,KAAK,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC;gBAC9C,CAAC;qBAAM,CAAC;oBACJ,MAAM,GAAG,CAAC;gBACd,CAAC;YACL,CAAC;QACL,CAAC;aAAM,CAAC;YACJ,cAAc,IAAI,gBAAgB,CAAC;YAEnC,KAAK,CAAC,wCAAwC,CAAC,CAAC;YAChD,OAAO,MAAM,KAAK,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC;QAC9C,CAAC;IACL,CAAC;IAGD,KAAK,CAAC,0BAA0B,CAAC,YAAoB;QACjD,IAAI,CAAC;YACD,MAAM,CAAC,2BAA2B,YAAY,KAAK,CAAC,CAAC;YAErD,MAAM,oBAAU,CAAC,MAAM,EAAE,CAAC,OAAO,CAAC,qBAAqB,EAAE;gBACrD,aAAa,EAAE,CAAC,YAAY,CAAC;aAChC,CAAC,CAAC,OAAO,EAAE,CAAC;YACb,MAAM,CAAC,eAAe,YAAY,oBAAoB,CAAC,CAAC;QAC5D,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACX,KAAK,CAAC,iCAAiC,YAAY,uBAAuB,CAAC,CAAC;YAC5E,GAAG,CAAC,GAAG,CAAC,CAAC;YACT,MAAM,GAAG,CAAC;QACd,CAAC;IACL,CAAC;CACJ;AAGO,gCAAU;AADlB,qBAAe,UAAU,CAAC,YAAY,EAAE,CAAC;;;;;;;;;;;;;;;;;;ACxRzC,oHAAoC;AAIpC,+IAA4E;AAE5E,MAAM,kBAAmB,SAAQ,kBAAU;IAEvC,KAAK,CAAC,WAAW,CAAC,IAAmB,EAAE,UAA+B;QAElE,OAAO,MAAM,CAAC,IAAI,qBAAc,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;IAC/D,CAAC;CACJ;AAGO,gDAAkB;AAD1B,qBAAe,kBAAkB,CAAC,YAAY,EAAE,CAAC;;;;;;;;;;;;;;;;;;ACdjD,oHAAoC;AACpC,sIAA8C;AAE9C,wEAAwB;AACxB,kEAAoB;AAEpB,6EAAmE;AAAA,2FAAqC;AAExG,MAAM,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,wBAAc,CAAC;AAStC,MAAM,UAAW,SAAQ,kBAAU;IAE/B;QACI,KAAK,EAAE,CAAC;IACZ,CAAC;IAED,KAAK,CAAC,YAAY,CAAC,SAA0B,EAAE,QAAgB,EAAE,OAAe,EAAE,MAAkB;QAChG,MAAM,IAAI,GAAG,IAAI,UAAU,CAAC,YAAE,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,CAAC;QACvD,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;QAC9B,MAAM,MAAM,GAAG,IAAI,mBAAU,CAAC,IAAI,CAAC,CAAC;QACpC,MAAM,SAAS,CAAC,GAAG,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;IACzC,CAAC;IAED,KAAK,CAAC,iBAAiB,CAAC,SAA0B,EAAE,OAAe,EAAE,OAAe,EAAE,MAAkB;QACpG,MAAM,KAAK,GAAG,YAAE,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;QACtC,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE,CAAC;YACvB,MAAM,QAAQ,GAAG,cAAI,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;YAC1C,MAAM,IAAI,GAAG,YAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;YACnC,IAAI,IAAI,CAAC,WAAW,EAAE,IAAI,MAAM,CAAC,SAAS,EAAE,CAAC;gBACzC,MAAM,IAAI,CAAC,iBAAiB,CAAC,SAAS,EAAE,QAAQ,EAAE,GAAG,OAAO,IAAI,IAAI,EAAE,EAAE,MAAM,CAAC,CAAC;YACpF,CAAC;iBAAM,IAAI,IAAI,CAAC,MAAM,EAAE,EAAE,CAAC;gBACvB,MAAM,IAAI,CAAC,YAAY,CAAC,SAAS,EAAE,QAAQ,EAAE,GAAG,OAAO,IAAI,IAAI,EAAE,EAAE,MAAM,CAAC,CAAC;YAC/E,CAAC;QACL,CAAC;IACL,CAAC;IAED,KAAK,CAAC,aAAa,CAAC,UAAkB,EAAE,UAAkB,EAAE,SAAqB,EAAE,SAAS,EAAE,IAAI,EAAE;QAChG,MAAM,MAAM,GAAG,IAAI,mBAAU,EAAE,CAAC;QAChC,MAAM,SAAS,GAAG,IAAI,kBAAS,CAAC,MAAM,CAAC,CAAC;QAExC,IAAI,CAAC;YACD,MAAM,IAAI,CAAC,iBAAiB,CAAC,SAAS,EAAE,UAAU,EAAE,UAAU,EAAE,MAAM,CAAC,CAAC;YACxE,MAAM,SAAS,CAAC,KAAK,EAAE,CAAC;YAExB,+CAA+C;YAC/C,MAAM,IAAI,GAAG,MAAM,MAAM,CAAC,OAAO,EAAE,CAAC;YACpC,YAAE,CAAC,aAAa,CAAC,UAAU,EAAE,MAAM,CAAC,IAAI,CAAC,MAAM,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;YAEpE,GAAG,CAAC,GAAG,KAAK,EAAE,CAAC,KAAK,CAAC,sBAAsB,CAAC,oBAAoB,UAAU,EAAE,CAAC,CAAC;YAC9E,OAAO,UAAU,CAAC;QACtB,CAAC;QAAC,OAAO,CAAc,EAAE,CAAC;YACtB,MAAM,IAAI,iBAAQ,CAAC,qBAAqB,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC;QAC1D,CAAC;IACL,CAAC;IAED,oBAAoB,CAAC,aAAqB;QACtC,MAAM,KAAK,GAAG,YAAE,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC;QAE5C,MAAM,SAAS,GAAa,EAAE,CAAC;QAE/B,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YACjB,MAAM,QAAQ,GAAG,cAAI,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;YAChD,MAAM,KAAK,GAAG,YAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;YAEpC,IAAI,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC;gBACjB,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAC7B,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,OAAO,SAAS,CAAC;IACrB,CAAC;CACJ;AAGoB,gCAAU;AAD/B,qBAAe,UAAU,CAAC,YAAY,EAAE,CAAC;;;;;;;;;;;;;;AChFzC,MAA8B,UAAU;IAGpC;QAFA,gBAAW,GAAY,KAAK,CAAC;IAG7B,CAAC;IAIM,MAAM,CAAC,YAAY;QACtB,MAAM,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC;QAE5B,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE,CAAC;YACpC,UAAU,CAAC,UAAU,CAAC,SAAS,CAAC,GAAG,IAAI,IAAI,EAAE,CAAC;QAClD,CAAC;QAED,OAAO,UAAU,CAAC,UAAU,CAAC,SAAS,CAAoB,CAAC;IAC/D,CAAC;IAEM,aAAa;QAChB,OAAQ,IAAY,CAAC,WAAW,CAAC,WAAW,IAAI,IAAI,CAAC,WAAW,CAAC;IACrE,CAAC;IAEM,aAAa,CAAwD,GAAG,MAAa;QACxF,MAAM,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC;QAC5B,UAAU,CAAC,UAAU,CAAC,SAAS,CAAC,GAAG,IAAI,IAAI,CAAC,GAAG,MAAM,CAAC,CAAC;QACvD,OAAO,UAAU,CAAC,UAAU,CAAC,SAAS,CAAoB,CAAC;IAC/D,CAAC;;AApBgB,qBAAU,GAAyC,EAAE,CAAC;qBAN7C,UAAU;;;;;;;;;;;;;;AC0BxC,MAAe,SAAS;IAGpB,YAAY,MAAqB;QAC7B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACzB,CAAC;IAED,gBAAgB,CAAC,MAAyE,EAAE,SAAiB;QACzG,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC/C,CAAC;IACD,wBAAwB,CAAE,IAAS;QAC/B,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC/C,CAAC;IAED,OAAO,CAAC,KAAa;QAEjB,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IAE7B,CAAC;IAED,QAAQ,CAAC,KAAa;QAElB,OAAO,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;IACjC,CAAC;IAED,WAAW,CAAI,MAAc,EAAE,MAAc,EAAE,IAAQ;QAEnD,MAAM,OAAO,GAAwB,EAAE,OAAO,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;QAE3E,IAAG,IAAI,EAAC,CAAC;YACL,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC;QACxB,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;IAChD,CAAC;IAED,OAAO,CAAI,KAAa;QAEpB,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,GAAQ;IACvC,CAAC;IAED,UAAU,CAAC,MAAc,EAAE,MAAc,EAAE,KAAY;QAEnD,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC;YAC9B,KAAK,EAAE,KAAK;YACZ,OAAO,EAAE,KAAK;SACjB,CAAC,CAAC,CAAC;IACR,CAAC;CACJ;AAED,qBAAe,SAAS,CAAC;;;;;;;;;;;;;;AC1EzB,MAA8B,UAAU;IAIpC,YAAY,IAAe;QACvB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACrB,CAAC;CAGJ;AATD,gCASC;;;;;;;;;;;;;;;;;ACXD,2EAAkE;AAClE,2EAA0B;AAE1B,yJAA2D;AAE3D,qBAAe;IACX,cAAc,EAAE,CAAC,IAAyB,EAAiB,EAAE;QACzD,MAAM,aAAa,GAAG,eAAK,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC;YAC7C,OAAO,EAAE;gBACL,cAAc,EAAE,kBAAkB;gBAClC,QAAQ,EAAE,8BAAY,GAAE,CAAC,GAAG,CAAC,QAAQ,CAAC;aACzC;YACD,eAAe,EAAE,IAAI;YACrB,UAAU,EAAE,IAAI,eAAK,CAAC,KAAK,CAAC;gBACxB,kBAAkB,EAAE,KAAK,CAAC,0CAA0C;aACvE,CAAC;SACL,EAAE,IAAI,CAAC,CAAC,CAAC;QAEV,aAAa,CAAC,QAAQ,CAAC,OAAO,GAAG,KAAK,CAAC,CAAC,2CAA2C;QAEnF,aAAa,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE;YAC9C,OAAO,MAAM,CAAC;QAClB,CAAC,CAAC,CAAC;QAEH,OAAO,aAAa,CAAC;IACzB,CAAC;CACJ,CAAC;;;;;;;;;;;;;;;;;;AC1BF,uFAAwD;AAMxD,MAAM,UAAU;IAIZ,YAAY,GAAY,EAAE,MAAsB;QAC5C,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACzB,CAAC;IAED,KAAK,CAAC,UAAU;QAEZ,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC;QACtC,MAAM,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QAEjC,cAAc;QACd,MAAM,YAAY,GAAI,MAAM,IAAI,CAAC,OAAO,EAAE,CAAC;QAE3C,MAAM,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC;QAEvB,OAAO,YAAY,CAAC,MAAM,CAAC,CAAC,GAA+C,EAAE,MAA+B,EAAE,EAAE;YAC5G,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC;YAC1B,OAAO,GAAG,CAAC;QACf,CAAC,EAAE,EAAE,CAAC,CAAC;IACX,CAAC;IAED,KAAK,CAAC,eAAe;QAEjB,OAAO,MAAM,CAAC,OAAO,CAAC,MAAM,IAAI,CAAC,UAAU,EAAE,CAAC;aACzC,GAAG,CAAC,CAAC,CAAC,IAAI,EAAE,MAAM,CAAC,EAAE,EAAE,CAAC,GAAG,IAAI,IAAI,MAAM,CAAC,KAAK,EAAE,CAAC;aAClD,IAAI,CAAC,IAAI,CAAC,CAAC;IACpB,CAAC;CACJ;AAiBwB,gCAAU;AAfnC,KAAK,UAAU,MAAM,CAAC,MAAsB;IAExC,MAAM,OAAO,GAAG,MAAM,mBAAS,CAAC,MAAM,CAAC;QACnC,QAAQ,EAAE,KAAK;QACf,IAAI,EAAE,CAAC,cAAc,EAAE,0BAA0B,CAAC;QAClD,iBAAiB,EAAE,IAAI;KAC1B,CAAC,CAAC;IAEH,OAAO,IAAI,UAAU,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;AAC3C,CAAC;AAED,qBAAe;IACX,MAAM;CACT,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpDF,yJAAwE;AACxE,kEAAoB;AACpB,wEAAwB;AACxB,gJAA+E;AAC/E,2FAA8C;AAE9C,uEAAgC;AAChC,qEAAoC;AACpC,uFAAiC;AACjC,6FAAqC;AAIrC,8IAAgD;AAiNhB,mBAjNzB,oBAAQ,CAiNyB;AAhNxC,6IAAuD;AAIvD,cAAI,CAAC,GAAG,CAAC,mBAAQ,CAAC,CAAC;AACnB,cAAI,CAAC,GAAG,CAAC,qBAAU,CAAC,CAAC;AAcrB,MAAM,cAAc,GAAG,CAAC,MAAkB,IAAI,EAAa,EAAE;IACzD,8BAAS,EAAC,GAAG,CAAC,CAAC;IACf,OAAO;QACH,MAAM,EAAE,IAAI;QACZ,MAAM,EAAE,IAAI;QACZ,OAAO,EAAE,IAAI;QACb,OAAO,EAAE,IAAI;KAChB,CAAC;AACN,CAAC,CAAC;AAEF,MAAM,WAAW,GAAG,KAAK,EAAE,SAAiB,EAAE,aAAqB,UAAU,EAAE,sBAA8B,UAAU,EAAmB,EAAE;IACxI,MAAM,OAAO,GAAG;QACZ,aAAa,EAAE,SAAS,GAAG,SAAS;KACvC,CAAC;IAEF,IAAI,CAAC;QACD,OAAO,CAAC,GAAG,CAAC,4BAA4B,GAAG,GAAG,CAAC;QAG/C,MAAM,SAAS,GAAG,MAAM,8BAAS,GAAE,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QAErD,MAAM,MAAM,GAAW,yBAAE,EAAC,qBAAqB,SAAS,EAAE,EAAE;YACxD,YAAY,EAAE,OAAO;YACrB,kBAAkB,EAAE,KAAK;SAC5B,CAAC,CAAC;QAEH,MAAM,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,KAAK,EAAE,EAAE;YACzB,OAAO,CAAC,KAAK,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,EAAE,CAAC,eAAe,EAAE,CAAC,KAAK,EAAE,EAAE;YACjC,OAAO,CAAC,KAAK,CAAC,mBAAmB,EAAE,KAAK,CAAC,CAAC;QAC9C,CAAC,CAAC,CAAC;QAEH,OAAO,IAAI,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;YACxB,MAAM,CAAC,EAAE,CAAC,mBAAmB,EAAE,GAAG,EAAE;gBAChC,IAAI,CAAC,MAAM,CAAC,CAAC;YACjB,CAAC,CAAC,CAAC;YAEH,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAC5B,CAAC,CAAC,CAAC;IACP,CAAC;IAAC,OAAO,KAAU,EAAE,CAAC;QAClB,OAAO,CAAC,KAAK,CAAC,4BAA4B,EAAE,KAAK,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;QACxE,MAAM,KAAK,CAAC;IAChB,CAAC;AACL,CAAC,CAAC;AAKF,MAAM,kBAAkB,GAAG,CAAC,QAAmB,EAAE,SAA4B,EAAE,EAAE;IAC7E,YAAY,CAAC,QAAQ,EAAE;QACnB,MAAM,EAAE,KAAK,IAAI,EAAE;YACf,QAAQ,CAAC,MAAM,GAAG,MAAM,WAAW,EAAE,CAAC;YAEtC,IAAG,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,KAAK,EAAC,CAAC;gBACjB,OAAO,MAAM,SAAS,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;YAC3C,CAAC;YAED,OAAO;QACX,CAAC;QACD,UAAU,EAAE,KAAK,IAAI,EAAE;YACnB,IAAG,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,UAAU,EAAC,CAAC;gBACtB,OAAO,MAAM,SAAS,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;YAChD,CAAC;YAED,OAAO;QACX,CAAC;QACD,SAAS,EAAE,KAAK,IAAI,EAAE;YAClB,IAAI,QAAQ,CAAC,MAAM,IAAI,QAAQ,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC;gBAC/C,QAAQ,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC;YACjC,CAAC;YAED,OAAO;QACX,CAAC;QACD,KAAK,EAAE,KAAK,IAAI,EAAE;YACd,IAAG,QAAQ,CAAC,MAAM,EAAC,CAAC;gBAChB,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC;gBACtC,QAAQ,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC;YAC/C,CAAC;YAED,IAAG,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,KAAK,EAAC,CAAC;gBACjB,OAAO,MAAM,SAAS,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;YAC3C,CAAC;YAED,OAAO;QACX,CAAC;KACJ,EAAE;QACC,UAAU,EAAE,KAAK;KACpB,CAAC,CAAC;AACP,CAAC,CAAC;AAEF,MAAM,WAAW,GAAG,KAAK,IAA+B,EAAE;IACtD,MAAM,SAAS,GAAG,MAAM,8BAAS,GAAE,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;IACrD,MAAM,WAAW,GAAG,MAAM,8BAAS,GAAE,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;IAE1D,MAAM,MAAM,GAAG,MAAM,uBAAa,CAAC,aAAa,CAAM;QAClD,cAAc,EAAE,MAAM,8BAAS,GAAE,CAAC,GAAG,CAAC,iBAAiB,CAAC;QACxD,QAAQ,EAAE,MAAM,8BAAS,GAAE,CAAC,GAAG,CAAC,WAAW,CAAC;QAC5C,UAAU,EAAE,MAAM,8BAAS,GAAE,CAAC,GAAG,CAAC,aAAa,CAAC;QAChD,SAAS,EAAE,SAAS;QACpB,OAAO,EAAE,WAAW;KACvB,CAAC,CAAC;IAEH,OAAO,MAAM,CAAC;AAClB,CAAC,CAAC;AAEF,MAAM,YAAY,GAAG,CAAC,QAAmB,EAAE,SAA4B,EAAE,QAAmE,EAAQ,EAAE;IAClJ,KAAK,CAAC,MAAM,CAAC,KAAK;QACd,IAAG,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,MAAM,EAAC,CAAC;YACjB,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QAClC,CAAC;QAED,IAAG,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,MAAM,EAAC,CAAC;YAClB,MAAM,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QACrC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,KAAK,CAAC,UAAU,CAAC,KAAK;QAClB,IAAG,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,UAAU,EAAC,CAAC;YACrB,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;QACtC,CAAC;QAED,IAAG,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,UAAU,EAAC,CAAC;YACtB,MAAM,SAAS,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;QACzC,CAAC;QAED,OAAO;IACX,CAAC,CAAC,CAAC;IAEH,KAAK,CAAC,SAAS,CAAC,KAAK;QACjB,IAAG,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,SAAS,EAAC,CAAC;YACrB,MAAM,SAAS,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QACxC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,KAAK,CAAC,KAAK,CAAC,KAAK;QACb,IAAG,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,KAAK,EAAC,CAAC;YACjB,MAAM,SAAS,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QACpC,CAAC;IACL,CAAC,CAAC,CAAC;AACP,CAAC,CAAC;AAEF,MAAM,WAAW,GAAG,CAAC,OAAe,EAAE,OAAe,EAAE,SAAkB,KAAK,EAAQ,EAAE;IACpF,MAAM,SAAS,GAAG,cAAI,CAAC,OAAO,CAAC,sBAAY,CAAC,qBAAqB,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,EAAC,cAAc,EAAC,MAAM,CAAC,CAAC;IAExG,IAAG,SAAS,EAAC,CAAC;IAEd,CAAC;IAED,IAAG,MAAM,EAAC,CAAC;QACP,YAAE,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QACvB,YAAE,CAAC,YAAY,CAAC,GAAG,SAAS,oBAAoB,EAAE,OAAO,CAAC,CAAC;QAE3D,OAAO;IACX,CAAC;IAGD,YAAE,CAAC,YAAY,CAAC,OAAO,EAAE,GAAG,SAAS,oBAAoB,CAAC,CAAC;IAC3D,YAAE,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;IACvB,YAAE,CAAC,aAAa,CAAC,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;IAC5D,OAAO;AACX,CAAC;AAED,MAAM,SAAS,GAAG,CAAmB,GAAW,EAAK,EAAE;IACnD,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAM,CAAC;AAChC,CAAC;AAED,OAAO,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC;AAGhC,MAAM,CAAC,SAAiB,CAAC,MAAM,GAAG,SAAS,CAAC;AAE7C,qBAAe;IACX,SAAS;IACT,WAAW;IACX,WAAW;IACX,WAAW;IACX,cAAc;IACd,cAAc,EAAE,GAAG,EAAE,GAAG,OAAO,CAAC,GAAG,GAAG,GAAG,EAAE,GAAE,CAAC,CAAC,CAAC,CAAC;CACpD,CAAC;AAEF,MAAM,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE;IAChC,MAAM,EAAN,aAAM;IACN,YAAY;IACZ,kBAAkB;CACrB,CAAC,CAAC;AAGW,sBAAK;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9NnB,0IAAgD;AAS7B,sBATZ,qBAAW,CASY;AAR9B,gJAAoD;AAQpB,wBARzB,uBAAa,CAQyB;AAP7C,oIAA4E;AAOP,qBAP9D,oBAAU,CAO8D;AAAE,uFAP7D,kBAAK,QAO6D;AAJtF,8HAA4C;AAIG,qBAJxC,iBAAU,CAIwC;AAHzD,6IAA+C;AAGY,mBAHpD,oBAAQ,CAGoD;;;;;;;;;;;;;;ACPnE,MAA8B,QAAQ;IAElC;QACI,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;IAC9C,CAAC;IAED,MAAM,CAAC,OAAO,CAAC,QAAmB;QAC9B,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC/C,CAAC;CACJ;AATD,8BASC;;;;;;;;;;;;ACXD;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCzBA;;;;;WCAA;WACA;WACA;WACA;WACA;;;;;UEJA;UACA;UACA;UACA","sources":["webpack://warlock_root/./backend/rws/src/services/ sync","webpack://warlock_root/./backend/rws/exec/src/rws.ts","webpack://warlock_root/./backend/rws/src/commands/CMDListCommand.ts","webpack://warlock_root/./backend/rws/src/commands/ClearCommand.ts","webpack://warlock_root/./backend/rws/src/commands/HelpCommand.ts","webpack://warlock_root/./backend/rws/src/commands/InitCommand.ts","webpack://warlock_root/./backend/rws/src/commands/LambdaCommand.ts","webpack://warlock_root/./backend/rws/src/commands/ReloadDBSchemaCommand.ts","webpack://warlock_root/./backend/rws/src/commands/_command.ts","webpack://warlock_root/./backend/rws/src/commands/index.ts","webpack://warlock_root/./backend/rws/src/controllers/_controller.ts","webpack://warlock_root/./backend/rws/src/errors/Error403.ts","webpack://warlock_root/./backend/rws/src/errors/Error404.ts","webpack://warlock_root/./backend/rws/src/errors/Error500.ts","webpack://warlock_root/./backend/rws/src/errors/_error.ts","webpack://warlock_root/./backend/rws/src/errors/index.ts","webpack://warlock_root/./backend/rws/src/index.ts","webpack://warlock_root/./backend/rws/src/init.ts","webpack://warlock_root/./backend/rws/src/install.ts","webpack://warlock_root/./backend/rws/src/models/_model.ts","webpack://warlock_root/./backend/rws/src/models/annotations/InverseRelation.ts","webpack://warlock_root/./backend/rws/src/models/annotations/InverseTimeSeries.ts","webpack://warlock_root/./backend/rws/src/models/annotations/Relation.ts","webpack://warlock_root/./backend/rws/src/models/annotations/TrackType.ts","webpack://warlock_root/./backend/rws/src/models/annotations/index.ts","webpack://warlock_root/./backend/rws/src/models/convo/ConvoLoader.ts","webpack://warlock_root/./backend/rws/src/models/convo/VectorStore.ts","webpack://warlock_root/./backend/rws/src/models/prompts/_prompt.ts","webpack://warlock_root/./backend/rws/src/models/types/TimeSeriesModel.ts","webpack://warlock_root/./backend/rws/src/routing/annotations/Route.ts","webpack://warlock_root/./backend/rws/src/routing/annotations/index.ts","webpack://warlock_root/./backend/rws/src/services/APIGatewayService.ts","webpack://warlock_root/./backend/rws/src/services/AWSService.ts","webpack://warlock_root/./backend/rws/src/services/AppConfigService.ts","webpack://warlock_root/./backend/rws/src/services/AuthService.ts","webpack://warlock_root/./backend/rws/src/services/CloudWatchService.ts","webpack://warlock_root/./backend/rws/src/services/ConsoleService.ts","webpack://warlock_root/./backend/rws/src/services/DBService.ts","webpack://warlock_root/./backend/rws/src/services/EFSService.ts","webpack://warlock_root/./backend/rws/src/services/LambdaService.ts","webpack://warlock_root/./backend/rws/src/services/MD5Service.ts","webpack://warlock_root/./backend/rws/src/services/ProcessService.ts","webpack://warlock_root/./backend/rws/src/services/RouterService.ts","webpack://warlock_root/./backend/rws/src/services/S3Service.ts","webpack://warlock_root/./backend/rws/src/services/ServerService.ts","webpack://warlock_root/./backend/rws/src/services/TraversalService.ts","webpack://warlock_root/./backend/rws/src/services/UtilsService.ts","webpack://warlock_root/./backend/rws/src/services/VPCService.ts","webpack://warlock_root/./backend/rws/src/services/VectorStoreService.ts","webpack://warlock_root/./backend/rws/src/services/ZipService.ts","webpack://warlock_root/./backend/rws/src/services/_service.ts","webpack://warlock_root/./backend/rws/src/sockets/_socket.ts","webpack://warlock_root/./backend/rws/src/tests/actions/_action.ts","webpack://warlock_root/./backend/rws/src/tests/helpers/AxiosHelper.ts","webpack://warlock_root/./backend/rws/src/tests/helpers/BrowserHelper.ts","webpack://warlock_root/./backend/rws/src/tests/helpers/TestHelper.ts","webpack://warlock_root/./backend/rws/src/tests/index.ts","webpack://warlock_root/./backend/rws/src/tests/test_cases/_test_case.ts","webpack://warlock_root/external commonjs \"@langchain/community/vectorstores/faiss\"","webpack://warlock_root/external commonjs \"@prisma/client\"","webpack://warlock_root/external commonjs \"@rws-framework/console\"","webpack://warlock_root/external commonjs \"@zip.js/zip.js\"","webpack://warlock_root/external commonjs \"aws-sdk\"","webpack://warlock_root/external commonjs \"axios\"","webpack://warlock_root/external commonjs \"body-parser\"","webpack://warlock_root/external commonjs \"chai\"","webpack://warlock_root/external commonjs \"chai-like\"","webpack://warlock_root/external commonjs \"chai-things\"","webpack://warlock_root/external commonjs \"chalk\"","webpack://warlock_root/external commonjs \"child_process\"","webpack://warlock_root/external commonjs \"compression\"","webpack://warlock_root/external commonjs \"cors\"","webpack://warlock_root/external commonjs \"crypto\"","webpack://warlock_root/external commonjs \"express\"","webpack://warlock_root/external commonjs \"express-fileupload\"","webpack://warlock_root/external commonjs \"fs\"","webpack://warlock_root/external commonjs \"fs/promises\"","webpack://warlock_root/external commonjs \"http\"","webpack://warlock_root/external commonjs \"https\"","webpack://warlock_root/external commonjs \"jsonwebtoken\"","webpack://warlock_root/external commonjs \"langchain/chains\"","webpack://warlock_root/external commonjs \"langchain/document\"","webpack://warlock_root/external commonjs \"langchain/document_loaders/fs/text\"","webpack://warlock_root/external commonjs \"langchain/text_splitter\"","webpack://warlock_root/external commonjs \"mocha\"","webpack://warlock_root/external commonjs \"mongodb\"","webpack://warlock_root/external commonjs \"path\"","webpack://warlock_root/external commonjs \"pino\"","webpack://warlock_root/external commonjs \"pino-pretty\"","webpack://warlock_root/external commonjs \"puppeteer\"","webpack://warlock_root/external commonjs \"readline\"","webpack://warlock_root/external commonjs \"reflect-metadata\"","webpack://warlock_root/external commonjs \"socket.io\"","webpack://warlock_root/external commonjs \"socket.io-client\"","webpack://warlock_root/external commonjs \"source-map\"","webpack://warlock_root/external commonjs \"uuid\"","webpack://warlock_root/external commonjs \"xml2js\"","webpack://warlock_root/webpack/bootstrap","webpack://warlock_root/webpack/runtime/hasOwnProperty shorthand","webpack://warlock_root/webpack/runtime/node module decorator","webpack://warlock_root/webpack/before-startup","webpack://warlock_root/webpack/startup","webpack://warlock_root/webpack/after-startup"],"sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = () => ([]);\nwebpackEmptyContext.resolve = webpackEmptyContext;\nwebpackEmptyContext.id = \"./backend/rws/src/services sync recursive\";\nmodule.exports = webpackEmptyContext;","import { RWSAppCommands, getAppConfig, IAppConfig, RWSCommand, ICmdParams, ConsoleService, MD5Service, UtilsService } from '../../src/index';\n\nconst { error, color, rwsLog } = ConsoleService;\n\n\nconst fs = require('fs');\nconst path = require('path');\n// process.argv[2] will be the first command line argument after `rws`\nconst command = process.argv[2];\n// process.argv[3] will be the parameter args for commands\nconst cmdParamString = process.argv[3];\nconst cmdArgs = !!cmdParamString && cmdParamString.length > 2 ? cmdParamString.split(',') : [];\nconst commandExecutionArgs: ICmdParams = { _default: null, _extra_args: {} };\n\nif (cmdParamString && cmdParamString.indexOf('=') > -1) {\n    cmdArgs.forEach((arg) => {\n        const argData = arg.split('=');\n        commandExecutionArgs[argData[0].replace('--', '')] = argData[1];\n\n        if (!commandExecutionArgs._default) {\n            commandExecutionArgs._default = argData[1];\n        }\n    });\n} else if (!cmdParamString || !cmdArgs.length) {\n    commandExecutionArgs._default = null;\n} else {\n    commandExecutionArgs._default = cmdParamString;\n}\n\nif(process.argv.length > 4){\n    for(let i =  4; i <= process.argv.length-1;i++){\n        const parameter: string = process.argv[i].replace('--', '').replace('-', '_');\n        const valuePair: string[] = parameter.split('=');\n\n        commandExecutionArgs._extra_args[valuePair[0]] = valuePair.length > 1 ? valuePair[1] : true;\n    }\n}\n\nconst executionDir = process.cwd();\n\nconst packageRootDir = UtilsService.findRootWorkspacePath(executionDir);\nconst moduleCfgDir = `${packageRootDir}/node_modules/.rws`;\n\nfunction getConfig(configPath: string, cfgPathFile: string | null = null) \n{    \n    if(cfgPathFile === null){\n        cfgPathFile = configPath;\n\n        if(cfgPathFile){\n            const rwsConfigVar = UtilsService.getRWSVar(cfgPathFile);\n\n            if(rwsConfigVar){\n                configPath = rwsConfigVar;\n            }\n        }      \n    } else {\n        UtilsService.setRWSVar(cfgPathFile, configPath);\n    }                    \n\n    \n    const frameworkConfigFactory: () => IAppConfig = require( '@cwd/src/' + configPath).default;\n\n    return frameworkConfigFactory();\n}\n\n\nconst main = async () => {     \n    const cfgPathFile = '_cfg_path';\n    const execDir = path.resolve(path.dirname(module.id));\n    const tsFile = execDir + '/rws.ts';\n    let APP_CFG: IAppConfig | null = null;\n\n    if (command === 'init') {\n        const configPath: string = commandExecutionArgs.config || commandExecutionArgs._default  || 'config/config';       \n\n        const cfgData = getConfig(configPath, cfgPathFile);        \n\n        APP_CFG = cfgData;\n    }\n\n    let savedHash = null;\n    const consoleClientHashFile = `${moduleCfgDir}/_cli_hash`;\n\n    if (fs.existsSync(`${moduleCfgDir}/_cli_hash`)) {\n        savedHash = fs.readFileSync(consoleClientHashFile, 'utf-8');\n    }\n\n    if(!APP_CFG){\n        APP_CFG = getConfig('config/config', cfgPathFile);    \n                \n    }\n\n    if(!APP_CFG){\n        throw new Error(`No config for CLI. Try to initialize with \"yarn rws init config=path/to/config.ts\" (config path from ${process.cwd()}/src)`);\n    }    \n\n    const APP = getAppConfig(APP_CFG);\n\n    const commands: RWSCommand[] = [...RWSAppCommands, ...APP.get('commands')];    \n\n    APP_CFG.commands = commands;\n\n    const theCommand = commands.find((cmd: RWSCommand) => cmd.getName() == command);\n    \n    commandExecutionArgs._rws_config = APP_CFG;\n\n    const cmdFiles = MD5Service.batchGenerateCommandFileMD5(moduleCfgDir);    \n\n    const currentSumHashes = MD5Service.md5((await MD5Service.generateCliHashes([tsFile, ...cmdFiles])).join('/'));\n\n    if (!savedHash || currentSumHashes !== savedHash) {        \n        fs.writeFileSync(consoleClientHashFile, currentSumHashes);\n    }\n\n    if (theCommand) {        \n        await theCommand.execute(commandExecutionArgs);\n        return;\n    }\n\n    if (!fs.existsSync(`${moduleCfgDir}/${cfgPathFile}`)) {\n        throw new Error('No config path generated for CLI. Try to initialize with \"npx rws init config=path/to/config.ts\"');\n    }\n\n    error(`Unknown command: ${command}.`);\n\n    return;\n};\n\nmain().then(() => {\n    process.exit(0);\n});","import Command, { ICmdParams } from './_command';\nimport { setupRWS, setupPrisma } from '../install';\nimport ConsoleService from '../services/ConsoleService';\nimport UtilsService from '../services/UtilsService';\nimport path from 'path';\nimport fs from 'fs';\n\nconst { rwsLog, color, log } = ConsoleService;\n\nconst executionDir = process.cwd();\nconst packageRootDir = UtilsService.findRootWorkspacePath(executionDir);\nconst moduleDir = path.resolve(path.dirname(module.id), '..', '..');    \n\nclass CMDListCommand extends Command \n{\n    public static cmdDescription: string | null = 'List of available rws commands.';\n\n    constructor(){\n        super('help:cmd:list', module);\n    }\n\n    async execute(params?: ICmdParams): Promise<void>\n    {\n        rwsLog(color().green('RWS'), 'Commands list:');\n        const cfgData = params._rws_config;\n\n        cfgData.commands.forEach((cmd: Command) => {\n            const description: string | null = (cmd.constructor as any).cmdDescription;\n            log(`${color().yellow('rws ' + cmd.getName())}${description ? (color().blue(' ' + description)) : ''}`);\n        });\n    }\n\n    \n}\n\nexport default CMDListCommand.createCommand();\n","import Command, { ICmdParams } from './_command';\nimport ConsoleService from '../services/ConsoleService';\n\nimport { rmdir } from 'fs/promises';\nimport UtilsService from '../services/UtilsService';\nconst { color } = ConsoleService;\n\nconst executionDir = process.cwd();\n\nconst packageRootDir = UtilsService.findRootWorkspacePath(executionDir);\nconst moduleCfgDir = `${packageRootDir}/node_modules/.rws`;\n\nclass ClearCommand extends Command \n{\n    constructor(){\n        super('clear', module);\n    }\n\n    \n\n    async removeDirRecursively(path: string) {\n        try {\n            await rmdir(path, { recursive: true });\n            console.log(`Directory at ${path} removed successfully`);\n        } catch (error) {\n            console.error(`Error while removing directory: ${error}`);\n        }\n    }\n\n    async execute(params?: ICmdParams): Promise<void>\n    {\n        ConsoleService.log('clearing systems...');              \n    \n        await this.removeDirRecursively(moduleCfgDir);\n\n        ConsoleService.log(color().green('[RWS]') + ' systems cleared. Use npx rws init to reinitialize.');              \n    }\n\n    \n}\n\nexport default ClearCommand.createCommand();\n","import Command, { ICmdParams } from './_command';\nimport { setupRWS, setupPrisma } from '../install';\nimport ConsoleService from '../services/ConsoleService';\nimport UtilsService from '../services/UtilsService';\nimport path from 'path';\nimport fs from 'fs';\nimport CMDListCommand from './CMDListCommand';\n\nconst { rwsLog, color, log } = ConsoleService;\n\nconst executionDir = process.cwd();\nconst packageRootDir = UtilsService.findRootWorkspacePath(executionDir);\nconst moduleDir = path.resolve(path.dirname(module.id), '..', '..');    \n\nclass HelpCommand extends Command\n{\n    public static cmdDescription: string | null = 'List of available rws commands.';\n\n    constructor(){\n        super('help', module);\n    }\n\n    async execute(params?: ICmdParams): Promise<void>\n    {\n        rwsLog(color().green('RWS'), 'RWS CLI help manual\\n\\n');\n        \n        await CMDListCommand.execute(params);\n    }\n\n    \n}\n\nexport default HelpCommand.createCommand();\n","import Command, { ICmdParams } from './_command';\nimport { setupRWS, setupPrisma } from '../install';\nimport ConsoleService from '../services/ConsoleService';\nimport UtilsService from '../services/UtilsService';\nimport path from 'path';\nimport fs from 'fs';\n\nconst { rwsLog, color } = ConsoleService;\n\nconst executionDir = process.cwd();\nconst packageRootDir = UtilsService.findRootWorkspacePath(executionDir);\nconst moduleDir = path.resolve(path.dirname(module.id), '..', '..');    \n\nclass InitCommand extends Command \n{\n    public static cmdDescription: string | null = 'Command that builds RWS config files along with Prisma client.\\nThis CMD creates schema files for Prisma from RWS model files passed to configuration.\\nUsed in postinstall scripts.';\n\n    constructor(){\n        super('init', module);\n    }\n\n    async execute(params?: ICmdParams): Promise<void>\n    {\n        ConsoleService.log(color().green('[RWS]') + ' starting systems...');              \n    \n        const configPath: string = params.config || params._default || 'config/config'; \n        const generateProjectFiles = true;\n\n        if(!configPath){\n            ConsoleService.error('[RWS] No config path provided! Use \"npx rws init path/to/config/file (from ./src)\"');\n            return;\n        }\n\n        try{                     \n            const cfgData = params._rws_config;\n\n            try {                              \n                await setupRWS(cfgData);\n\n                await setupPrisma(cfgData);\n                \n                ConsoleService.log(color().green('[RWS]') + ' systems initialized.'); \n            } catch (error) {\n                ConsoleService.error('Error while initiating RWS server installation:', error);\n            }            \n        } catch(e: Error | any){    \n            ConsoleService.log(color().red('[RWS]') + ' wrong config file path...');         \n            throw new Error(e);            \n        }\n    }\n\n    \n}\n\nexport default InitCommand.createCommand();\n","\nimport Command, { ICmdParams } from './_command';\nimport ConsoleService from '../services/ConsoleService';\nimport AWSService from '../services/AWSService';\nimport fs from 'fs';\nimport path from 'path';\nimport UtilsService from '../services/UtilsService';\nimport EFSService from '../services/EFSService';\nimport LambdaService from '../services/LambdaService';\nimport VPCService from '../services/VPCService';\nimport CloudWatchService from '../services/CloudWatchService';\n\nconst { log, error, color, rwsLog } = ConsoleService;\n\nconst executionDir = process.cwd();\n\nconst packageRootDir = UtilsService.findRootWorkspacePath(executionDir);\nconst moduleCfgDir = `${packageRootDir}/node_modules/.rws`;\n\nconst moduleDir = path.resolve(path.dirname(module.id), '..', '..').replace('dist/', '');\n\ninterface ILambdaParams {\n    rwsConfig?: any\n    subnetId?: string\n}\n\ntype ILifeCycleMethod = (params: ILambdaParams) => Promise<void> | null;\n\ntype ILambdaLifeCycleEvents = {\n    preArchive?: ILifeCycleMethod;\n    postArchive?: ILifeCycleMethod;\n    preDeploy?: ILifeCycleMethod;\n    postDeploy?: ILifeCycleMethod;\n};\n\ninterface ILambdasLifeCycleConfig {\n    [key: string]: ILambdaLifeCycleEvents\n}\n\nconst lambdasCfg: ILambdasLifeCycleConfig = {\n    artillery: {\n        preArchive: async (): Promise<void> => {\n            const sourceArtilleryCfg = `${path.resolve(process.cwd())}/artillery-config.yml`;\n            const targetArtilleryCfg = `${moduleDir}/lambda-functions/artillery/artillery-config.yml`;\n\n            if (fs.existsSync(targetArtilleryCfg)) {\n                fs.unlinkSync(targetArtilleryCfg);\n            }\n\n            if (!fs.existsSync(sourceArtilleryCfg)) {\n                throw 'Create \"artillery-config.yml\" in your project root directory.';\n            }\n            \n            rwsLog('RWS Lambda CLI | artillery | preDeploy', ' copying artillery config.');\n\n            fs.copyFileSync(sourceArtilleryCfg, targetArtilleryCfg);\n        },\n        postDeploy: async (): Promise<void> => {        \n            const targetArtilleryCfg = `${moduleDir}/lambda-functions/artillery/artillery-config.yml`;\n\n            if (fs.existsSync(targetArtilleryCfg)) {\n                fs.unlinkSync(targetArtilleryCfg);\n                rwsLog('RWS Lambda CLI | artillery | postDeploy', 'artillery config cleaned up');\n            }            \n        }\n    }\n};\n\ntype ILambdaSubCommand = 'deploy' | 'delete' | string;\n\ninterface ILambdaParamsReturn {\n    lambdaCmd: ILambdaSubCommand\n    lambdaDirName: string\n    subnetId: string\n    vpcId: string\n    lambdaArg: string\n    extraParams: {\n        [key: string]: any\n    }\n}\n\nclass LambdaCommand extends Command \n{\n    constructor(){\n        super('lambda', module);\n    }\n\n    async execute(params?: ICmdParams): Promise<void>\n    {\n        AWSService._initApis();\n        \n        const { lambdaCmd, extraParams, subnetId, vpcId } = await this.getLambdaParameters(params);\n\n        const PermissionCheck = await AWSService.checkForRolePermissions(params._rws_config.aws_lambda_role, [\n            'lambda:CreateFunction',\n            'lambda:UpdateFunctionCode',\n            'lambda:UpdateFunctionConfiguration',\n            'lambda:InvokeFunction',\n            'lambda:ListFunctions',\n            \n            's3:GetObject',\n            's3:PutObject',\n\n            'elasticfilesystem:CreateFileSystem',\n            'elasticfilesystem:DeleteFileSystem',\n            'elasticfilesystem:DescribeFileSystems',\n\n            'elasticfilesystem:CreateAccessPoint',\n            'elasticfilesystem:DeleteAccessPoint',\n            'elasticfilesystem:DescribeAccessPoints',\n\n            'elasticfilesystem:CreateMountTarget',            \n            'elasticfilesystem:DeleteMountTarget',\n            'elasticfilesystem:DescribeMountTargets',\n\n            'ec2:CreateSecurityGroup',    \n            'ec2:DescribeSecurityGroups',\n            'ec2:DescribeSubnets',\n\n            'ec2:DescribeVpcs',   \n            \n            'ec2:CreateVpcEndpoint',\n            'ec2:DescribeVpcEndpoints',\n            'ec2:ModifyVpcEndpoint',\n            'ec2:DeleteVpcEndpoint',\n\n            'cloudwatch:PutMetricData',\n            'cloudwatch:GetMetricData'\n        ]);\n\n        if(!PermissionCheck.OK){\n            error('Lambda role has not enough permissions. Add following actions to your IAM role permissions policies:');\n            log(PermissionCheck.policies);\n            return;\n        }else{\n            rwsLog(color().green('AWS IAM Role is eligible for operations.'));\n        }\n\n        if(!!extraParams && !!extraParams.redeploy_loader){            \n            const zipPath = await LambdaService.archiveLambda(`${moduleDir}/lambda-functions/efs-loader`, moduleCfgDir, true);\n            await LambdaService.deployLambda('efs-loader', zipPath, vpcId, subnetId, true);\n        }\n        \n        switch(lambdaCmd){\n        case 'deploy':\n            await this.deploy(params);            \n            return;\n        case 'undeploy':\n            await this.undeploy(params);            \n            return;    \n        case 'invoke':\n            await this.invoke(params);            \n            return;\n        case 'delete':\n            await this.delete(params);\n            return;    \n        case 'list':\n            await this.list(params);\n            return;    \n        case 'open-to-web':\n            await this.openToWeb(params);\n            return;        \n        default:\n            error(`[RWS Lambda CLI] \"${lambdaCmd}\" command is not supported in RWS Lambda CLI`);\n            log(`Try: \"deploy:${lambdaCmd}\", \"delete:${lambdaCmd}\", invoke:${lambdaCmd} or \"list:${lambdaCmd}\"`);\n            return;    \n        }    \n    }   \n\n    public executeLambdaLifeCycle = async (lifeCycleEventName: keyof ILambdaLifeCycleEvents, lambdaDirName: keyof ILambdasLifeCycleConfig, params: ILambdaParams): Promise<void> => {\n        if (!lambdasCfg[lambdaDirName] || !lambdasCfg[lambdaDirName][lifeCycleEventName]) {\n            return;\n        }\n    \n        const theAction = lambdasCfg[lambdaDirName][lifeCycleEventName];\n    \n        if (theAction && UtilsService.isInterface<ILambdasLifeCycleConfig>(theAction)) {            \n            await theAction(params);\n        }\n    };\n\n    public async getLambdaParameters(params: ICmdParams): Promise<ILambdaParamsReturn>\n    {\n        const lambdaString: string = params.lambdaString || params._default;    \n        const [subnetId, vpcId] = params.subnetId || await VPCService.findDefaultSubnetForVPC();\n        const lambdaStringArr: string[] = lambdaString.split(':');        \n        const lambdaCmd: ILambdaSubCommand = lambdaStringArr[0];\n        const lambdaDirName = lambdaStringArr[1];    \n        const lambdaArg = lambdaStringArr.length > 2 ? lambdaStringArr[2] : null;    \n        const extraParams = params._extra_args.deploy_loader;\n\n        return {\n            lambdaCmd,\n            lambdaDirName,\n            subnetId,\n            vpcId,\n            lambdaArg,\n            extraParams\n        };\n    }\n    \n    public async invoke(params: ICmdParams)\n    {\n        const {lambdaDirName, lambdaArg} = await this.getLambdaParameters(params);\n\n        let payload = {};\n\n        if(lambdaArg){\n            const payloadPath = LambdaService.findPayload(lambdaArg); \n    \n            payload = JSON.parse(fs.readFileSync(payloadPath, 'utf-8'));\n        }\n    \n        const response = await LambdaService.invokeLambda(lambdaDirName, payload);\n\n        const logsTimeout = await CloudWatchService.printLogsForLambda(`RWS-${lambdaDirName}`);\n\n        rwsLog('RWS Lambda Service', color().yellowBright(`\"RWS-${lambdaDirName}\" lambda function response (Code: ${response.Response.StatusCode}):`));            \n\n        if(response.InvocationType === 'RequestResponse'){\n            log(response.Response.Payload);\n            clearTimeout(logsTimeout.core);\n        }\n    }\n\n    public async list(params: ICmdParams)\n    {\n        const listFunctionsParams: AWS.Lambda.ListFunctionsRequest = {\n            MaxItems: 100,\n        };\n        \n        const rwsLambdaFunctions: AWS.Lambda.FunctionConfiguration[] = [];\n\n        try {\n            const functionsResponse = await AWSService.getLambda().listFunctions(listFunctionsParams).promise();\n        \n            if (functionsResponse.Functions) {\n                for (const functionConfig of functionsResponse.Functions) {\n                    if (functionConfig.FunctionName && functionConfig.FunctionName.startsWith('RWS-')) {\n                        rwsLambdaFunctions.push(functionConfig);\n                    }\n                }\n            }\n        } catch (error) {\n            throw new Error(`Error listing Lambda functions: ${(error as AWS.AWSError).message}`);\n        }\n\n        rwsLog('RWS Lambda Service', color().yellowBright('RWS lambda functions list:'));    \n        rwsLog('RWS Lambda Service', color().yellowBright('ARN  |  NAME'));  \n\n        rwsLambdaFunctions.map((funct: AWS.Lambda.FunctionConfiguration) => funct.FunctionArn + '  |  ' +funct.FunctionName).forEach((msg) => {\n            log(msg);\n        });\n    }\n\n    public async deploy(params: ICmdParams)\n    {\n        const {lambdaDirName, vpcId, subnetId, lambdaArg} = await this.getLambdaParameters(params);            \n\n        if (lambdaDirName === 'modules') {        \n            const [efsId] = await EFSService.getOrCreateEFS('RWS_EFS', vpcId);\n            LambdaService.setRegion(params._rws_config.aws_lambda_region);\n            await LambdaService.deployModules(lambdaArg, efsId, vpcId,subnetId, true);        \n            return;\n        }        \n\n        const lambdaParams: ILambdaParams = {\n            rwsConfig: params._rws_config,\n            subnetId: subnetId\n        };\n\n        log(color().green('[RWS Lambda CLI]') + ' preparing artillery lambda function...');\n\n        await this.executeLambdaLifeCycle('preArchive', lambdaDirName, lambdaParams);\n\n        const zipPath = await LambdaService.archiveLambda(`${moduleDir}/lambda-functions/${lambdaDirName}`, moduleCfgDir, lambdaDirName === 'efs-loader');\n\n        await this.executeLambdaLifeCycle('postArchive', lambdaDirName, lambdaParams);\n\n        await this.executeLambdaLifeCycle('preDeploy', lambdaDirName, lambdaParams);\n\n        try {\n            await LambdaService.deployLambda(lambdaDirName, zipPath, vpcId, subnetId);                                           \n\n            await this.executeLambdaLifeCycle('postDeploy', lambdaDirName, lambdaParams);\n\n            let payload = {};\n\n            if(lambdaArg){                       \n                const payloadPath = LambdaService.findPayload(lambdaArg);             \n\n                payload = JSON.parse(fs.readFileSync(payloadPath, 'utf-8'));\n                \n                const response = await LambdaService.invokeLambda(lambdaDirName, payload);\n\n                rwsLog('RWS Lambda Deploy Invoke', color().yellowBright(`\"RWS-${lambdaDirName}\" lambda function response (Code: ${response.Response.StatusCode})`));    \n\n                if(response.Response.Payload.toString()){\n                    const responseData = JSON.parse(response.Response.Payload.toString());\n                    \n                    log(response.Response.Payload.toString());\n\n                    if(!responseData.success){\n                        error(responseData.errorMessage);\n                    }\n                }\n            }\n        } catch (e: Error | any) {\n            error(e.message);\n            log(e.stack);\n        }\n\n        log(color().green(`[RWS Lambda CLI] \"${moduleDir}/lambda-functions/${lambdaDirName}\" function directory\\nhas been deployed to \"RWS-${lambdaDirName}\" named AWS Lambda function.`));\n    }\n\n    public async undeploy(params: ICmdParams)\n    {\n        const {lambdaDirName, vpcId, subnetId, lambdaArg} = await this.getLambdaParameters(params);            \n\n        if (lambdaDirName === 'modules') {        \n            const [efsId] = await EFSService.getOrCreateEFS('RWS_EFS', vpcId);\n            LambdaService.setRegion(params._rws_config.aws_lambda_region);\n            await LambdaService.deployModules(lambdaArg, efsId, vpcId,subnetId, true);        \n            return;\n        }        \n\n    }\n\n    public async openToWeb(params: ICmdParams)\n    {\n        await this.getLambdaParameters(params);                  \n\n        // await APIGatewayService.associateNATGatewayWithLambda('RWS-' + lambdaDirName);        \n    }    \n\n    public async delete(params: ICmdParams)\n    {\n        const {lambdaDirName} = await this.getLambdaParameters(params);  \n                \n        if(!(await LambdaService.functionExists('RWS-' + lambdaDirName))){\n            error(`There is no lambda function named \"RWS-${lambdaDirName}\" in AWS region \"${AWSService.getRegion()}\"`);\n            return;\n        }    \n\n        await LambdaService.deleteLambda('RWS-' + lambdaDirName);\n        log(color().green(`[RWS Lambda CLI] \"RWS-${lambdaDirName}\" lambda function has been ${color().red('deleted')} from AWS region \"${AWSService.getRegion()}\"`));\n    }    \n}\n\nexport default LambdaCommand.createCommand();\nexport {ILambdaParams, ILambdaParamsReturn};","import Command, { ICmdParams } from './_command';\nimport { setupPrisma, isInstalled } from '../install';\nimport ConsoleService from '../services/ConsoleService';\nimport UtilsService from '../services/UtilsService';\nimport path from 'path';\nimport fs from 'fs';\n\nconst { color } = ConsoleService;\n\nconst executionDir = process.cwd();\n\nconst packageRootDir = UtilsService.findRootWorkspacePath(executionDir);\nconst moduleDir = path.resolve(path.dirname(module.id), '../..');\n\n\nclass ReloadDBSchemaCommand extends Command \n{\n    constructor(){\n        super('db:schema:reload', module);\n    }\n\n    async execute(params?: ICmdParams): Promise<void>\n    {\n        ConsoleService.log(color().green('[RWS]') + ' reloading Prisma DB schema...');                      \n\n        const cfgData = params._rws_config;\n\n        try {                                          \n            if(isInstalled.prisma()){\n                const endPrismaFilePath = packageRootDir + '/node_modules/.prisma/client/schema.prisma';\n                fs.unlinkSync(endPrismaFilePath);\n            }                \n\n            await setupPrisma(cfgData);             \n            \n            ConsoleService.log(color().green('[RWS]') + ' systems initialized.'); \n        } catch (error) {\n            ConsoleService.error('Error while initiating RWS server installation:', error);\n        }\n    }\n\n    \n}\n\nexport default ReloadDBSchemaCommand.createCommand();\n","import IAppConfig from '../interfaces/IAppConfig';\nimport path from 'path';\nimport fs from 'fs';\nimport UtilsService from '../services/UtilsService';\n\ninterface ICmdParams {\n    [key: string]: any\n    verbose?: boolean\n    _rws_config?: IAppConfig\n    _extra_args: {\n        [key: string]: any\n    }\n}\n\ninterface ICmdParamsReturn {\n    subCmd: string;\n    apiCmd: string;\n    apiArg: string;\n    extraParams: {\n        [key: string]: any\n    };\n}\n\nexport default abstract class TheCommand {\n    public name: string;\n\n    public static cmdDescription: string | null = null;\n\n    protected static _instances: { [key: string]: TheCommand } | null = {};\n\n\n    constructor(name: string, childModule: {id: string, loaded: boolean, exports: any, paths: any[], children: any[]}){\n        this.name = name;\n\n        const rootPackageDir = UtilsService.findRootWorkspacePath(process.cwd());\n        const moduleCfgDir = path.resolve(rootPackageDir, 'node_modules', '.rws');\n        const cmdDirFile = `${moduleCfgDir}/_cli_cmd_dir`;       \n        const cmdDirFileContents: string[] = fs.existsSync(cmdDirFile) ? fs.readFileSync(cmdDirFile, 'utf-8').split('\\n') : [];\n        const startLength = cmdDirFileContents.length;\n\n\n        if(!fs.existsSync(moduleCfgDir)){\n            fs.mkdirSync(moduleCfgDir);\n        }\n        \n        const filePath: string = childModule.id;\n        \n        const cmdDir = `${path.dirname(filePath)}`;        \n\n        let finalCmdDir = path.resolve(cmdDir);        \n\n        if(!cmdDirFileContents.includes(finalCmdDir)){\n            cmdDirFileContents.push(finalCmdDir);\n        }        \n        \n        if(startLength < cmdDirFileContents.length){\n            fs.writeFileSync(cmdDirFile, cmdDirFileContents.join('\\n'));\n        }\n    }\n\n    getSourceFilePath() {\n        const err = new Error();\n        if (err.stack) {\n            const match = err.stack.match(/at [^\\s]+ \\((.*):\\d+:\\d+\\)/);\n            if (match && match[1]) {\n                return match[1];\n            }\n        }\n        return '';\n    }\n\n    async execute(params: ICmdParams = null): Promise<void>\n    {\n        throw new Error('Implement method.');\n    }\n\n    getName(): string\n    {\n        return this.name;\n    }\n\n    public static createCommand<T extends new (...args: any[]) => TheCommand>(this: T): InstanceType<T> {\n        const className = this.name;        \n\n        if (!TheCommand._instances[className]) {\n            TheCommand._instances[className] = new this();\n        }\n\n        return TheCommand._instances[className] as InstanceType<T>;\n    }\n\n    getCommandParameters(params: ICmdParams): ICmdParamsReturn\n    {\n        const cmdString: string = params.cmdString || params._default;\n        const cmdStringArr: string[] = cmdString.split(':');        \n        const subCmd: string = cmdStringArr[0];\n        const apiCmd = cmdStringArr[1];    \n        const apiArg = cmdStringArr.length > 2 ? cmdStringArr[2] : null;    \n        const extraParams = params._extra_args.deploy_loader;\n\n        return {\n            subCmd,\n            apiCmd,\n            apiArg,\n            extraParams\n        };\n    }\n}\n\nexport {ICmdParams, ICmdParamsReturn};","import LambdaCommand from './LambdaCommand';\nimport InitCommand from './InitCommand';\nimport ClearCommand from './ClearCommand';\nimport ReloadDBSchemaCommand from './ReloadDBSchemaCommand';\nimport CMDListCommand from './CMDListCommand';\nimport HelpCommand from './HelpCommand';\n\nexport default [\n    InitCommand,    \n    LambdaCommand,\n    ClearCommand,\n    ReloadDBSchemaCommand,\n    CMDListCommand,\n    HelpCommand\n];","import { Response, Request } from 'express';\nimport RWSService from '../services/_service';\n\n\nimport Error404 from '../errors/Error404';\nimport Error500 from '../errors/Error500';\n\ntype IHTTProuteMethod  = (params: IRequestParams) => any;\ninterface IRequestParams{\n    query: {\n        [key: string]: any\n    },\n    data: {\n        [key: string]: any\n    },\n    params: {\n        [key: string]: any\n    },\n    res: Response,\n    req: Request\n}\n\nexport {IRequestParams, IHTTProuteMethod};\n\n/**\n * @category Core extendable objects\n */\nexport default class Controller extends RWSService {\n    private _hasError: boolean;\n\n    constructor() {\n        super();        \n    }\n\n    callMethod(methodName: string): (params: IRequestParams) => any\n    {\n        return (params: IRequestParams) => {                            \n            if((!(this as any)[methodName])){\n                const error = new Error404(new Error('The method does not exist in controller.'), `${__filename}::${methodName}`);\n\n                return error;\n            }\n\n            try {              \n                return (this as any)[methodName](params);\n            }catch(e: Error | unknown){\n                const error = new Error500(e, `${__filename}::${methodName}`, params);\n                return error;\n            }\n        };\n    }\n\n    hasError(){\n        const hasError: boolean = this._hasError;\n        this._hasError = false;\n        return hasError;\n    }\n\n    flagError(){\n        this._hasError = true;\n    }\n}","import RWSError from './_error';\n\nexport default class Error404 extends RWSError{\n    name = '403 not authorized.';\n\n    constructor(baseError: Error | unknown, resourcePath: string, params: any | null = null){\n        super(403, baseError, params);\n\n        this.message = `RWS resource \"$${resourcePath}\" was not autorized for current user.`;\n    }\n}","import RWSError from './_error';\n\nexport default class Error404 extends RWSError{\n    name = '404 Resource not found';\n\n    constructor(baseError: Error | unknown, resourcePath: string, params: any = null){\n        super(404, baseError, params);\n\n        this.message = `Resource \"${resourcePath}\" was not found`;\n    }\n}","import RWSError from './_error';\n\nexport default class Error500 extends RWSError {\n    name = '500 internal server error';\n\n    constructor(baseError: Error | unknown, resourcePath?: string, params: any = null){\n        super(500, baseError, params);\n\n        if(!resourcePath){\n            resourcePath = __filename;\n        }\n\n        this.message = `RWS resource \"$${resourcePath}\" has internal error`;\n    }\n}","export default class RWSError{\n    protected baseError: Error | any;\n    protected name: string;\n    protected message: string;\n    protected code: number;\n    protected stack?: string = null;\n\n    constructor(code: number, baseError: Error | any = null, params: any = null){        \n        if(!baseError){\n            baseError = new Error('Error code ' + code);\n        }\n\n        this.code = code;\n        if(typeof baseError === 'string'){            \n            this.baseError = new Error(baseError as string);            \n        }else {\n            this.baseError = baseError;\n        }        \n\n        if(this.baseError.stack){\n            this.stack = baseError.stack;\n        }\n    }\n\n    printFullError(): void\n    {\n        console.error('[RWS Error]');\n        console.log(`[${this.name}] ${this.message}`);\n        console.log('Stack:', this.stack);\n        console.error('[/RWS Error]');\n    }\n\n    getMessage(): string\n    {\n        return this.message;\n    }\n\n    getCode(): number\n    {\n        return this.code;\n    }  \n    \n    getStackTraceString(): string\n    {\n        return this.stack;\n    }\n}","import Error404 from './Error404';\nimport Error403 from './Error403';\nimport Error500 from './Error500';\nimport RWSError from './_error';\n\nexport {\n    Error403, Error404, Error500, RWSError\n};","import { Socket } from 'socket.io';\n\nimport { RWSHTTPRoutingEntry, IPrefixedHTTProutes, IHTTProute, WsRoutes, ITheSocket } from './services/ServerService';\n\nimport init from './init';\nimport {setupPrisma, setupRWS} from './install';\n\nimport ITimeSeries from './models/interfaces/ITimeSeries';\nimport TimeSeriesModel from './models/types/TimeSeriesModel';\n\nimport ServerService, { ServerControlSet, RWSServerPair, RWSServerStarter } from './services/ServerService';\nimport DBService, { DBService as DBServiceInstance } from './services/DBService';\nimport AuthService, { AuthService as AuthServiceInstance } from './services/AuthService';\nimport S3Service, {S3Service as S3ServiceInstance} from './services/S3Service';\nimport ConsoleService, { ConsoleService as ConsoleServiceInstance } from './services/ConsoleService';\nimport ProcessService, {ProcessService as ProcessServiceInstance} from './services/ProcessService';\n\nimport LambdaService, { LambdaService as LambdaServiceInstance } from './services/LambdaService';\nimport AWSService, { AWSService as AWSServiceInstance } from './services/AWSService';\nimport EFSService, { EFSService as EFSServiceInstance } from './services/EFSService';\nimport MD5Service, { MD5Service as MD5ServiceInstance } from './services/MD5Service';\nimport TraversalService, { TraversalService as TraversalServiceInstance } from './services/TraversalService';\nimport UtilsService, { UtilsService as UtilsServiceInstance }  from './services/UtilsService';\nimport VectorStoreService, { VectorStoreService as VectorStoreServiceInstance } from './services/VectorStoreService';\n\n\nimport RWSPrompt, { ILLMChunk, IRWSPromptRequestExecutor, IRWSSinglePromptRequestExecutor, IRWSPromptStreamExecutor, IChainCallOutput, IRWSPromptJSON, ChainStreamType } from './models/prompts/_prompt';\nimport RWSConvo, { IConvoDebugXMLData, IEmbeddingsHandler, ISplitterParams } from './models/convo/ConvoLoader';\nimport RWSVectorStore from './models/convo/VectorStore';\n\nimport { InverseRelation, InverseTimeSeries, Relation, TrackType} from './models/annotations/index';\nimport { Route } from './routing/annotations/index';\n\nimport getAppConfig, { IAppConfig, AppConfigService } from './services/AppConfigService';\n\nimport { IContextToken } from './interfaces/IContextToken';\nimport IAuthUser from './interfaces/IAuthUser';\nimport IDbUser from './interfaces/IDbUser';\n\nconst RWSannotations = {\n    modelAnnotations: { InverseRelation, InverseTimeSeries, Relation, TrackType },\n    routingAnnotations: { Route }\n};\n\nimport TheCommand, {ICmdParams} from './commands/_command';\nimport Model, { IModel, TrackType as RWSTrackType } from './models/_model';\nimport Controller, { IRequestParams} from './controllers/_controller';\n\nimport TheService from './services/_service';\nimport TheSocket, { JSONMessage, BaseWsResponse, ErrorWsResponse } from './sockets/_socket';\n\nimport RWSAppCommands from './commands/index';\nimport * as RWSTestSuite from './tests/index';\n\nimport * as RWSErrorCodes from './errors/index';\n\nexport {\n    init as serverInit,\n    setupRWS,\n    setupPrisma,\n    getAppConfig,    \n    AppConfigService,\n\n    Controller as RWSController,\n    TheService as RWSService,\n    TheSocket as RWSSocket,\n    TheCommand as RWSCommand,\n    Model as RWSModel,\n    IModel as IRWSModel,\n\n    ServerService as RWSServer,\n    DBServiceInstance,\n    DBService,    \n    AuthServiceInstance,\n    AuthService,\n    S3ServiceInstance,\n    S3Service,\n    ConsoleServiceInstance,\n    ConsoleService,\n    LambdaServiceInstance,\n    LambdaService,\n    AWSServiceInstance,\n    AWSService,\n    EFSServiceInstance,\n    EFSService,\n    MD5ServiceInstance,\n    MD5Service,\n    TraversalServiceInstance,\n    TraversalService,\n    UtilsServiceInstance,\n    UtilsService,\n    VectorStoreServiceInstance,\n    VectorStoreService,\n    ProcessServiceInstance,\n    ProcessService,    \n\n    TimeSeriesModel,\n\n    WsRoutes,\n    IRequestParams,\n    ITheSocket,    \n    ITimeSeries,\n    IAppConfig,\n    IContextToken,\n    ServerControlSet,\n    IAuthUser,\n    IDbUser,\n    \n    Socket,          \n    RWSannotations,\n    JSONMessage as RWSJSONMessage,\n    ICmdParams,      \n    IHTTProute,\n    IPrefixedHTTProutes,\n    RWSHTTPRoutingEntry,\n    RWSAppCommands,\n    RWSTestSuite,  \n    \n    RWSVectorStore,\n    RWSConvo,\n    RWSPrompt,    \n    RWSErrorCodes,\n    ChainStreamType,\n\n    BaseWsResponse, ErrorWsResponse,\n\n    IRWSPromptRequestExecutor,\n    IRWSSinglePromptRequestExecutor,\n    IRWSPromptStreamExecutor,\n    IChainCallOutput,\n    IConvoDebugXMLData,\n    IEmbeddingsHandler,\n    IRWSPromptJSON,\n    ISplitterParams,\n    ILLMChunk,\n    RWSTrackType,\n    RWSServerPair,\n    RWSServerStarter\n};","\n\n\nimport IAppConfig from './interfaces/IAppConfig';\nimport getConfigService, {AppConfigService} from './services/AppConfigService';\nimport ServerService, { IInitOpts, ServerControlSet } from './services/ServerService';\nimport ConsoleService from './services/ConsoleService';\nimport UtilsService from './services/UtilsService';\n\nimport fs from 'fs';\nimport ProcessService from './services/ProcessService';\nimport IDbUser from './interfaces/IDbUser';\n\nasync function init<PassedUser extends IDbUser>(cfg: IAppConfig, serverOptions: IInitOpts = {}, addToConfig: (configService: AppConfigService) => Promise<void> = null){    \n    const AppConfigService = getConfigService(cfg);    \n    const wsRoutes = await AppConfigService.get('ws_routes');\n    const httpRoutes = await AppConfigService.get('http_routes');\n    const controler_list = await AppConfigService.get('controller_list');\n    const pub_dir = await AppConfigService.get('pub_dir');\n    const cors_domain = await AppConfigService.get('cors_domain');\n\n    // const sslCert = AppConfigService.get('ssl_cert');\n    // const sslKey = AppConfigService.get('ssl_key');      \n\n    if(addToConfig !== null){\n        await addToConfig(AppConfigService);\n    }\n\n    // let https = true;\n\n    // if(!sslCert || !sslKey){\n    //     https = false;\n    // }\n\n    const executeDir: string = process.cwd();\n    const packageRootDir = UtilsService.findRootWorkspacePath(executeDir);\n    const moduleCfgDir = `${packageRootDir}/node_modules/.rws`;\n    const moduleCfgFile = `${moduleCfgDir}/_rws_installed`;\n\n    if(!fs.existsSync(moduleCfgFile)){        \n        ConsoleService.log(ConsoleService.color().yellow('No config path generated for CLI. Trying to initialize with \"yarn rws init config/config\"'));\n        await ProcessService.runShellCommand('yarn rws init config/config');\n        UtilsService.setRWSVar('_rws_installed', 'OK');    \n    }\n\n    const rwsAppOpts = {...{        \n        wsRoutes: wsRoutes,\n        httpRoutes: httpRoutes,\n        controllerList: controler_list,\n        pub_dir: pub_dir,\n        domain: `http${(AppConfigService.get('features')?.ssl ? 's' : '')}://${AppConfigService.get('domain')}`,\n        authorization: AppConfigService.get('features')?.auth,\n        cors_domain: cors_domain\n    },...serverOptions};\n\n    const theServer: ServerControlSet = await ServerService.initializeApp<PassedUser>(rwsAppOpts);\n\n    const wsStart = async () => {\n        return (await theServer.websocket.starter());\n    };\n\n    const httpStart = async () => {\n        return (await theServer.http.starter());\n    };\n\n    wsStart();\n    await httpStart();    \n\n    return theServer;\n}\n\nexport default init;\n","import getConfigService, { IAppConfig } from './services/AppConfigService';\nimport Model, { IMetaOpts } from './models/_model';\nimport fs from 'fs';\nimport path from 'path';\nimport 'reflect-metadata';\nimport DBService from './services/DBService';\nimport TimeSeriesModel from './models/types/TimeSeriesModel';\nimport ProcessService from './services/ProcessService';\nimport ConsoleService from './services/ConsoleService';\nimport UtilsService from './services/UtilsService';\n\nconst { log, color, rwsLog } = ConsoleService;\n\nconst {runShellCommand} = ProcessService;\n\nconst moduleDir = path.resolve(path.dirname(module.id), '..');\nconst executionDir = path.resolve(process.cwd());\nconst workspaceRoot = UtilsService.findRootWorkspacePath(executionDir);\n\nconst _RWS_INSTALED_TXT: string = 'OK';\n\nfunction generateModelSections<T extends Model<T>>(constructor: new () => T): string {\n    let section = '';\n\n    const modelMetadatas: Record<string, {annotationType: string, metadata: any}> = Model.getModelAnnotations(constructor); // Pass the class constructor   \n    const modelName: string = (constructor as any)._collection;\n    \n    section += `model ${modelName} {\\n`;\n\n    section += '\\tid String @map(\"_id\") @id @default(auto()) @db.ObjectId\\n';     \n    \n    for (const key in modelMetadatas) {\n        const modelMetadata: IMetaOpts = modelMetadatas[key].metadata;            \n        const requiredString = modelMetadata.required ? '' : '?';  \n      \n        const annotationType: string = modelMetadatas[key].annotationType;\n      \n        if(annotationType === 'Relation'){\n            section += `\\t${key} ${modelMetadata.relatedTo}${requiredString} @relation(fields: [${modelMetadata.relationField}], references: [${modelMetadata.relatedToField}])\\n`;      \n            section += `\\t${modelMetadata.relationField} String${requiredString} @db.ObjectId\\n`;\n        }else if (annotationType === 'InverseRelation'){        \n            section += `\\t${key} ${modelMetadata.inversionModel}[]`;\n        }else if (annotationType === 'InverseTimeSeries'){        \n            section += `\\t${key} String[] @db.ObjectId`;      \n        }else if (annotationType === 'TrackType'){        \n            const tags: string[] = modelMetadata.tags.map((item: string) => '@' + item);          \n            section += `\\t${key} ${toConfigCase(modelMetadata)}${requiredString} ${tags.join(' ')}\\n`;\n        }\n    }\n\n    section += '\\n}';\n  \n  \n    return section;\n}\n\nfunction toConfigCase(modelType: any): string {\n    const type = modelType.type;\n    const input = type.name;  \n\n    if(input == 'Number'){\n        return 'Int';\n    }\n\n    if(input == 'Object'){\n        return 'Json';\n    }\n\n    if(input == 'Date'){\n        return 'DateTime';\n    }\n\n\n    const firstChar = input.charAt(0).toUpperCase();\n    const restOfString = input.slice(1);\n    return firstChar + restOfString;\n}\n\nasync function setupPrisma(cfg: IAppConfig, leaveFile = false)\n{   \n    const AppConfigService = getConfigService(cfg);\n    const dbUrl = await AppConfigService.get('mongo_url');    \n\n    const dbType = 'mongodb';\n\n    let template: string = `generator client {\\n\n    provider = \"prisma-client-js\"\\n\n  }\\n\\n`;\n\n    template += `\\ndatasource db {\\n\n    provider = \"${dbType}\"\\n\n    url = env(\"DATABASE_URL\")\\n    \n  }\\n\\n`;\n\n    const usermodels = await AppConfigService.get('user_models');\n\n    usermodels.forEach((model: any) => {    \n        const modelSection = generateModelSections(model);\n\n        template += '\\n\\n' + modelSection;  \n\n        ConsoleService.log('RWS SCHEMA BUILD', ConsoleService.color().blue('Building DB Model'), model.name);\n    \n        if(Model.isSubclass(model, TimeSeriesModel)){      \n     \n            DBService.collectionExists(model._collection).then((exists: boolean) => {\n                if (exists){\n                    return;\n                }\n\n                log(color().green('[RWS Init]') + ` creating TimeSeries type collection from ${model} model`);\n\n                DBService.createTimeSeriesCollection(model._collection);    \n            });\n        }\n    });\n\n    const schemaPath = path.join(moduleDir, 'prisma', 'schema.prisma');\n    fs.writeFileSync(schemaPath, template);  \n    process.env.DB_URL = dbUrl;\n    // Define the command you want to run\n    await ProcessService.runShellCommand('npx prisma generate --schema='+schemaPath);  \n\n    log(color().green('[RWS Init]') + ' prisma schema generated from ', schemaPath);\n\n    UtilsService.setRWSVar('_rws_installed', _RWS_INSTALED_TXT);\n\n    if(!leaveFile){\n        fs.unlinkSync(schemaPath);\n    }    \n\n    return;\n}\n\nasync function setupRWS(cfg: IAppConfig, generateProjectFiles: boolean = true): Promise<void>\n{\n    const packageRootDir: string = UtilsService.findRootWorkspacePath(process.cwd());\n    const endPrismaFilePath = packageRootDir + 'node_modules/.prisma/client/schema.prisma';\n\n    if(fs.existsSync(endPrismaFilePath)){\n        fs.unlinkSync(endPrismaFilePath);\n    }                \n\n \n    let workspaced = false;\n    \n    if(workspaceRoot !== executionDir){\n        workspaced = true;\n    }\n    \n    if(generateProjectFiles){              \n        if(workspaced){\n            if(!fs.existsSync(`${workspaceRoot}/.eslintrc.json`)){\n                const rcjs: string = fs.readFileSync(`${moduleDir}/.setup/_base.eslintrc.json`, 'utf-8');\n                fs.writeFileSync(`${workspaceRoot}/.eslintrc.json`, rcjs.replace('{{backend_dir}}', executionDir));\n                rwsLog(color().green('RWS CLI'), 'Installed eslint base workspace config file.');\n            }\n        \n            if(!fs.existsSync(`${executionDir}/.eslintrc.json`)){\n                const rcjs: string = fs.readFileSync(`${moduleDir}/.setup/_base.eslintrc.json`, 'utf-8');\n                fs.writeFileSync(`${executionDir}/.eslintrc.json`, rcjs.replace('{{backend_dir}}', executionDir));                            \n                rwsLog(color().green('RWS CLI'), 'Installed eslint backend workspace config file.');\n            }    \n        }else{\n            if(!fs.existsSync(`${executionDir}/.eslintrc.json`)){\n                fs.copyFileSync(`${moduleDir}/.eslintrc.json`, `${executionDir}/.eslintrc.json`);\n                rwsLog(color().green('RWS CLI'), 'Installed eslint config file.');\n            }  \n        } \n    \n        if(!fs.existsSync(`${executionDir}/tsconfig.json`)){\n            fs.copyFileSync(`${moduleDir}/.setup/tsconfig.json`, `${executionDir}/tsconfig.json`);\n            rwsLog(color().green('RWS CLI'), 'Installed tsconfig.');\n        }\n    }\n    return;\n}\n\nconst nodeModulesDir = path.resolve(`${workspaceRoot}`, 'node_modules');\n\nconst isInstalled = {\n    rws: (): boolean => UtilsService.getRWSVar('_rws_installed') === _RWS_INSTALED_TXT,\n    prisma: (): boolean => fs.existsSync(path.resolve(`${nodeModulesDir}`, '.prisma', 'client', 'schema.prisma'))\n}\n\nexport {setupPrisma, setupRWS, isInstalled, runShellCommand, _RWS_INSTALED_TXT};\n\n","import { Error500, RWSError } from '../errors';\n\nimport DBService from '../services/DBService';\nimport getAppConfig from '../services/AppConfigService';\n\nimport TrackType, {IMetaOpts} from './annotations/TrackType';\ninterface IModel{\n    [key: string]: any;\n    id: string | null;\n    save: () => void;\n    getCollection: () => string | null;\n}\n\ntype DBModelFindOneType<ChildClass> = (\n    this: OpModelType<ChildClass>,\n    conditions: any,\n    fields?: string[],\n    ordering?: { [fieldName: string]: string }\n) => Promise<ChildClass | null>;\n\ntype DBModelFindManyType<ChildClass> = (\n    this: OpModelType<ChildClass>,\n    conditions: any,\n    fields?: string[],\n    ordering?: { [fieldName: string]: string }\n) => Promise<ChildClass | null>;\n\ninterface OpModelType<ChildClass> {\n    new(): ChildClass;\n    name: string\n    _collection: string;\n    loadModels: () => Model<any>[];\n    checkForInclusionWithThrow: (className: string) => void;\n    checkForInclusion: (className: string) => boolean;\n}\n\nclass Model<ChildClass> implements IModel{\n    [key: string]: any;\n    @TrackType(String)\n        id: string;\n    static _collection: string = null;\n\n    static _BANNED_KEYS = ['_collection'];\n\n    constructor(data?: any) {    \n        if(!this.getCollection()){\n            throw new Error('Model must have a collection defined');\n        \n        }\n\n        if(!data){\n            return;    \n        }\n\n        this.checkForInclusionWithThrow();\n  \n        if(!this.hasTimeSeries()){\n            this._fill(data);\n        }else{\n            throw new Error('Time Series not supported in synchronous constructor. Use `await Model.create(data)` static method to instantiate this model.');\n        }\n    }    \n    \n    checkForInclusionWithThrow(): void\n    {\n        Model.checkForInclusionWithThrow(this.constructor.name)\n    }\n\n    static checkForInclusionWithThrow(this: OpModelType<any>, checkModelType: string): void\n    {\n        if(!this.checkForInclusion(this.name)){\n            throw new Error500(new Error('Model undefined: ' + this.name), this.name);\n        }\n    }\n\n    checkForInclusion(): boolean    \n    {                \n        return Model.checkForInclusion(this.constructor.name);        \n    }\n\n    static checkForInclusion(this: OpModelType<any>, checkModelType: string): boolean\n    {        \n        return this.loadModels().find((definedModel: Model<any>) => {\n            return definedModel.name === checkModelType\n        }) !== undefined\n    }\n\n    protected _fill(data: any): Model<ChildClass>{\n        for (const key in data) {\n            if (data.hasOwnProperty(key)) {   \n              \n                const meta = Reflect.getMetadata(`InverseTimeSeries:${key}`, (this as any).constructor.prototype);\n          \n                if(meta){\n                    data[key] = {\n                        create: data[key]\n                    };\n                }else{\n                    this[key] = data[key];\n                }                          \n            }\n        }       \n        \n        return this;\n    }\n\n    public async _asyncFill(data: any): Promise<ChildClass>{\n        const collections_to_models: {[key: string]: any} = {};           \n        const timeSeriesIds: {[key: string]: {collection: string, hydrationField: string,ids: string[]}} = this.getTimeSeriesModelFields();\n        \n        this.loadModels().forEach((model) => {\n            collections_to_models[model.getCollection()] = model;      \n        });      \n\n        const seriesHydrationfields: string[] = [];      \n\n        for (const key in data) {\n            if (data.hasOwnProperty(key)) {\n                if(seriesHydrationfields.includes(key)){\n                    continue;\n                }                    \n\n                const timeSeriesMetaData = timeSeriesIds[key];  \n          \n                if(timeSeriesMetaData){\n                    this[key] = data[key];\n                    const seriesModel = collections_to_models[timeSeriesMetaData.collection];\n            \n                    const dataModels = await seriesModel.findBy({\n                        id: { in: data[key] }\n                    });                        \n\n                    seriesHydrationfields.push(timeSeriesMetaData.hydrationField);\n            \n                    this[timeSeriesMetaData.hydrationField] = dataModels;\n                } else {\n                    this[key] = data[key];            \n                }        \n\n            }        \n        }     \n\n        return this as any as ChildClass;\n    }\n\n    private getTimeSeriesModelFields()\n    {\n        const timeSeriesIds: {[key: string]: {collection: string, hydrationField: string, ids: string[]}} = {};\n\n        for (const key in this as any) {\n            if (this.hasOwnProperty(key)) {             \n          \n                const meta = Reflect.getMetadata(`InverseTimeSeries:${key}`, (this as any));            \n                if(meta){\n                    if(!timeSeriesIds[key]){\n                        timeSeriesIds[key] = {\n                            collection: meta.timeSeriesModel,\n                            hydrationField: meta.hydrationField,\n                            ids: this[key]\n                        };\n                    }\n                }                         \n            }\n        } \n\n        return timeSeriesIds;\n    }   \n\n    public toMongo(): any{\n       \n        const data: any = {};\n\n        const timeSeriesIds: {[key: string]: {collection: string, hydrationField: string, ids: string[]}} = this.getTimeSeriesModelFields();\n        const timeSeriesHydrationFields: string[] = [];\n      \n        for (const key in (this as any)) {      \n            if(!this.isDbVariable(key)){\n                continue;\n            } \n\n            if (this.hasOwnProperty(key) && !((this as any).constructor._BANNED_KEYS || Model._BANNED_KEYS).includes(key) && !timeSeriesHydrationFields.includes(key)) {              \n                data[key] = this[key];\n            }\n\n            if(timeSeriesIds[key]){\n                data[key] = this[key];\n                timeSeriesHydrationFields.push(timeSeriesIds[key].hydrationField);              \n            }\n        }                \n\n        return data;\n    }   \n\n    getCollection(): string | null {\n        return (this as any).constructor._collection || this._collection;\n    }\n\n    static getCollection(): string | null {\n        return (this as any).constructor._collection || this._collection;\n    }\n\n\n    async save(): Promise<this> {\n        const data = this.toMongo();\n        let updatedModelData = data;\n  \n        if (this.id) {\n            this.preUpdate();\n\n            updatedModelData = await DBService.update(data, this.getCollection());\n\n            await this._asyncFill(updatedModelData);\n            this.postUpdate();\n        } else {\n            this.preCreate();      \n      \n            const timeSeriesModel = await import('./types/TimeSeriesModel');      \n            const isTimeSeries = this instanceof timeSeriesModel.default;\n\n            updatedModelData = await DBService.insert(data, this.getCollection(), isTimeSeries);      \n\n            await this._asyncFill(updatedModelData);   \n\n            this.postCreate();\n        }\n  \n        return this;\n    }\n\n    static getModelAnnotations<T extends object>(constructor: new () => T): Record<string, {annotationType: string, metadata: any}> {    \n        const annotationsData: Record<string, {annotationType: string, metadata: any}> = {};\n\n        const propertyKeys: string[] = Reflect.getMetadataKeys(constructor.prototype).map((item: string): string => {\n            return item.split(':')[1];\n        });\n      \n        propertyKeys.forEach(key => {\n            if(String(key) == 'id'){\n                return;\n            }  \n\n            const annotations: string[] = ['TrackType', 'Relation', 'InverseRelation', 'InverseTimeSeries'];\n\n            annotations.forEach(annotation => {\n                const metadataKey = `${annotation}:${String(key)}`;\n        \n                const meta = Reflect.getMetadata(metadataKey, constructor.prototype);\n          \n                if (meta) {\n                    annotationsData[String(key)] = {annotationType: annotation, metadata: meta};\n                }\n            });                 \n        });\n\n        return annotationsData;\n    }\n\n    public preUpdate(): void\n    {\n        return;\n    }\n\n    public postUpdate(): void\n    {\n        return;\n    }\n\n    public preCreate(): void\n    {\n        return;\n    }\n\n    public postCreate(): void\n    {\n        return;\n    }\n\n    public static isSubclass<T extends Model<T>, C extends new () => T>(constructor: C, baseClass: new () => T): boolean {\n        return baseClass.prototype.isPrototypeOf(constructor.prototype);\n    }\n\n    hasTimeSeries(): boolean \n    {\n        return Model.checkTimeSeries((this as any).constructor);\n    }\n\n    static checkTimeSeries(constructor: any): boolean\n    {            \n        const data = constructor.prototype as any;\n\n        for (const key in data) {\n\n            if (data.hasOwnProperty(key)) {   \n\n                if(Reflect.getMetadata(`InverseTimeSeries:${key}`, constructor.prototype)){\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    isDbVariable(variable: string): boolean \n    {\n        return Model.checkDbVariable((this as any).constructor, variable);\n    }\n\n    static checkDbVariable(constructor: any, variable: string): boolean\n    {                   \n\n        if(variable === 'id'){\n            return true;\n        }\n        \n        const dbAnnotations = Model.getModelAnnotations(constructor);\n      type AnnotationType = { annotationType: string, key: string };\n\n      const dbProperties: string[] = Object.keys(dbAnnotations).map((key: string): AnnotationType => {return {...dbAnnotations[key], key};}).filter((element: AnnotationType) => element.annotationType === 'TrackType' ).map((element: AnnotationType) => element.key);\n\n      return dbProperties.includes(variable);\n    }\n\n    sanitizeDBData(data: any): any\n    {\n        const dataKeys = Object.keys(data);\n        const sanitizedData: {[key: string]: any} = {};\n\n        for (const key of dataKeys){\n            if(this.isDbVariable(key)){\n                sanitizedData[key] = data[key];\n            }\n        }\n\n        return sanitizedData;\n    }\n\n    public static async watchCollection<ChildClass extends Model<ChildClass>>(\n        this: OpModelType<ChildClass>, \n        preRun: () => void\n    ){\n        const collection = Reflect.get(this, '_collection');\n        this.checkForInclusionWithThrow(this.name);\n        return await DBService.watchCollection(collection, preRun);\n    }\n\n    public static async findOneBy<ChildClass extends Model<ChildClass>>(\n        this: OpModelType<ChildClass>,\n        conditions: {\n            [fieldName: string]: any\n        },\n        fields: string[] | null = null,\n        ordering: { [fieldName: string]: string } = null,\n    ): Promise<ChildClass | null> {\n        this.checkForInclusionWithThrow('');\n\n        const collection = Reflect.get(this, '_collection');\n        const dbData = await DBService.findOneBy(collection, conditions, fields, ordering);\n        \n    \n        if (dbData) {\n            const inst: ChildClass = new (this as { new(): ChildClass })();\n            return await inst._asyncFill(dbData);\n        }\n    \n        return null;\n    }\n\n    public static async find<ChildClass extends Model<ChildClass>>(\n        this: OpModelType<ChildClass>,\n        id: string,        \n        fields: string[] | null = null,\n        ordering: { [fieldName: string]: string } = null\n    ): Promise<ChildClass | null> {\n        const collection = Reflect.get(this, '_collection');\n        this.checkForInclusionWithThrow(this.name);\n\n        const dbData = await DBService.findOneBy(collection, { id }, fields, ordering);\n    \n        if (dbData) {\n            const inst: ChildClass = new (this as { new(): ChildClass })();\n            return await inst._asyncFill(dbData);\n        }\n    \n        return null;\n    }\n\n    public static async delete<ChildClass extends Model<ChildClass>>(\n        this: OpModelType<ChildClass>,\n        conditions: any\n    ): Promise<void> {\n        const collection = Reflect.get(this, '_collection');\n        this.checkForInclusionWithThrow(this.name);\n        return await DBService.delete(collection, conditions);\n    }\n\n    public async delete<ChildClass extends Model<ChildClass>>(): Promise<void> {\n        const collection = Reflect.get(this, '_collection');\n        this.checkForInclusionWithThrow();\n        return await DBService.delete(collection, {\n            id: this.id\n        });  \n    }    \n    \n    public static async findBy<ChildClass extends Model<ChildClass>>(\n        this: OpModelType<ChildClass>,    \n        conditions: any,\n        fields: string[] | null = null,\n        ordering: { [fieldName: string]: string } = null\n    ): Promise<ChildClass[]> {\n        const collection = Reflect.get(this, '_collection');\n        this.checkForInclusionWithThrow(this.name);\n        try {\n            const dbData = await DBService.findBy(collection, conditions, fields, ordering);\n    \n            if (dbData.length) {\n                const instanced: ChildClass[] = [];\n        \n                for (const data of dbData) {\n                    const inst: ChildClass = new (this as { new(): ChildClass })();\n                    instanced.push((await inst._asyncFill(data)) as ChildClass);\n                }\n        \n                return instanced;\n            }\n        \n            return [];\n        } catch (rwsError: RWSError | any) {\n            rwsError.printFullError();\n\n            throw rwsError;\n        }        \n    }\n    \n\n    static async create<T extends Model<T>>(this: new () => T, data: any): Promise<T> {\n        const newModel = new this();\n\n        const sanitizedData = newModel.sanitizeDBData(data);\n     \n        await newModel._asyncFill(sanitizedData);\n    \n        return newModel;\n    }\n\n    static loadModels(): Model<any>[]\n    {\n        const AppConfigService = getAppConfig();\n        return AppConfigService.get('user_models');\n    }\n\n    loadModels(): Model<any>[]\n    {     \n        return Model.loadModels();\n    }\n}\n\n\n\nexport default Model;\nexport { IModel, TrackType, IMetaOpts };","import 'reflect-metadata';\n\ninterface InverseRelationOpts{\n    required?: boolean,\n    relationField?: string\n    relatedToField?: string,\n    relatedTo?: string,\n    inversionModel?: string,\n  }\n  \nfunction InverseRelation(inversionModel: string) {\n  \n    const metaOpts: InverseRelationOpts = {\n        inversionModel: inversionModel\n    };\n\n  \n    return function(target: any, key: string) {          \n        Reflect.defineMetadata(`InverseRelation:${key}`, metaOpts, target);\n    };\n}\n\nexport default InverseRelation;\nexport {InverseRelationOpts};","import 'reflect-metadata';\n\ninterface InverseTimeSeriesOpts{\n    timeSeriesModel: string\n    hydrationField: string\n  }\n  \nfunction InverseTimeSeries(timeSeriesModel: string, hydrationField: string) {\n\n    const metaOpts: InverseTimeSeriesOpts = {\n        timeSeriesModel: timeSeriesModel,\n        hydrationField: hydrationField\n    };\n\n\n    return function(target: any, key: string) {          \n        Reflect.defineMetadata(`InverseTimeSeries:${key}`, metaOpts, target);\n    };\n}\n\nexport default InverseTimeSeries;\nexport {InverseTimeSeriesOpts};","import 'reflect-metadata';\n\ninterface IRelationOpts{\n    required?: boolean,\n    relationField?: string\n    relatedToField?: string,\n    relatedTo?: string,\n    inversionModel?: string,\n  }\n  \nfunction Relation(relatedTo: string, required: boolean = false, relationField: string = null,  relatedToField: string = 'id') {\n  \n    const metaOpts: IRelationOpts = {required};\n  \n    metaOpts.relatedToField = relatedToField;      \n    metaOpts.relatedTo = relatedTo;\n\n    if(!relationField){\n        metaOpts.relationField = relatedTo + '_id';\n    } else{\n        metaOpts.relationField = relationField;\n    }  \n  \n    return function(target: any, key: string) {          \n        Reflect.defineMetadata(`Relation:${key}`, metaOpts, target);\n    };\n}\n\nexport default Relation;\nexport {IRelationOpts};","import 'reflect-metadata';\n\ninterface ITrackerOpts{\n    required?: boolean,\n    relationField?: string\n    relatedToField?: string,\n    relatedTo?: string,\n    inversionModel?: string,\n  }\n  \n  interface IMetaOpts extends ITrackerOpts{\n    type: any,\n    tags: string[]\n  }\n  \nfunction TrackType(type: any, opts: ITrackerOpts = null, tags: string[] = []) {\n    if(!opts){\n        opts = {\n            required: false\n        };\n    }\n  \n    const required = opts.required;\n  \n    const metaOpts: IMetaOpts = {type, tags, required};\n  \n    if(opts.relatedToField && opts.relatedTo){\n        metaOpts.relatedToField = opts.relatedToField;      \n        metaOpts.relatedTo = opts.relatedTo;\n\n        if(!opts.relationField){\n            metaOpts.relationField = opts.relatedTo + '_id';\n        } else{\n            metaOpts.relationField = opts.relationField;\n        }\n    }     \n  \n    if(opts.inversionModel){\n        metaOpts.inversionModel = opts.inversionModel;  \n    }\n  \n    //const resolvedType = typeof type === 'function' ? type() : type;   \n    \n    if(type._collection){    \n        metaOpts.type = (type as any);\n    }\n  \n    return function(target: any, key: string) {          \n        Reflect.defineMetadata(`TrackType:${key}`, metaOpts, target);\n    };\n}\n\nexport default TrackType;\nexport {IMetaOpts, ITrackerOpts};","import InverseRelation from './InverseRelation';\nimport Relation from './Relation';\nimport TrackType from './TrackType';\nimport InverseTimeSeries from './InverseTimeSeries';\n\nexport {\n    InverseRelation, Relation, TrackType, InverseTimeSeries\n};","import { TextLoader } from 'langchain/document_loaders/fs/text';\nimport { RecursiveCharacterTextSplitter } from 'langchain/text_splitter';\nimport { PromptTemplate } from '@langchain/core/prompts';\nimport { RunnableConfig, Runnable } from '@langchain/core/runnables';\nimport { BaseMessage } from '@langchain/core/messages';\nimport { BaseLanguageModelInput } from '@langchain/core/language_models/base';\nimport VectorStoreService from '../../services/VectorStoreService';\nimport ConsoleService from '../../services/ConsoleService';\nimport RWSVectorStore, { VectorDocType } from '../convo/VectorStore';\nimport { Document } from 'langchain/document';\nimport { v4 as uuid } from 'uuid';\nimport getAppConfig from '../../services/AppConfigService';\nimport { BaseChain, ConversationChain } from 'langchain/chains';\nimport RWSPrompt, { IRWSPromptJSON, ILLMChunk } from '../prompts/_prompt';\n\nimport { Error500 } from '../../errors';\nimport { ChainValues } from '@langchain/core/utils/types';\n\nimport xml2js from 'xml2js';\nimport fs from 'fs';\nimport path from 'path';\n\ninterface ISplitterParams {\n    chunkSize: number\n    chunkOverlap: number\n    separators: string[]\n}\n\nconst logConvo = (txt: string) => {\n    ConsoleService.rwsLog(ConsoleService.color().blueBright(txt));\n};\n\ninterface IBaseLangchainHyperParams {\n    temperature: number;\n    topK: number;\n    topP: number;\n    maxTokens: number;\n}\n\ninterface IConvoDebugXMLData {\n    conversation: {\n        $: {\n            id: string\n            [key: string]: string\n        },\n        message: IRWSPromptJSON[]        \n    }\n}\n\ninterface IConvoDebugXMLOutput {\n    xml: IConvoDebugXMLData,\n    path: string\n}\n\ninterface IChainCallOutput {\n    text: string\n}\n\ninterface IEmbeddingsHandler<T extends object> {\n    generateEmbeddings: (text?: string) => Promise<T>\n    storeEmbeddings: (embeddings: any, convoId: string) => Promise<void>\n}\n\nclass ConvoLoader<LLMChat extends Runnable<BaseLanguageModelInput, BaseMessage, RunnableConfig>> {\n    private loader: TextLoader;\n    private docSplitter: RecursiveCharacterTextSplitter;    \n\n    private embeddings: IEmbeddingsHandler<any>;\n\n    private docs: Document[] = [];\n    private _initiated = false;\n    private store: RWSVectorStore;\n    private convo_id: string;    \n    private llmChain: BaseChain;\n    private llmChat: LLMChat;\n    private chatConstructor: new (config: any) => LLMChat;\n    private thePrompt: RWSPrompt;\n\n    public _baseSplitterParams: ISplitterParams;\n    \n    constructor(chatConstructor: new (config: any) => LLMChat, embeddings: IEmbeddingsHandler<any>, convoId: string | null = null, baseSplitterParams: ISplitterParams = {\n        chunkSize:400, chunkOverlap:80, separators: ['/n/n','.']\n    }){\n        this.embeddings = embeddings;\n        \n        if(convoId === null){\n            this.convo_id = ConvoLoader.uuid();\n        } else {\n            this.convo_id = convoId;\n        }                        \n\n        this.chatConstructor = chatConstructor;    \n        this._baseSplitterParams = baseSplitterParams;   \n    }\n\n    static uuid(): string\n    {\n        return uuid();\n    }\n\n\n    async splitDocs(filePath: string, params: ISplitterParams)\n    {\n        const splitDir = ConvoLoader.debugSplitDir(this.getId());\n\n        if(!fs.existsSync(splitDir)){\n            console.log(`Split dir ${ConsoleService.color().magentaBright(splitDir)} doesn't exist. Splitting docs...`);\n            this.loader = new TextLoader(filePath);\n\n            this.docSplitter = new RecursiveCharacterTextSplitter({\n                chunkSize: params.chunkSize, // The size of the chunk that should be split.\n                chunkOverlap: params.chunkOverlap, // Adding overalap so that if a text is broken inbetween, next document may have part of the previous document \n                separators: params.separators // In this case we are assuming that /n/n would mean one whole sentence. In case there is no nearing /n/n then \".\" will be used instead. This can be anything that helps derive a complete sentence .\n            });\n\n            fs.mkdirSync(splitDir, { recursive: true });\n            \n            const orgDocs = await this.loader.load();\n            const splitDocs = await this.docSplitter.splitDocuments(orgDocs);\n\n            const avgCharCountPre = this.avgDocLength(orgDocs);\n            const avgCharCountPost = this.avgDocLength(splitDocs);\n\n            logConvo(`Average length among ${orgDocs.length} documents loaded is ${avgCharCountPre} characters.`);\n            logConvo(`After the split we have ${splitDocs.length} documents more than the original ${orgDocs.length}.`);\n            logConvo(`Average length among ${orgDocs.length} documents (after split) is ${avgCharCountPost} characters.`);\n\n            this.docs = splitDocs;            \n\n            let i = 0;\n            this.docs.forEach((doc: Document) => {\n                fs.writeFileSync(this.debugSplitFile(i), doc.pageContent);\n                i++;\n            });\n        }else{\n            const splitFiles = fs.readdirSync(splitDir);\n            \n            for(const filePath of splitFiles) {\n                const txt = fs.readFileSync(splitDir + '/' + filePath, 'utf-8');\n                this.docs.push(new Document({ pageContent: txt }));              \n            }\n        }\n        \n        this.store = await VectorStoreService.createStore(this.docs, await this.embeddings.generateEmbeddings());\n    }\n\n    getId(): string {\n        return this.convo_id;\n    }\n\n    getDocs(): VectorDocType\n    {\n        return this.docs;\n    }\n    getStore(): RWSVectorStore\n    {\n        return this.store;\n    }\n\n    isInitiated(): boolean \n    {\n        return this._initiated;\n    }\n\n    setPrompt(prompt: RWSPrompt): ConvoLoader<LLMChat>\n    {\n        this.thePrompt = prompt;        \n\n        this.llmChat = new this.chatConstructor({\n            streaming: true,\n            region: getAppConfig().get('aws_bedrock_region'),  \n            credentials: {  \n                accessKeyId: getAppConfig().get('aws_access_key'),  \n                secretAccessKey: getAppConfig().get('aws_secret_key'),  \n            },  \n            model: 'anthropic.claude-v2',            \n            maxTokens: prompt.getHyperParameter<number>('max_tokens_to_sample'),\n            temperature: prompt.getHyperParameter<number>('temperature'),\n            modelKwargs: {\n                top_p: prompt.getHyperParameter<number>('top_p'),\n                top_k: prompt.getHyperParameter<number>('top_k'),\n            }\n        });        \n\n        return this;\n    }\n\n    getChat(): LLMChat\n    {\n        return this.llmChat;\n    }\n\n    private avgDocLength = (documents: Document[]): number => {\n        return documents.reduce((sum, doc: Document) => sum + doc.pageContent.length, 0) / documents.length;\n    };\n\n    async call(values: ChainValues, cfg: Partial<RunnableConfig>, debugCallback: (debugData: IConvoDebugXMLData) => Promise<IConvoDebugXMLData> = null): Promise<RWSPrompt>\n    {   \n        const output = await (this.chain()).invoke(values, cfg) as IChainCallOutput;        \n        this.thePrompt.listen(output.text);        \n\n        await this.debugCall(debugCallback);\n\n        return this.thePrompt;\n    }\n\n    async *callStreamGenerator(\n        this: ConvoLoader<LLMChat>, \n        values: ChainValues, \n        cfg: Partial<RunnableConfig>,     \n        debugCallback: (debugData: IConvoDebugXMLData) => Promise<IConvoDebugXMLData> = null\n    ): AsyncGenerator<string>\n    {           \n        // const _self = this;\n        // const chain = this.chain() as ConversationChain;  \n        // console.log('call stream');      \n        // const stream = await chain.call(values, [{\n        //         handleLLMNewToken(token: string) {\n        //             yield token;\n        //         }\n        //     }\n        // ]);\n        \n        // console.log('got stream');\n\n\n\n        // Listen to the stream and yield data chunks as they come\n        // for await (const chunk of stream) {                  \n        //     yield chunk.response;\n        // }\n    }   \n\n    async callStream(values: ChainValues, callback: (streamChunk: ILLMChunk) => void, end: () => void = () => {}, cfg: Partial<RunnableConfig> = {}, debugCallback?: (debugData: IConvoDebugXMLData) => Promise<IConvoDebugXMLData>): Promise<RWSPrompt>\n    {\n        const _self = this;               \n\n        await this.chain().invoke(values, { callbacks: [{\n            handleLLMNewToken(token: string) {\n                callback({\n                    content: token,\n                    status: 'rws_streaming'\n                });\n\n                _self.thePrompt.listen(token, true);\n            }\n        }\n        ]});\n\n        end();\n\n        this.debugCall(debugCallback);\n\n        return this.thePrompt;\n    }\n\n    async similaritySearch(query: string, splitCount: number): Promise<string>\n    {\n        console.log('Store is ready. Searching for embedds...');            \n        const texts = await this.getStore().getFaiss().similaritySearchWithScore(`${query}`, splitCount);\n        console.log('Found best parts: ' + texts.length);\n        return texts.map(([doc, score]: [any, number]) => `${doc['pageContent']}`).join('\\n\\n');    \n    }\n    \n    private async debugCall(debugCallback: (debugData: IConvoDebugXMLData) => Promise<IConvoDebugXMLData> = null)\n    {\n        try {\n            const debug = this.initDebugFile();\n\n            let callData: IConvoDebugXMLData = debug.xml;\n\n            callData.conversation.message.push(this.thePrompt.toJSON());\n\n            if(debugCallback){\n                callData = await debugCallback(callData);\n            }\n\n            this.debugSave(callData);\n        \n        }catch(error: Error | unknown){\n            console.log(error);\n        }\n    }\n\n    chain(): BaseChain\n    {        \n        if(this.llmChain){\n            return this.llmChain;\n        }\n\n        if(!this.thePrompt){\n            throw new Error500(new Error('No prompt initialized for conversation'), __filename);\n        }        \n\n        const chainParams: { prompt: PromptTemplate, values?: ChainValues } = {            \n            prompt: this.thePrompt.getMultiTemplate()\n        };      \n\n        this.createChain(chainParams);\n\n        return this.llmChain;\n    }\n\n    private async createChain(input: { prompt: PromptTemplate, values?: ChainValues }): Promise<BaseChain>\n    {\n        this.llmChain = new ConversationChain({\n            llm: this.llmChat,\n            prompt: input.prompt,              \n        });\n\n        return this.llmChain;\n    }\n\n    async waitForInit(): Promise<ConvoLoader<LLMChat> | null>\n    {\n        const _self = this;\n        return new Promise((resolve, reject)=>{\n            let i = 0;\n\n            const interval: NodeJS.Timeout = setInterval(() => {\n                if(this.isInitiated()){\n                    clearInterval(interval);\n                    resolve(_self);\n                }\n\n                if(i>9){\n                    clearInterval(interval);\n                    reject(null);\n                }\n\n                i++;\n            }, 300);            \n        });\n    }  \n\n    private parseXML(xml: string, callback: (err: Error, result: any) => void): xml2js.Parser\n    {\n        const parser = new xml2js.Parser();        \n\n        parser.parseString(xml, callback);\n        return parser;\n    }\n\n    static debugConvoDir(id: string){\n        return path.resolve(process.cwd(), 'debug', 'conversations', id);\n    }\n\n    static debugSplitDir(id: string){\n        return path.resolve(process.cwd(), 'debug', 'conversations', id, 'split');\n    }\n    \n    public debugConvoFile(){\n        return `${ConvoLoader.debugConvoDir(this.getId())}/conversation.xml`;\n    }    \n\n    public debugSplitFile(i: number){\n        return `${ConvoLoader.debugSplitDir(this.getId())}/${i}.splitfile`;\n    }    \n\n    private initDebugFile(): IConvoDebugXMLOutput\n    {\n        let xmlContent: string;\n        let debugXML: IConvoDebugXMLData = null;\n\n        const convoDir = ConvoLoader.debugConvoDir(this.getId());\n\n        if(!fs.existsSync(convoDir)){\n            fs.mkdirSync(convoDir, { recursive: true });\n        }\n\n        const convoFilePath = this.debugConvoFile();\n\n        if(!fs.existsSync(convoFilePath)){\n            xmlContent = '<conversation id=\"conversation\"></conversation>';\n\n            fs.writeFileSync(convoFilePath, xmlContent);\n        }else{\n            xmlContent = fs.readFileSync(convoFilePath, 'utf-8');\n        }\n\n        this.parseXML(xmlContent, (error: Error, result) => {            \n            debugXML = result;\n        });\n\n        if(!debugXML.conversation.message){\n            debugXML.conversation.message = [];\n        }\n\n        return { xml: debugXML, path: convoFilePath };\n    }\n\n    private debugSave(xml: IConvoDebugXMLData): void\n    {        \n        const builder = new xml2js.Builder();\n        fs.writeFileSync(this.debugConvoFile(), builder.buildObject(xml), 'utf-8');\n    }\n\n}\n\nexport default ConvoLoader;\nexport { IChainCallOutput, IConvoDebugXMLData, IEmbeddingsHandler, ISplitterParams, IBaseLangchainHyperParams };","import { FaissStore } from '@langchain/community/vectorstores/faiss';\nimport { EmbeddingsInterface } from '@langchain/core/embeddings';\nimport { Document } from '@langchain/core/documents';\n\ntype VectorDocType = Document<Record<string, any>>[];\n\nexport default class RWSVectorStore \n{\n    private faiss: FaissStore;\n    private docs: VectorDocType;\n    private embeddings: EmbeddingsInterface;\n\n    constructor(docs: VectorDocType, embeddings: EmbeddingsInterface){\n        this.docs = docs;\n        this.embeddings = embeddings;\n    }\n\n    async init(): Promise<RWSVectorStore>\n    {\n        this.faiss = await FaissStore.fromDocuments(this.docs, this.embeddings);\n\n        return this;\n    }\n\n    getFaiss(): FaissStore\n    {\n        return this.faiss;\n    }\n}\n\nexport {\n    VectorDocType\n};","import { Readable } from 'stream';\nimport { PromptTemplate } from '@langchain/core/prompts';\nimport ConvoLoader, { IChainCallOutput } from '../convo/ConvoLoader';\nimport { BedrockChat } from '@langchain/community/chat_models/bedrock/web';\nimport { IterableReadableStream } from '@langchain/core/utils/stream';\nimport { ChainValues } from '@langchain/core/utils/types';\n\nimport { IContextToken } from '../../interfaces/IContextToken';\n\ninterface IPromptHyperParameters {\n    temperature: number,\n    top_k?: number,\n    top_p?: number,\n    [key: string]: number\n}\n\ninterface IRWSHistoryMessage { \n    content: string, creator: string \n}\n\ninterface ILLMChunk {\n    content: string\n    status: string\n }\n\ninterface IPromptParams {\n    hyperParameters?: IPromptHyperParameters;\n    input?: string;\n    modelId: string;\n    modelType: string;\n}\n\ninterface IPromptEnchantment {\n    enhancementId: string,\n    enhancementName: string,\n    enhancementParams: any,\n    input: string\n    output: string\n}\n\ntype IPromptSender = (prompt: RWSPrompt) => Promise<void>;\n\ninterface IRWSPromptRequestExecutor {\n    promptRequest: (prompt: RWSPrompt, contextToken?: IContextToken | null, intruderPrompt?: string | null, debugVars?: any) => Promise<RWSPrompt>\n}\n\n\ninterface IRWSSinglePromptRequestExecutor {\n    singlePromptRequest: (prompt: RWSPrompt, contextToken?: IContextToken | null, intruderPrompt?: string | null, ensureJson?: boolean, debugVars?: any) => Promise<RWSPrompt>\n}\n\n\ninterface IRWSPromptStreamExecutor {\n    promptStream: (prompt: RWSPrompt, read: (chunk: ILLMChunk) => void, end: () => void, debugVars?: any) => Promise<RWSPrompt>\n}\n\ninterface IRWSPromptJSON {\n    input: string;\n    enhancedInput: IPromptEnchantment[];\n    sentInput: string;\n    originalInput: string;\n    output: string;\n    modelId: string;\n    modelType: string;\n    multiTemplate: PromptTemplate;\n    convo: { id: string };\n    hyperParameters: IPromptHyperParameters;\n    created_at: string;\n    var_storage: any;\n}\n\ntype ChainStreamType = AsyncGenerator<IterableReadableStream<ChainValues>>;\n\nclass RWSPrompt {\n    public _stream: ChainStreamType;\n    private input: string = '';\n    private enhancedInput: IPromptEnchantment[];\n    private sentInput: string = '';\n    private originalInput: string = '';\n    private output: string = '';\n    private modelId: string;\n    private modelType: string;\n    private multiTemplate: PromptTemplate;\n    private convo: ConvoLoader<any>;\n    private hyperParameters: IPromptHyperParameters;\n    private created_at: Date;\n\n    private varStorage: any = {};\n\n    private onStream = (chunk: string) => {\n\n    };\n\n    constructor(params: IPromptParams){\n        this.input = params.input;\n        this.originalInput = params.input;\n        this.hyperParameters = params.hyperParameters;\n        this.modelId = params.modelId;\n        this.modelType = params.modelType;\n\n        this.created_at = new Date();\n    }\n\n    listen(source: string, stream: boolean = true): RWSPrompt\n    {              \n        this.output = '';\n\n        if (!stream) {\n            this.output = source;\n        } else {           \n            this.output += source;\n            this.onStream(source);            \n        }\n        \n        return this;\n    }   \n\n    setStreamCallback(callback: (chunk: string) => void): void\n    {\n        this.onStream = callback;\n    }\n\n    addEnchantment(enchantment: IPromptEnchantment): void\n    {\n        this.enhancedInput.push(enchantment);\n        this.input = enchantment.input;        \n    }\n\n    getEnchantedInput(): string | null\n    {\n        return this.enhancedInput[this.enhancedInput.length - 1].output;\n    }\n\n    getModelId(): string\n    {\n        return this.modelId;\n    }\n\n    readSentInput(): string\n    {\n        return this.sentInput;\n    }\n\n    readInput(): string\n    {\n        return this.input;\n    }\n\n    \n    readBaseInput(): string\n    {\n        return this.originalInput;\n    }    \n\n    setBaseInput(input: string): RWSPrompt\n    {\n        this.originalInput = input;\n        \n        return this;\n    }\n\n    injestOutput(content: string): RWSPrompt\n    {\n        this.output = content;\n\n        return this;\n    }\n\n    readOutput(): string\n    {\n        return this.output;\n    }\n\n    getHyperParameters<T extends IPromptHyperParameters>(base: any = null): T\n    {        \n        if(base){\n            this.hyperParameters = {...base, ...this.hyperParameters};\n        }\n\n        return this.hyperParameters as T;\n    }\n\n    getHyperParameter<T>(key: keyof IPromptHyperParameters): T\n    {        \n        if(!this.hyperParameters[key]){\n            return null;\n        }\n\n        return this.hyperParameters[key] as T;\n    }\n\n    setHyperParameter(key: string, value: any): RWSPrompt\n    {        \n        this.hyperParameters[key] = value;\n        \n        return this;\n    }\n    \n    setHyperParameters(value: any): RWSPrompt\n    {        \n        this.hyperParameters = value;\n        \n        return this;\n    }\n\n    setMultiTemplate(template: PromptTemplate): RWSPrompt\n    {\n        this.multiTemplate = template;\n        return this;\n    }\n\n    getMultiTemplate(): PromptTemplate\n    {\n        return this.multiTemplate;\n    }\n\n    setConvo(convo: ConvoLoader<BedrockChat>): RWSPrompt\n    {\n        this.convo = convo.setPrompt(this);        \n        \n        return this;\n    }\n\n    getConvo<T extends BedrockChat>(): ConvoLoader<T>\n    {\n        return this.convo;\n    }\n\n    replacePromptVar(key: string, val: string)\n    {\n\n    }\n\n    getModelMetadata(): [string, string]\n    {\n        return [this.modelType, this.modelId];\n    }\n\n    async requestWith(executor: IRWSPromptRequestExecutor, intruderPrompt: string = null, debugVars: any = {}): Promise<void>\n    {\n        this.sentInput = this.input;\n        const returnedRWS = await executor.promptRequest(this, null, intruderPrompt, debugVars);\n        this.output = returnedRWS.readOutput();        \n    }\n\n    async singleRequestWith(executor: IRWSSinglePromptRequestExecutor, intruderPrompt: string = null, ensureJson: boolean = false): Promise<void>\n    {        \n        await executor.singlePromptRequest(this, null, intruderPrompt, ensureJson);\n        this.sentInput = this.input;\n    }\n\n    async streamWith(executor: IRWSPromptStreamExecutor, read: (chunk: ILLMChunk) => void, end: () => void = () => {}, debugVars: any = {}): Promise<RWSPrompt>\n    {        \n        this.sentInput = this.input;\n        return executor.promptStream(this, read, end, debugVars);\n    }\n\n    setInput(content: string): RWSPrompt\n    {\n        this.input = content;\n        return this;\n    }\n\n    getVar<T>(key: string): T\n    {\n        return Object.keys(this.varStorage).includes(key) ? this.varStorage[key] : null;\n    }\n\n    setVar<T>(key: string, val: T): RWSPrompt {\n        this.varStorage[key] = val;\n\n        return this;\n    } \n\n    async _oldreadStream(stream: Readable, react: (chunk: string) => void): Promise<void>    \n    {        \n        let first = true;\n        const chunks: string[] = []; // Replace 'any' with the actual type of your chunks\n       \n        for await (const event of stream) {            \n            // Assuming 'event' has a specific structure. Adjust according to actual event structure.\n            if ('chunk' in event && event.chunk.bytes) {\n                const chunk = JSON.parse(Buffer.from(event.chunk.bytes).toString('utf-8'));\n                if(first){\n                    console.log('chunk', chunk);\n                    first = false;\n                }\n\n                react(chunk.completion);\n\n                chunks.push(chunk.completion || chunk.generation ); // Use the actual property of 'chunk' you're interested in\n            } else if (\n                'internalServerException' in event ||\n                'modelStreamErrorException' in event ||\n                'throttlingException' in event ||\n                'validationException' in event\n            ) {\n                console.error(event);\n                break;\n            }            \n        }        \n    }\n\n    private async isChainStreamType(source: any): Promise<boolean> {\n        if (source && typeof source[Symbol.asyncIterator] === 'function') {\n            const asyncIterator = source[Symbol.asyncIterator]();\n            if (typeof asyncIterator.next === 'function' && \n                typeof asyncIterator.throw === 'function' && \n                typeof asyncIterator.return === 'function') {\n                try {\n                    // Optionally check if the next method yields a value of the expected type\n                    const { value, done } = await asyncIterator.next();\n                    return !done && value instanceof ReadableStream; // or whatever check makes sense for IterableReadableStream<ChainValues>\n                } catch (error) {\n                    // Handle or ignore error\n                }\n            }\n        }\n        return false;\n    }\n\n    async  readStreamAsText(readableStream: ReadableStream, callback: (txt: string) => void) {\n        const reader = readableStream.getReader();\n                \n        let readResult: any;\n\n        // Continuously read from the stream\n        while (!(readResult = await reader.read()).done) {\n            \n            if (readResult.value && readResult.value.response) {\n                // Emit each chunk text as it's read\n                callback(readResult.value.response);\n            }          \n        }\n        \n    }\n\n    addHistory(messages: IRWSHistoryMessage[], historyPrompt: string, callback?: (messages: IRWSHistoryMessage[], prompt: string) => void){\n        const prompt = `\n            ${messages.map(message => `\n                ${message.creator}: ${message.content}\n            `).join('\\n\\n')}\n            ${historyPrompt}\n        ` ;\n\n        if(callback){\n            callback(messages, prompt);\n        }else{\n            this.input = prompt + this.input;\n        }\n    }\n\n    toJSON(): IRWSPromptJSON\n    {\n        return {\n            input: this.input,            \n            enhancedInput: this.enhancedInput,\n            sentInput: this.sentInput,\n            originalInput: this.originalInput,\n            output: this.output,\n            modelId: this.modelId,\n            modelType: this.modelType,\n            multiTemplate: this.multiTemplate,            \n            convo: {\n                id: this.convo.getId()\n            },\n            hyperParameters: this.hyperParameters,\n            var_storage: this.varStorage,\n            created_at: this.created_at.toISOString()\n        };\n    }\n}\n\nexport default RWSPrompt;\n\nexport { \n    IPromptSender, \n    IPromptEnchantment, \n    IPromptParams, \n    IPromptHyperParameters, \n    IRWSPromptRequestExecutor, \n    IRWSPromptStreamExecutor, \n    IRWSSinglePromptRequestExecutor, \n    IRWSPromptJSON, \n    IChainCallOutput, \n    ChainStreamType, \n    ILLMChunk \n};","import RWSModel, { TrackType as RWSTrackType } from '../_model';\n\nexport default class TimeSeriesModel<ChildClass> extends RWSModel<TimeSeriesModel<ChildClass>>{\n    @RWSTrackType(Number)\n        value: number;\n\n    @RWSTrackType(Date)\n        timestamp: Date;\n    \n    @RWSTrackType(Object)\n        params: any;\n\n    constructor(data?: any) {    \n        super(data);\n\n        if(!this.timestamp) {\n            this.timestamp = new Date();\n        }\n    }\n}","import 'reflect-metadata';\n\ntype RequestMethodType = 'GET' | 'POST' | 'PUT' | 'DELETE';\n\ninterface IHTTProuteParams {\n    responseType: string\n}\n\ninterface IHTTProuteOpts {\n    name: string;\n    method: RequestMethodType;\n    params?: IHTTProuteParams\n}\n  \nfunction Route(name: string, method: RequestMethodType = 'GET', params: IHTTProuteParams = { responseType: 'json' }) {\n    const metaOpts: IHTTProuteOpts = {name, method, params};\n\n    return function(target: any, key: string) {          \n        Reflect.defineMetadata(`Route:${key}`, metaOpts, target);\n    };\n}\n\nexport default Route;\nexport {IHTTProuteOpts, RequestMethodType, IHTTProuteParams};","import Route from './Route';\n\nexport {\n    Route\n};","import TheService from './_service';\nimport ConsoleService from './ConsoleService';\nimport AWS from 'aws-sdk';\nimport AWSService from './AWSService';\nimport LambdaService from './LambdaService';\nimport VPCService from './VPCService';\n\nconst {  error, rwsLog } = ConsoleService;\n\nclass APIGatewayService extends TheService {\n    private region: string;    \n\n    constructor() {\n        super();\n\n        this.region = AWSService.getRegion();\n    }\n\n    async findApiGateway(gatewayName: string): Promise<AWS.APIGateway.RestApi | null> {\n        let theApi: AWS.APIGateway.RestApi = null;\n        const apis = await AWSService.getAPIGateway().getRestApis().promise();\n        for (const api of apis.items) {\n            if (api.name === gatewayName + '-API') {\n                theApi = api;\n                break;\n            }\n        }\n\n        return theApi;\n    }\n\n    async deleteApiGateway(apiId: string): Promise<void> {        \n        await AWSService.getAPIGateway().deleteRestApi({ restApiId: apiId }).promise();        \n        error('Deleted API Gateway: '+ apiId);\n    }\n\n    async createApiGateway(gatewayName: string): Promise<string> {\n\n        const currentGateway: AWS.APIGateway.RestApi | null = await this.findApiGateway(gatewayName);\n\n        let restApiId: string = null;\n\n        if(!currentGateway){\n            const params: AWS.APIGateway.CreateRestApiRequest = {\n                name: gatewayName + '-API',\n                description: `API Gateway for ${gatewayName}`,\n                endpointConfiguration: {\n                    types: ['REGIONAL']\n                }\n            };\n\n            try {\n                const response = await AWSService.getAPIGateway().createRestApi(params).promise();\n                restApiId =  response.id || null;\n            } catch (err) {\n                error('Error creating API Gateway:', err);\n                throw err;\n            }\n        } else {\n            restApiId = currentGateway.id;\n        }\n\n        return restApiId;\n    }\n\n    async createResource(restApiId: string, resourceLabel: string): Promise<AWS.APIGateway.Resource>\n    {\n        const resources = await AWSService.getAPIGateway().getResources({ restApiId: restApiId }).promise();\n        const rootResource = resources.items.find(r => r.path === '/');\n\n        // Create a new resource under root (if it doesn't exist)\n        let resource;\n        const resourceName = resourceLabel + '-ENDPOINT';\n\n        for (const res of resources.items) {\n            if (res.pathPart === resourceName) {\n                resource = res;\n                break;\n            }\n        }\n        if (!resource) {\n            resource = await AWSService.getAPIGateway().createResource({\n                restApiId: restApiId,\n                parentId: rootResource.id,\n                pathPart: resourceName\n            }).promise();\n        }\n\n        return resource;\n    }\n\n    async createMethod(restApiId:  string, resource: AWS.APIGateway.Resource, httpMethod: string = 'GET'): Promise<AWS.APIGateway.Method>\n    {        \n        return await AWSService.getAPIGateway().putMethod({\n            restApiId: restApiId,\n            resourceId: resource.id,\n            httpMethod: httpMethod,\n            authorizationType: 'NONE', // Change this if you want to use an authorizer\n            apiKeyRequired: false\n        }).promise();\n    }    \n\n    async associateNATGatewayWithLambda(lambdaFunctionName: string): Promise<void> {\n        rwsLog(`Creating NAT Gateway for \"${lambdaFunctionName}\" lambda function`);\n\n        const lambdaConfig: AWS.Lambda.FunctionConfiguration = {...(await LambdaService.getLambdaFunction(lambdaFunctionName)).Configuration};\n        const privateSubnetId = lambdaConfig.VpcConfig.SubnetIds[0];\n    \n        // const publicSubnet = await VPCService.createPublicSubnet(lambdaConfig.VpcConfig.VpcId, 20);    \n        // const publicSubnetId = publicSubnet.Subnet.SubnetId;\n\n        try{            \n\n            const eip = await AWSService.getEC2().allocateAddress({}).promise();\n\n            if (!eip.AllocationId) {\n                throw new Error('Failed to allocate Elastic IP.');\n            }\n\n            const natGateway = await AWSService.getEC2().createNatGateway({                \n                SubnetId: privateSubnetId,\n                AllocationId: eip.AllocationId\n            }).promise();    \n\n\n            const routeTable = await VPCService.getDefaultRouteTable(lambdaConfig.VpcConfig.VpcId);\n\n            if(!routeTable){\n                throw new Error('No route table exists.');\n            }\n\n            await VPCService.waitForNatGatewayAvailable(natGateway.NatGateway.NatGatewayId);\n\n            await AWSService.getEC2().createRoute({\n                RouteTableId: routeTable.RouteTableId,\n                DestinationCidrBlock: '0.0.0.0/0',\n                NatGatewayId: natGateway.NatGateway.NatGatewayId\n            }).promise();\n\n            rwsLog('Lambda function associated with NAT Gateway successfully.');\n\n        } catch(e: Error | any){\n            error(e.code, e.message);\n        }       \n    }\n}\n\nexport default APIGatewayService.getSingleton();","import TheService from './_service';\n\nimport AppConfigService from './AppConfigService';\nimport ConsoleService from './ConsoleService';\n\nimport AWS from 'aws-sdk';\n\n\nconst { log, error } = ConsoleService;\n\n\nclass AWSService extends TheService {\n    private region: string;\n\n    private s3: AWS.S3;\n    private efs: AWS.EFS;\n    private lambda: AWS.Lambda;\n    private ec2: AWS.EC2;\n    private iam: AWS.IAM;\n    private apiGateway: AWS.APIGateway;\n    private cloudWatch: AWS.CloudWatchLogs;\n\n    constructor() {\n        super();        \n    }\n\n    _initApis(region?: string): void\n    {        \n        if(!region){\n            this.region = AppConfigService().get('aws_lambda_region');\n        }else{\n            this.region = region;\n        }\n\n        // console.log(region,this.s3, this.region)\n\n        if(!this.s3 && this.region){\n            this.s3 = new AWS.S3({\n                region: this.region,\n                credentials: {\n                    accessKeyId: AppConfigService().get('aws_access_key'),\n                    secretAccessKey: AppConfigService().get('aws_secret_key'),\n                }\n            });\n        }\n\n        if (!this.apiGateway && this.region) {\n            this.apiGateway = new AWS.APIGateway({\n                region: this.region,\n                credentials: {\n                    accessKeyId: AppConfigService().get('aws_access_key'),\n                    secretAccessKey: AppConfigService().get('aws_secret_key'),\n                }\n            });\n        }\n\n        if(!this.iam && this.region){\n            this.iam = new AWS.IAM({\n                region: this.region,\n                credentials: {\n                    accessKeyId: AppConfigService().get('aws_access_key'),\n                    secretAccessKey: AppConfigService().get('aws_secret_key'),\n                }\n            });\n        }\n\n        if(!this.efs && this.region){\n            this.efs = new AWS.EFS({\n                region: this.region,\n                credentials: {\n                    accessKeyId: AppConfigService().get('aws_access_key'),\n                    secretAccessKey: AppConfigService().get('aws_secret_key'),\n                }\n            });\n        }\n\n        if(!this.ec2 && this.region){\n            this.ec2 = new AWS.EC2({\n                region: AppConfigService().get('aws_lambda_region'),\n                credentials: {\n                    accessKeyId: AppConfigService().get('aws_access_key'),\n                    secretAccessKey: AppConfigService().get('aws_secret_key'),\n                }\n            });\n        }\n\n        \n        if(!this.lambda && this.region){\n            this.lambda = new AWS.Lambda({\n                region: this.region,\n                credentials: {\n                    accessKeyId: AppConfigService().get('aws_access_key'),\n                    secretAccessKey: AppConfigService().get('aws_secret_key'),\n                }\n            });\n        }\n\n        if(!this.cloudWatch && this.region){\n            this.cloudWatch = new AWS.CloudWatchLogs({\n                region: this.region,\n                credentials: {\n                    accessKeyId: AppConfigService().get('aws_access_key'),\n                    secretAccessKey: AppConfigService().get('aws_secret_key'),\n                }\n            });\n        }\n    }                 \n\n    async checkForRolePermissions(roleARN: string, permissions: string[]): Promise<{ OK: boolean, policies: string[] }>\n    {            \n        const {OK, policies} = await this.firePermissionCheck(roleARN, permissions);\n\n        return {\n            OK,\n            policies\n        };\n    }\n\n    private async firePermissionCheck(roleARN: string, permissions: string[])\n    {\n        const params = {\n            PolicySourceArn: roleARN, // Replace with your IAM role ARN\n            ActionNames: permissions\n        };\n\n        const policies: string[] = [];\n        let allowed = true;\n\n        try {\n            const data = await this.getIAM().simulatePrincipalPolicy(params).promise();\n            for (const result of data.EvaluationResults) {\n                if(result.EvalDecision !== 'allowed'){\n                    allowed = false;\n                    policies.push(result.EvalActionName);\n                }\n            }        \n        } catch (err) {\n            error('Permission check error:');\n            log(err);\n            allowed = false;\n        }\n\n        return {\n            OK: allowed,\n            policies: policies\n        };\n    }\n\n    getS3(region?: string): AWS.S3 \n    {        \n        this._initApis(region);\n\n        return this.s3;\n    }\n\n    getEC2(region?: string): AWS.EC2 \n    {\n        this._initApis(region);\n\n        return this.ec2;\n    }\n\n    getEFS(region?: string): AWS.EFS \n    {   \n        this._initApis(region);\n\n        return this.efs;\n    }\n\n    getLambda(region?: string): AWS.Lambda\n    {   \n        this._initApis(region);\n\n        return this.lambda;\n    }\n\n    getRegion(region?: string): string \n    {   \n        this._initApis(region);\n\n        return this.region;\n    }\n\n    getIAM(region?: string): AWS.IAM \n    {   \n        this._initApis(region);\n\n        return this.iam;\n    }  \n    \n    getAPIGateway(region?: string): AWS.APIGateway \n    {   \n        this._initApis(region);\n\n        return this.apiGateway;\n    }  \n\n    getCloudWatch(region?: string): AWS.CloudWatchLogs\n    {\n        this._initApis(region);\n\n        return this.cloudWatch;\n    }\n}\n\nexport default AWSService.getSingleton();\nexport {AWSService};","import TheService from './_service';\nimport IAppConfig from '../interfaces/IAppConfig';\n\nconst AppDefaultConfig: IAppConfig = {\n    mongo_url: null,\n    mongo_db: null,\n    port: null,        \n    ws_port: null,        \n    test_port: null,\n    test_ws_port: null,\n    domain: null,\n    ssl_cert: null,\n    ssl_key: null,\n    secret_key: null,\n    user_class: null,\n    user_models: [],\n    controller_list: [],\n    ws_routes: {},\n    http_routes: [],\n    commands: [],\n    aws_lambda_region: null,\n    aws_access_key: null,\n    aws_secret_key: null,\n    aws_lambda_role: null,\n    aws_lambda_bucket: null,\n    pub_dir: null\n};\n\nclass AppConfigService extends TheService{\n    private _custom_data: {\n    [key: string]: any\n  } = {};\n  \n    private data: IAppConfig; // Add type assertion here  \n    private cfgString: string;\n\n    constructor(cfg: IAppConfig) {\n        super();    \n        this.data = cfg;\n    }    \n    \n    getData(): IAppConfig\n    {\n        return this.data;\n    }\n\n    public get(key: keyof IAppConfig | string): any\n    {     \n        if(key in this.data && this.data[key as keyof IAppConfig] !== null){\n            return this.data[key as keyof IAppConfig];\n        }\n    \n        if(key in this._custom_data){\n            return this._custom_data[key];\n        }\n\n        return null;\n    }\n\n    public set(key: string, val: any): void\n    {\n        this._custom_data[key] = val;\n    }\n\n    public reloadConfig(cfgString: string): AppConfigService \n    {        \n        const cfg: () => IAppConfig = (require(cfgString)).defaults; \n        this.data = cfg();\n\n        return this;\n    }\n\n    public static getConfigSingleton<T extends new (...args: any[]) => TheService>(this: T, cfg?: IAppConfig): AppConfigService\n    {\n        const className = this.name;\n        const instanceExists = TheService._instances[className];\n    \n        if (cfg) {                \n            TheService._instances[className] = new this(cfg);        \n        }else if(!instanceExists && !cfg){\n            TheService._instances[className] = new this(AppDefaultConfig);           \n        }\n\n        return TheService._instances[className] as AppConfigService;\n    }  \n}\n\nexport default (cfg?: IAppConfig): AppConfigService => AppConfigService.getConfigSingleton(cfg);\nexport { IAppConfig, AppConfigService };","import getConfigService from './AppConfigService';\nimport ConsoleService from './ConsoleService';\nimport jwt from 'jsonwebtoken';\nimport TheService from './_service';\nimport IAuthUser from '../interfaces/IAuthUser';\nimport HTTP, { ServerResponse } from 'http';\nimport { Error403 } from '../errors';\nimport IDbUser from '../interfaces/IDbUser';\nimport Model from '../models/_model';\n\ntype UserListManager = {\n    getList: () => {[clientId: string]: Partial<IDbUser>}\n    get: (socketId: string) => Partial<IDbUser> | null\n    set: (socketId: string, val: IAuthUser) => void\n    getToken: (socketId: string) => string | null\n    setToken: (socketId: string, val: string) => void\n    getTokenList: () => {[socketId: string]: string;}\n    disconnectClient: (socketId: string) => void\n}\n\nconst _DEFAULTS_USER_LIST_MANAGER = {\n    getList: () => { return {} },\n    get: (socketId: string): IDbUser | null => null,\n    set: (socketId: string, val: IAuthUser) => {},\n    getToken: (socketId: string): string | null => null,\n    setToken: (socketId: string, val: string) => {},\n    getTokenList: () => { return {} },\n    disconnectClient: (socketId: string) => {}\n}\n\n/**\n * @notExported\n */\nclass AuthService extends TheService{\n    private user: Partial<IDbUser>\n\n    constructor() {\n        super();\n    }\n\n    async authenticate(clientId: string, jwt_token: string | null = null, userListManager: UserListManager = _DEFAULTS_USER_LIST_MANAGER): Promise<boolean | null>\n    {\n        if(jwt_token){\n            jwt_token =  jwt_token.replace('Bearer ', '');            \n        }\n\n        const UserClass = await getConfigService().get('user_class');  \n\n        if(!jwt_token){                \n            return null;         \n        }        \n\n        if(!userListManager.get(clientId)){\n            try{\n                const userClass = await this.authorize<typeof UserClass>(jwt_token, UserClass);\n                this.setUser(userClass);\n\n                userListManager.set(clientId, userClass);   \n\n                if(!userListManager.getToken(clientId)){    \n                    userListManager.setToken(clientId, jwt_token);\n                }\n                \n                return true;\n            } catch(e: Error | any){\n                ConsoleService.error('RWS AUTH ERROR', e.message);\n\n                return false;\n            }\n        }\n\n        if(!userListManager.get(clientId)){\n            userListManager.disconnectClient(clientId);    \n            return false;\n        }      \n    }\n    \n    setUser<IUser extends { db: Model<any>, loadDbUser: () => Promise<void> }>(user: IUser): AuthService \n    {\n        this.user = user;\n\n        return this;\n    }\n\n    getUser<IUser extends { db: Model<any>, loadDbUser: () => Promise<void> }>(): IUser\n    {\n        return this.user as IUser;\n    }\n\n    async authorize<IUser extends { db: Model<any>, loadDbUser: () => Promise<void> }>(token: string, constructor: new (data: any) => IUser ): Promise<IUser> {\n        const secretKey: string = getConfigService().get('secret_key');\n            \n        return await new Promise((approve, reject) => {\n            jwt.verify(token, secretKey, (error, tokenData) => {\n                if (error) {                        \n                    reject(error);\n                    return;\n                }\n                \n                const theUser: IUser = new constructor(tokenData);\n            \n                if(this.getUser()){\n                    approve(this.getUser() as IUser);\n                    return;\n                }else{\n                    theUser.loadDbUser().then(() => {                    \n                        ConsoleService.rwsLog('RWS AUTH LOG', ConsoleService.color().green('Loaded RWS User Model'), theUser.db.id);\n                        \n                        approve(theUser);\n                    });\n                }                            \n            });\n        });\n    }\n}\n\nexport default AuthService.getSingleton();\nexport { AuthService, _DEFAULTS_USER_LIST_MANAGER };","import { DescribeLogStreamsRequest, GetLogEventsRequest, GetLogEventsResponse, OutputLogEvent } from 'aws-sdk/clients/cloudwatchlogs';\nimport AWSService from './AWSService';\nimport TheService from './_service';\nimport ConsoleService from './ConsoleService';\nconst { log, error, color } = ConsoleService;\n\nconst _MS = 1000;\n\nclass CloudWatchService extends TheService {\n    private nextForwardToken?: string;  \n\n    public async printLogsForLambda(lambdaFunctionName: string, startTime?: number, endTime?: number, terminateTimeout: number = 30 * _MS): Promise<{ core: NodeJS.Timeout}> {\n        const cloudWatchLogs = AWSService.getCloudWatch();\n        const logGroupName = `/aws/lambda/${lambdaFunctionName}`;  // Standard log group name format for Lambda\n\n        let logStreamName: string;\n        const logsTimeout: { core: NodeJS.Timeout } = { core: null };\n\n        // Get the latest log stream\n        const describeParams: DescribeLogStreamsRequest = {\n            logGroupName,\n            orderBy: 'LastEventTime',\n            descending: true,\n            limit: 1\n        };\n\n        try {\n            const describeResult = await cloudWatchLogs.describeLogStreams(describeParams).promise();\n            if (describeResult.logStreams && describeResult.logStreams[0]) {\n                logStreamName = describeResult.logStreams[0].logStreamName!;\n            } else {\n                error('No log streams found for the specified Lambda function.');\n                return;\n            }\n        } catch (err) {\n            error('An error occurred while describing log streams:', err);\n            return;\n        }\n\n        let terminateTimer: NodeJS.Timeout | null = null;\n\n        const getLogs = async (nextToken?: string): Promise<void> => {\n        // const lambdaDetails = await LambdaService.getLambdaFunction(lambdaFunctionName);     \n            const params: GetLogEventsRequest = {\n                logGroupName,\n                logStreamName,\n                startTime,\n                endTime,\n                nextToken,\n                limit: 100\n            };\n\n            try {\n                const data: GetLogEventsResponse = await cloudWatchLogs.getLogEvents(params).promise();\n                if (data.events && data.events.length > 0) {\n                    this.printLogs(data.events);\n    \n                    // Reset the termination timer since we've received new logs\n                    if (terminateTimer !== null) {\n                        clearTimeout(terminateTimer);\n                    }\n    \n                    terminateTimer = setTimeout(() => {\n                        log('Terminating log fetch due to timeout.');\n                        clearTimeout(terminateTimer!);\n                        return;\n                    }, terminateTimeout);  // terminateTimeout is the time in milliseconds you want to wait\n                }\n    \n                this.nextForwardToken = data.nextForwardToken;\n    \n                // Recursive call to keep polling for new logs\n                logsTimeout.core = setTimeout(() => getLogs(this.nextForwardToken), 5000);  //\n            } catch (err) {\n                error('An error occurred while fetching logs:', err);\n            }\n        };\n\n        getLogs();\n\n        return logsTimeout;\n    }\n\n    private printLogs(events: OutputLogEvent[]): void {\n        events.forEach(event => {\n            log(color().blue('[AWS CloudWatch] ') + `{${new Date(event.timestamp!).toISOString()}} : ${event.message}`);\n        });\n    }\n}\n\nexport default CloudWatchService.getSingleton();\nexport { CloudWatchService };","import TheService from './_service';\nimport chalk, { Chalk } from 'chalk';\nimport pino, { Logger as PinoLogger } from 'pino';\nimport pinoPretty from 'pino-pretty'; // Import pino-pretty\n\ninterface IJSONColors {\n  [codeLement: string]: keyof Chalk\n}\n\nclass ConsoleService extends TheService {\n    private isEnabled: boolean = true;\n    private originalLogMethods?: any = null;\n\n    constructor() {\n        super();\n\n        this.log = this.log.bind(this);\n        this.error = this.error.bind(this);\n        this.warn = this.warn.bind(this);\n\n        this.isEnabled = true;\n        this.originalLogMethods = this.getOriginalLogFunctions();\n    }\n\n\n    color(): Chalk {\n        return chalk;\n    }\n\n    log(...obj: any[]): void {\n        if (!this.isEnabled) {\n            return;\n        }\n\n        const _self = this;\n\n        let typeBucket: any[] = [];\n        let lastType: string = null;\n\n        obj.forEach((elem: any, index: number) => {\n            const elemType = typeof elem;\n            const isLast: boolean = index == obj.length - 1;\n\n            if (((lastType === null && obj.length === 1) || (lastType !== null && lastType !== elemType)) || isLast) {\n                if (lastType === 'string') {\n                    console.log(typeBucket.join(' '));\n                } else {\n\n                    typeBucket.forEach((bucketElement) => {\n                        _self.prettyPrintObject(bucketElement);\n                    });\n                }\n\n                typeBucket = [];\n\n                if (isLast) {\n                    if (elemType === 'string') {\n                        console.log(elem);\n                    } else {\n                        _self.prettyPrintObject(elem);\n                    }\n                    return;\n                }\n            }\n\n            typeBucket.push(elem);\n\n            lastType = elemType; // Update the lastType for the next iteration\n        });\n    } \n\n\n    colorObject(obj: any): string {\n        const _JSON_COLORS: IJSONColors = {\n            'keys': 'green',\n            'objectValue': 'magenta',\n            'braces': 'blue',\n            'arrayBraces': 'yellow',\n            'colons': 'white', // Color for colons\n            'default': 'reset' // Default color to reset to default chalk color\n        };\n\n        const getCodeColor = (chalkKey: string, textValue: string): string => {\n            return (chalk as any)[chalkKey](textValue);\n        };\n\n        const objString = JSON.stringify(this.sanitizeObject(obj), null, 2);\n        const lines = objString.split('\\n');\n\n        const coloredLines: string[] = [];\n\n        for (const line of lines) {\n            const parts = line.split(/(\"[^\"]*\"\\s*:\\s*)|(\"[^\"]*\":\\s*)|([{}[\\],])/); // Split the line into parts around keys, colons, commas, braces, and brackets\n\n            // Process each part and colorize accordingly\n            for (let i = 0; i < parts.length; i++) {\n                const part = parts[i];\n                if (part !== undefined) {\n                    const trimmedPart = part.trim();\n                    if (trimmedPart === ':') {\n                    // This part is a colon, colorize it with white\n                        parts[i] = getCodeColor(_JSON_COLORS.colons, ':');\n                    } else if (trimmedPart === ',') {\n                    // This part is a comma, colorize it with white\n                        parts[i] = getCodeColor(_JSON_COLORS.colons, ',');\n                    } else if (trimmedPart === '[' || trimmedPart === ']') {\n                    // This part is a bracket, colorize it with the arrayBraces color\n                        parts[i] = getCodeColor(_JSON_COLORS.arrayBraces, part);\n                    } else if (i % 4 === 1) {\n                    // This part is a key, colorize it with the keys color\n                        const key = trimmedPart;\n                        if (key === ':') {\n                            parts[i] = getCodeColor(_JSON_COLORS.colons, key);\n                        } else {\n                            parts[i] = getCodeColor(_JSON_COLORS.keys, key);\n                        }\n                    } else if (i % 4 === 3) {\n                    // This part is a value, colorize it with objectValue\n                        const value = trimmedPart;\n                        parts[i] = getCodeColor(_JSON_COLORS.objectValue, value);\n                    }\n                }\n            }\n\n            coloredLines.push(parts.join('')); // Join and add the modified line to the result\n        }\n\n        return coloredLines.join('\\n'); // Join the colored lines and return as a single string\n    }\n\n\n\n    warn(...obj: any[]): void {\n        if (!this.isEnabled) {\n            return;\n        }\n\n        let intro = 'RWS CLI WARNING';\n\n        if(obj.length > 1 && typeof obj[0] === 'string'){\n            intro = obj[0];\n            obj = obj.filter((el: any, index: number) => index > 0);\n        }\n\n        obj = [chalk.yellow(`[${intro}]`), ...obj];\n\n        console.warn(...obj); \n    }\n\n    sanitizeObject(obj: any): any {\n        const sensitiveKeys = ['mongo_url', 'mongo_db', 'ssl_cert', 'ssl_key', 'secret_key', 'aws_access_key', 'aws_secret_key'];\n    \n        const sanitizedObj = { ...obj }; // Create a shallow copy of the object\n\n        for (const key of sensitiveKeys) {\n            if (sanitizedObj.hasOwnProperty(key)) {\n                sanitizedObj[key] = '<VALUE HIDDEN>';\n            }\n        }\n\n        return sanitizedObj;\n    }\n\n    getPino(): PinoLogger\n    {\n        return pino(pinoPretty());\n    }\n\n    prettyPrintObject(obj: any): void {\n        this.getPino().info(this.colorObject(this.sanitizeObject(obj)));\n    }\n\n    error(...obj: any[]): void {\n        if (!this.isEnabled) {\n            return;\n        }        \n\n        let intro = 'RWS CLI ERROR';\n\n        if(obj.length > 1 && typeof obj[0] === 'string'){\n            intro = obj[0];\n            obj = obj.filter((el: any, index: number) => index > 0);\n        }\n\n        obj = [chalk.red(`[${intro}]`), ...obj];\n\n        console.log(...obj);  \n    }\n\n    rwsLog(...obj: string[]): void \n    {    \n\n        let intro = 'RWS CLI ERROR';\n\n        if(obj.length > 1 && typeof obj[0] === 'string'){\n            intro = obj[0];\n            obj = obj.filter((el: any, index: number) => index > 0);\n        }\n\n        obj = [chalk.green(`[${intro}]`), ...obj];\n\n        console.log(...obj);  \n    }\n\n    stopLogging(): void {\n        this.isEnabled = false;\n        this.disableOriginalLogFunctions();\n    }\n\n    startLogging(): void {\n        this.isEnabled = true;\n        this.restoreOriginalLogFunctions();\n    }\n\n    private getOriginalLogFunctions = () => {\n        return {\n            log: console.log,\n            warn: console.warn,\n            error: console.error,\n        };\n    };\n\n    private disableOriginalLogFunctions = () => {\n        console.log = (...args: string[]) => { };\n        console.warn = (...args: string[]) => { };\n        console.error = (...args: string[]) => { };\n    };\n\n    private restoreOriginalLogFunctions = () => {\n        const originalF = this.originalLogMethods;\n\n        console.log = originalF.log;\n        console.warn = originalF.warn;\n        console.error = originalF.error;\n    };\n\n    updateLogLine(message: string) {\n        process.stdout.write('\\r' + message);\n    }\n\n  \n}\n\nexport default ConsoleService.getSingleton();\nexport {\n    ConsoleService\n};","import { PrismaClient } from '@prisma/client';\nimport { Collection, Db, MongoClient } from 'mongodb';\nimport ITimeSeries from '../models/interfaces/ITimeSeries';\nimport { IModel } from '../models/_model';\nimport getConfig from './AppConfigService';\nimport TheService from './_service';\nimport ConsoleService from './ConsoleService';\nimport { RWSError } from '../errors';\n\ninterface IDBClientCreate {\n  dbUrl?: string;\n  dbName?: string;\n}\n\nclass DBService extends TheService {\n    private client: PrismaClient;\n    private opts: IDBClientCreate = null;\n    private connected = false;\n\n    constructor(opts: IDBClientCreate = null){\n        super();   \n        this.opts = opts;\n    }\n\n    private connectToDB(opts: IDBClientCreate = null) {\n        if(opts){\n            this.opts = opts;\n        }else{\n            this.opts = {\n                dbUrl: getConfig().get('mongo_url'),        \n                dbName: getConfig().get('mongo_db'),\n            };\n        }\n\n        if(!this.opts.dbUrl){\n            ConsoleService.error('NO DB CFG');\n\n            return;\n        }    \n  \n        try{\n            this.client = new PrismaClient({ \n                datasources: {\n                    db: {\n                        url: this.opts.dbUrl\n                    },\n                },\n            });     \n\n            this.connected = true;\n        } catch (e: Error | any){            \n            ConsoleService.error('PRISMA CONNECTION ERROR', e);            \n            throw new RWSError(e, module.id + '::connectToDB');\n        }\n    }\n\n    private async createBaseMongoClient(): Promise<MongoClient>\n    {\n        const dbUrl = this.opts?.dbUrl || getConfig().get('mongo_url');\n        const client = new MongoClient(dbUrl);\n    \n        await client.connect();\n\n        return client;\n\n    }\n\n    private async createBaseMongoClientDB(): Promise<Db>\n    {\n        const dbName = this.opts?.dbName || getConfig().get('mongo_db');\n        const client = await this. createBaseMongoClient();\n        return client.db(dbName);\n    }\n\n    public async cloneDatabase(source: string, target: string): Promise<void> {\n        const client = await this.createBaseMongoClient();\n\n        // Source and target DB\n        const sourceDb = client.db(source);\n        const targetDb = client.db(target);\n\n        // Get all collections from source DB\n        const collections = await sourceDb.listCollections().toArray();\n\n        // Loop over all collections and copy them to the target DB\n        for (const collection of collections) {\n            const docs = await sourceDb.collection(collection.name).find({}).toArray();\n            await targetDb.collection(collection.name).insertMany(docs);\n        }\n\n        await client.close();\n    }\n\n    async watchCollection(collectionName: string, preRun: () => void): Promise<any>\n    {    \n        const db = await this.createBaseMongoClientDB();\n        const collection = db.collection(collectionName);\n\n        const changeStream = collection.watch();    \n        return new Promise((resolve) => {      \n            changeStream.on('change', (change) => {           \n                resolve(change);\n            });\n\n            preRun();\n        });   \n    }\n\n    async insert(data: any, collection: string, isTimeSeries: boolean = false) {\n    \n        let result: any = data;\n        // Insert time-series data outside of the transaction\n\n        if(isTimeSeries){\n            const db = await this.createBaseMongoClientDB();\n            const collectionHandler = db.collection(collection);\n      \n            const insert = await collectionHandler.insertOne(data);\n\n            result = await this.findOneBy(collection, { id: insert.insertedId.toString()  });\n            return result;\n        }\n\n        const prismaCollection = this.getCollectionHandler(collection);    \n\n        result = await prismaCollection.create({ data });\n\n        return await this.findOneBy(collection, { id: result.id });\n    }\n\n    async update(data: any, collection: string): Promise<IModel> \n    {\n        const model_id: string = data.id;    \n        delete data['id'];\n\n        const prismaCollection = this.getCollectionHandler(collection);\n\n        await prismaCollection.update({\n            where: {\n                id: model_id,\n            },\n            data: data,\n        });    \n\n        return await this.findOneBy(collection, { id: model_id });\n    }\n  \n\n    async findOneBy(collection: string, conditions: any, fields: string[] | null = null, ordering: { [fieldName: string]: string } = null): Promise<IModel|null>\n    {    \n        const params: any = { where: conditions };\n\n        if(fields){\n            params.select = {};\n            fields.forEach((fieldName: string) => {        \n                params.select[fieldName] = true;\n            });    \n        }\n\n        if(ordering){\n            params.orderBy = ordering;\n        }\n\n        return await this.getCollectionHandler(collection).findFirst(params);\n    }\n\n    async delete(collection: string, conditions: any): Promise<void>\n    {    \n        await this.getCollectionHandler(collection).deleteMany({ where: conditions });\n        return;\n    }\n\n    async findBy(collection: string, conditions: any, fields: string[] | null = null, ordering: { [fieldName: string]: string } = null): Promise<IModel[]>\n    {    \n        const params: any ={ where: conditions };\n\n        if(fields){\n            params.select = {};\n            fields.forEach((fieldName: string) => {        \n                params.select[fieldName] = true;\n            });    \n        }\n\n        if(ordering){\n            params.orderBy = ordering;\n        }\n\n        return await this.getCollectionHandler(collection).findMany(params);\n    }\n\n    async collectionExists(collection_name: string): Promise<boolean>\n    {\n        const dbUrl = this.opts?.dbUrl || getConfig().get('mongo_url');\n        const client = new MongoClient(dbUrl);\n\n        try {\n            await client.connect();    \n\n            const db = client.db('junctioned'); // Replace with your database name\n\n            const collections = await db.listCollections().toArray();\n            const existingCollectionNames = collections.map((collection) => collection.name);\n\n            return existingCollectionNames.includes(collection_name);\n        } catch (error) {\n            ConsoleService.error('Error connecting to MongoDB:', error);\n\n            throw error;\n        }    \n    }\n\n    async createTimeSeriesCollection(collection_name: string): Promise<Collection<ITimeSeries>>\n    {    \n        try {    \n            const db = await this.createBaseMongoClientDB();\n\n            // Create a time series collection\n            const options = {\n                timeseries: {\n                    timeField: 'timestamp', // Replace with your timestamp field\n                    metaField: 'params' // Replace with your metadata field\n                }\n            };\n\n            await db.createCollection(collection_name, options); // Replace with your collection name\n\n            return db.collection(collection_name);\n\n        } catch (error) {\n            ConsoleService.error('Error connecting to MongoDB:', error);\n\n            throw error;\n        }\n    }\n\n    private getCollectionHandler(collection: string): any \n    {    \n        if(!this.client || !this.connected){\n            this.connectToDB();\n        }\n\n        return (this.client[collection as keyof PrismaClient] as any);\n    }\n}\n\nexport default DBService.getSingleton();\nexport { DBService };","import TheService from './_service';\n\n\nimport ConsoleService from './ConsoleService';\nimport LambdaService from './LambdaService';\nimport AWSService from './AWSService';\nimport ProcessService from './ProcessService';\n\nimport path from 'path';\nimport AWS from 'aws-sdk';\nimport VPCService from './VPCService';\n\nconst { log, error, color, rwsLog } = ConsoleService;\n\nconst __STATE_WAIT_TIME = 3000; //ms\n\nclass EFSService extends TheService {\n    private region: string;\n\n    private s3: AWS.S3;\n    private efs: AWS.EFS;\n    private lambda: AWS.Lambda;\n    private ec2: AWS.EC2;\n\n    constructor() {\n        super();        \n    }\n\n    async getOrCreateEFS(functionName: string, vpcId: string): Promise<[string, string, boolean]> \n    {      \n        const response = await AWSService.getEFS().describeFileSystems({ CreationToken: functionName }).promise();\n    \n        if (response.FileSystems && response.FileSystems.length > 0) {\n            const fileSystemId = response.FileSystems[0].FileSystemId;\n            const accessPoints = await this.getAccessPoints(fileSystemId);\n\n            if(!accessPoints.length){\n                throw 'No acces point in EFS for RWS lambdas';\n            }\n\n            log(`${color().green('[RWS Cloud FS Service]')} EFS exists:`, {\n                efsId: fileSystemId,\n                apARN: accessPoints[0].AccessPointArn                \n            });\n\n            return [fileSystemId, accessPoints[0].AccessPointArn, true];\n        } else {\n            const params = {\n                CreationToken: functionName,\n                PerformanceMode: 'generalPurpose',\n            };\n    \n            try {\n                const response = await AWSService.getEFS().createFileSystem(params).promise();\n                await this.waitForEFS(response.FileSystemId);                \n                   \n                await this.waitForFileSystemMount(response.FileSystemId);                           \n                const [accessPointId, accessPointArn] = await this.createAccessPoint(response.FileSystemId);\n                await this.waitForAccessPoint(accessPointId);\n\n                const endpointId = await VPCService.createVPCEndpointIfNotExist(vpcId);\n                await VPCService.ensureRouteToVPCEndpoint(vpcId, endpointId);\n\n                log(`${color().green('[RWS Cloud FS Service]')} EFS Created:`, response);\n                return [response.FileSystemId, accessPointArn, false];\n            } catch (err) {\n                error('Error creating EFS:', err);\n                throw err;  // It's a good practice to throw the error so the caller knows something went wrong.\n            }\n        }\n    }\n\n    async deleteEFS(fileSystemId: string): Promise<void> {\n        try {\n            await AWSService.getEFS().deleteFileSystem({ FileSystemId: fileSystemId }).promise();\n            error(`EFS with ID ${fileSystemId} has been deleted.`);\n        } catch (err) {\n            error('Error while deleting EFS:');\n            log(err);\n            throw err;\n        }\n    }\n\n    async waitForEFS(fileSystemId: string)\n    {\n        let isAvailable = false;\n\n        log(`${color().yellowBright('[EFS Listener] awaiting EFS state change')}`);        \n        \n        while (!isAvailable) {\n            const mountResponse = await AWSService.getEFS().describeFileSystems({ FileSystemId: fileSystemId }).promise();\n\n            if (mountResponse.FileSystems && mountResponse.FileSystems.length && mountResponse.FileSystems[0].LifeCycleState === 'available') {\n                isAvailable = true;\n            } else {\n                log(`${color().yellowBright('[EFS Listener] .')}`);\n                await new Promise(resolve => setTimeout(resolve, __STATE_WAIT_TIME));  // wait for 5 seconds before checking again\n            }\n        }\n    }\n\n    sleep(ms: number): Promise<void> {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n    async waitForFileSystemMount(fileSystemId: string): Promise<boolean> {\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n            try {\n                log(`${color().yellowBright('[EFS Mount Listener] awaiting EFS mount change')}`);        \n\n                const response = await AWSService.getEFS().describeMountTargets({ FileSystemId: fileSystemId }).promise();\n\n                const isMounted = response.MountTargets.some(mountTarget => mountTarget.LifeCycleState === 'available');\n    \n                if (isMounted) {\n                    log(`${color().yellowBright('[EFS Mount Listener] DONE')}`);\n                    return true;\n                }else{\n                    log(`${color().yellowBright('[EFS Mount Listener] is during creation process...')}`);\n                }\n\n                log(`${color().yellowBright('[EFS Mount Listener] .')}`);\n\n                await ProcessService.sleep(__STATE_WAIT_TIME);\n    \n            } catch (error) {\n                console.error('Error while checking EFS mount status:', error);\n                throw error;\n            }\n        }\n    }\n\n    async waitForAccessPoint(accessPointId: string) {\n        let isAvailable = false;\n    \n        log(`${color().yellowBright('[EFS AP Listener] awaiting EFS access point change')}`, accessPointId);        \n    \n        while (!isAvailable) {\n            const accessPointResponse = await AWSService.getEFS().describeAccessPoints({ AccessPointId: accessPointId }).promise();\n    \n            if (accessPointResponse.AccessPoints && accessPointResponse.AccessPoints.length && accessPointResponse.AccessPoints[0].LifeCycleState === 'available') {\n                isAvailable = true;\n            } else {\n                log(`${color().yellowBright('[EFS AP Listener] .')}`);\n                await new Promise(resolve => setTimeout(resolve, 5000));  // wait for 5 seconds before checking again                \n            }\n        }\n    }\n    \n\n    generateClientToken(): string \n    {\n        return Date.now().toString() + Math.random().toString(36).substr(2, 5);\n    }\n\n    async getAccessPoints(fileSystemId: string): Promise<AWS.EFS.AccessPointDescriptions | null>\n    {\n        try {\n            const params = {\n                FileSystemId: fileSystemId  // specify the FileSystemId to filter access points for a specific EFS\n            };\n      \n            const response = await AWSService.getEFS().describeAccessPoints(params).promise();\n            if (response.AccessPoints && response.AccessPoints.length > 0) {\n                return response.AccessPoints;  // this will return an array of access points\n            } else {\n                log('No access points found for the specified EFS.');\n                return null;\n            }\n        } catch (err) {\n            error('Error getting access point:', error);\n            throw err;\n        }\n    }\n\n    async createAccessPoint(fileSystemId: string): Promise<[string, string]> \n    {\n        const clientToken = this.generateClientToken();  // Generate a unique client token\n\n        const params = {\n            FileSystemId: fileSystemId,\n            ClientToken: clientToken,  // Add the client token here\n            PosixUser: {\n                Uid: 1001,  // You can adjust these values as per your requirements.\n                Gid: 1001\n            },\n            RootDirectory: {\n                Path: '/mnt/efs',  // The path where Lambda will mount the EFS.\n                CreationInfo: {\n                    OwnerUid: 1001,\n                    OwnerGid: 1001,\n                    Permissions: '755'\n                }\n            }\n        };\n    \n        try {\n            const response = await AWSService.getEFS().createAccessPoint(params).promise();\n            log(`${color().green('[RWS Cloud FS Service]')} EFS AP created:`, response);\n\n            return [response.AccessPointId, response.AccessPointArn];\n        } catch (err) {\n            error('Error creating EFS access point:', err);\n            throw err;\n        }\n    }\n\n    async createMountTarget(fileSystemId: string, subnetId: string): Promise<string> \n    {\n        const params = {\n            FileSystemId: fileSystemId,\n            SubnetId: subnetId,\n        };\n\n        try {\n            const response = await AWSService.getEFS().createMountTarget(params).promise();\n            log(`${color().green('[RWS Cloud FS Service]')} EFS Mount Target created:`, response);\n\n            return response.MountTargetId;\n        } catch (error) {\n            console.error('Error creating Mount Target:', error);\n        }\n    }   \n\n    async uploadToEFS(baseFunctionName: string, efsId: string, modulesS3Key: string, s3Bucket: string, vpcId: string, subnetId: string): Promise<void>\n    {\n        const efsLoaderFunctionName = await this.processEFSLoader(vpcId, subnetId);\n\n        const params = {\n            functionName: `${baseFunctionName}`,\n            efsId,\n            modulesS3Key,\n            s3Bucket\n        };\n    \n        try {\n            log(`${color().green('[RWS Lambda Service]')} invoking EFS Loader as \"${efsLoaderFunctionName}\" lambda function for \"${baseFunctionName}\" with ${modulesS3Key} in ${s3Bucket} bucket.`);\n\n            const response = await LambdaService.invokeLambda(efsLoaderFunctionName, params);\n            rwsLog('RWS Lambda Service', color().yellowBright(`\"${efsLoaderFunctionName}\" lambda function response:`));\n            log(response);            \n            return;// JSON.parse(response.Response.Payload as string);\n        } catch (error) {\n            // await EFSService.deleteEFS(efsId);\n            console.error('Error invoking Lambda:', error);\n            throw error;\n        }\n    }\n\n    async processEFSLoader(vpcId: string, subnetId: string): Promise<string>\n    {\n        const executionDir = process.cwd();\n\n        const filePath: string = module.id;        \n        const cmdDir = filePath.replace('./', '').replace(/\\/[^/]*\\.ts$/, '');\n        const moduleDir = path.resolve(cmdDir, '..', '..', '..', '..');\n        const moduleCfgDir = `${executionDir}/node_modules/.rws`;\n\n        const _UNZIP_FUNCTION_NAME: string = 'efs-loader';\n\n        if(!(await LambdaService.functionExists('RWS-' + _UNZIP_FUNCTION_NAME))){\n            log(`${color().green('[RWS Lambda Service]')} creating EFS Loader as \"${_UNZIP_FUNCTION_NAME}\" lambda function.`, moduleDir);\n            const zipPath = await LambdaService.archiveLambda(`${moduleDir}/lambda-functions/efs-loader`, moduleCfgDir);\n\n            await LambdaService.deployLambda(_UNZIP_FUNCTION_NAME, zipPath, vpcId, subnetId, true);\n        }\n\n        return _UNZIP_FUNCTION_NAME;\n    }    \n\n    async deleteDir(): Promise<void>\n    {\n        \n    }\n}\n\nexport default EFSService.getSingleton();\nexport {\n    EFSService\n};","import TheService from './_service';\n\nimport getAppConfig from './AppConfigService';\nimport EFSService from './EFSService';\nimport ConsoleService from './ConsoleService';\nimport AWSService from './AWSService';\nimport ZipService from './ZipService';\nimport S3Service from './S3Service';\nimport APIGatewayService from './APIGatewayService';\n\nimport path from 'path';\nimport fs from 'fs';\nimport AWS from 'aws-sdk';\nimport UtilsService from './UtilsService';\nimport ProcessService from './ProcessService';\nimport VPCService from './VPCService';\n\n\nconst { log, error, color, rwsLog } = ConsoleService;\n\nconst MIN = 60; // 1MIN = 60s\n\n\ntype InvocationTypeType = 'RequestResponse' | 'Event' | 'DryDrun';\n\ninterface INPMPackage {\n  name: string\n  version: string\n  description?: string\n  author?: string\n  license?: string\n  type?: string\n\n  dependencies?: {    \n    [packageName: string]: string\n  }\n\n  deployConfig?: {\n    webLambda?: boolean\n    invocationType?: InvocationTypeType\n  }\n}\n\n\nclass LambdaService extends TheService {\n\n    private region: string;\n\n    constructor() {\n        super();\n    }\n\n    async archiveLambda(lambdaDirPath: string, moduleCfgDir: string, fullZip: boolean = false): Promise<string> {    \n        const lambdaDirName = lambdaDirPath.split('/').filter(Boolean).pop();\n        const lambdaPath = path.join(moduleCfgDir, 'lambda', `RWS-${lambdaDirName}-app.zip`);\n    \n        if (!fs.existsSync(path.join(moduleCfgDir, 'lambda'))) {\n            fs.mkdirSync(path.join(moduleCfgDir, 'lambda'));\n        }\n\n        // Create archives\n        const tasks: Promise<string>[] = [];\n    \n        if (fs.existsSync(lambdaPath)) {\n            fs.unlinkSync(lambdaPath);\n        }\n\n        // if(fs.existsSync(lambdaPath + '/package.json')){\n        //   await ProcessService.runShellCommand(`cd ${lambdaPath} && npm install`);\n        // }\n        const toolsFile = `${path.resolve(lambdaDirPath, '..')}/tools.js`;\n        const targetToolsFile = `${lambdaDirPath}/tools.js`;\n    \n        fs.copyFileSync(toolsFile, targetToolsFile);    \n\n        log(`${color().green('[RWS Lambda Service]')} archiving ${color().yellowBright(lambdaDirPath)} to:\\n ${color().yellowBright(lambdaPath)}`);\n        tasks.push(ZipService.createArchive(lambdaPath, lambdaDirPath, fullZip ? null : {\n            'ignore': ['node_modules/**/*']\n        }));       \n\n        await Promise.all(tasks);\n\n        fs.unlinkSync(targetToolsFile);\n\n        log(`${color().green('[RWS Lambda Service]')} ${color().yellowBright('ZIP package complete.')}`);\n\n        return lambdaPath;\n    }\n\n    determineLambdaPackagePaths(lambdaDirName: string, moduleCfgDir: string): [string, string] {\n        const modulesPath = path.join(moduleCfgDir, 'lambda', 'RWS-modules.zip');\n        const lambdaPath = path.join(moduleCfgDir, 'lambda', `lambda-${lambdaDirName}-app.zip`);\n        return [lambdaPath, modulesPath];\n    }\n\n    setRegion(region: string)\n    {\n        this.region = region;\n    }\n\n    async deployLambda(functionDirName: string, zipPath: string, vpcId: string, subnetId?: string, noEFS: boolean = false): Promise<any> {\n        this.region = getAppConfig().get('aws_lambda_region');\n\n        const zipFile = fs.readFileSync(zipPath);\n\n        try {\n\n            const s3BucketName = getAppConfig().get('aws_lambda_bucket');\n\n            await S3Service.bucketExists(s3BucketName);\n\n            const [ accessPointArn] = await EFSService.getOrCreateEFS('RWS_EFS', vpcId);   \n\n            log(`${color().green('[RWS Lambda Service]')} ${color().yellowBright('deploying lambda on ' + this.region)} using ${color().red(`S3://${s3BucketName}/${functionDirName}.zip`)}`);\n\n            log(`${color().green('[RWS Lambda Service]')} uploading ${color().yellowBright(zipPath)}...`);\n\n            const s3params = {\n                Bucket: s3BucketName,\n                Key: 'RWS-' + functionDirName + '.zip', // File name you want to save as in S3\n                Body: zipFile\n            };\n           \n            const s3Data = await S3Service.upload(s3params, true);      \n            log(`${color().green('[RWS Lambda Service]')} uploaded ${color().yellowBright(zipPath)} to ${color().red(`S3://${s3BucketName}/RWS-${functionDirName}.zip`)}`);\n      \n\n            const s3Path = s3Data.Key;\n            const Code = {\n                S3Bucket: s3BucketName,\n                S3Key: s3Path\n            };\n\n            const lambdaFunctionName= 'RWS-' + functionDirName;\n\n            const _HANDLER = 'index.handler';\n            const functionDidExist: boolean = await this.functionExists(lambdaFunctionName);      \n\n            if (functionDidExist) {\n                await AWSService.getLambda().updateFunctionCode({\n                    FunctionName: lambdaFunctionName,\n                    ...Code\n                }).promise();                  \n            } else {\n                const createParams: AWS.Lambda.Types.CreateFunctionRequest = {\n                    FunctionName: lambdaFunctionName,\n                    Runtime: 'nodejs18.x',\n                    Role: getAppConfig().get('aws_lambda_role'),\n                    Handler: _HANDLER,\n                    Code,\n                    VpcConfig: {\n                        SubnetIds: [subnetId],  // Add your subnet IDs\n                        SecurityGroupIds: await VPCService.listSecurityGroups(),  // Add your security group ID\n                    },\n                    FileSystemConfigs: [\n                        {\n                            Arn: accessPointArn,\n                            LocalMountPath: '/mnt/efs'  // The path in your Lambda function environment where the EFS will be mounted\n                        }\n                    ],\n                    MemorySize: 2048,\n                    Timeout: 15 * MIN,\n                    Environment: {\n                        Variables: {\n                            NODE_PATH: '/mnt/efs/res/modules/' + functionDirName,\n                            HOME: '/mnt/efs/res/tmp/' + functionDirName\n                        }\n                    }\n                };     \n        \n                log(color().green('[RWS Lambda Service] is ' + (functionDidExist ? 'updating' : 'creating') + ' lambda function named: ') + color().yellowBright(lambdaFunctionName));\n\n                await AWSService.getLambda().createFunction(createParams).promise();\n            }    \n\n            await this.waitForLambda(functionDirName, functionDidExist ? 'update' : 'creation');      \n      \n            if(functionDidExist){\n                const functionInfo = await this.getLambdaFunction(lambdaFunctionName);\n\n                if(functionInfo.Configuration.Handler !== _HANDLER){\n                    log(color().green('[RWS Lambda Service]') + ' is changing handler for Lambda function named: ' + color().yellowBright(lambdaFunctionName));\n\n                    await AWSService.getLambda().updateFunctionConfiguration({\n                        FunctionName: lambdaFunctionName,\n                        Handler: _HANDLER\n                    }, (err, data) => {\n                        if (err) {\n                            console.log(err, err.stack);\n                        } else {\n                            console.log(data);\n                        }\n                    }).promise();\n\n                    await this.waitForLambda(functionDirName, 'handler update');\n\n                    // await S3Service.delete({\n                    //   Bucket: s3params.Bucket,\n                    //   Key: s3params.Key\n                    // });\n\n                    // rwsLog('Deleting S3 Object after deploy: ' + color().red(`s3://${s3params.Bucket}/${s3params.Key}`));\n                }\n            }\n      \n            rwsLog('RWS Lambda Service', `lambda function \"${lambdaFunctionName}\" has been ${functionDidExist ? 'created' : 'updated'}`);\n\n            const npmPackage = this.getNPMPackage(functionDirName);\n\n            if((!!npmPackage.deployConfig) && npmPackage.deployConfig.webLambda === true){                \n\n                if((await APIGatewayService.findApiGateway(lambdaFunctionName)) === null){\n                    await this.setupGatewayForWebLambda(lambdaFunctionName, vpcId);\n                }\n\n                if(!(await VPCService.findPublicSubnetInVPC(vpcId))){                   \n                    await APIGatewayService.associateNATGatewayWithLambda(lambdaFunctionName);\n                }\n            }      \n        } catch (err: Error | any) {\n            error(err.message);\n            log(err.stack);\n            throw err;\n        }\n    }\n\n    getNPMPackage(lambdaDirName: string): INPMPackage\n    {\n        const moduleDir = path.resolve(__dirname, '..', '..').replace('dist/', '');\n        const npmPackagePath = `${moduleDir}/lambda-functions/${lambdaDirName}/package.json`;\n\n        if(!fs.existsSync(npmPackagePath)){\n            throw new Error(`The lambda folder \"${lambdaDirName}\" has no package.json inside.`);\n        }\n\n        return JSON.parse(fs.readFileSync(npmPackagePath, 'utf-8'));\n    }\n\n    async deployModules(functionName: string, efsId: string, vpcId: string, subnetId: string, force: boolean = false) {\n        const _RWS_MODULES_UPLOADED = '_rws_efs_modules_uploaded';\n        const savedKey = !force ? UtilsService.getRWSVar(_RWS_MODULES_UPLOADED) : null;\n        const S3Bucket = getAppConfig().get('aws_lambda_bucket');\n        const moduleDir = path.resolve(__dirname, '..', '..').replace('dist/', '');    \n    \n   \n        if(!this.region){\n            this.region = getAppConfig().get('aws_lambda_region');\n        }\n\n        if(savedKey){\n            log(`${color().green('[RWS Lambda Service]')} key saved. Deploying by cache.`);    \n            await EFSService.uploadToEFS(functionName, efsId, savedKey, S3Bucket, vpcId,subnetId);\n\n            return;\n        }\n\n        log(`${color().green('[RWS Lambda Service]')} ${color().yellowBright('deploying lambda modules on ' + this.region)}`);    \n\n        if(!savedKey){      \n            const oldDir = process.cwd();\n            process.chdir(`${moduleDir}/lambda-functions/${functionName}`);\n\n            rwsLog(`installing ${functionName} modules...`);\n\n            await ProcessService.runShellCommand('npm install', null, true);\n\n            rwsLog(color().green(`${functionName} modules have been installed.`));      \n\n            process.chdir(oldDir);\n\n            const packagePath = `${moduleDir}/lambda-functions/${functionName}/node_modules`;\n\n            const zipPath = await ZipService.createArchive(`${process.cwd()}/node_modules/.rws/lambda/RWS-${functionName}-modules.zip`, packagePath);\n\n            const s3params = {\n                Bucket: S3Bucket,\n                Key: `RWS-${functionName}-modules.zip`,\n                Body: fs.readFileSync(zipPath)\n            };\n    \n            log(`${color().green('[RWS Lambda Service]')} package file uploading ${zipPath} to S3Bucket`);\n\n            const s3Data = await S3Service.upload(s3params);\n            const s3Path = s3Data.Key;\n\n            // fs.unlinkSync(packagePath);      \n\n            log(`${color().green('[RWS Lambda Service]')} ${color().yellowBright('NPM package file is uploaded to ' + this.region + ' with key:  ' + s3Path)}`);\n\n            UtilsService.setRWSVar(_RWS_MODULES_UPLOADED, s3Path);      \n            await EFSService.uploadToEFS(functionName, efsId, s3Path, S3Bucket, vpcId, subnetId);\n\n            // await S3Service.delete({\n            //   Bucket: s3params.Bucket,\n            //   Key: s3params.Key\n            // });\n\n            // rwsLog('Deleting S3 Object after module deploy: ' + color().red(`s3://${s3params.Bucket}/${s3params.Key}`));\n        }   \n    }  \n\n    async getLambdaFunction(lambdaFunctionName: string): Promise<AWS.Lambda.GetFunctionResponse | null>\n    {\n        try {\n            return await AWSService.getLambda().getFunction({ FunctionName: lambdaFunctionName }).promise();\n        } catch (e: Error | any) {\n            return null;\n        }    \n    }\n\n    async functionExists(lambdaFunctionName: string): Promise<boolean> {\n        return !!(await this.getLambdaFunction(lambdaFunctionName)); \n    }\n\n    async waitForLambda(functionName: string, waitFor: string = null,timeoutMs: number = 300000, intervalMs: number = 5000): Promise<void> {\n        const lambdaFunctionName = 'RWS-' + functionName;\n        const startTime = Date.now();\n        log(`${color().yellowBright('[Lambda Listener] awaiting Lambda' + (waitFor !== null ? ' (' + waitFor + ')' : '') +' state change')}`);        \n\n        while (Date.now() - startTime < timeoutMs) {\n            log(`${color().yellowBright('[Lambda Listener] .')}`);      \n            const { Configuration } = await this.getLambdaFunction(lambdaFunctionName);\n\n            if (Configuration.State === 'Active') {\n                return; // Lambda is active and ready\n            }\n\n            // If the state is 'Failed', you can either throw an error or handle it differently based on your use case\n            if (Configuration.State === 'Failed') {\n                throw new Error(`Lambda function ${lambdaFunctionName} failed to be ready. Reason: ${Configuration.StateReason}`);\n            }\n\n            // Wait for the specified interval\n            await new Promise(resolve => setTimeout(resolve, intervalMs));\n        }\n\n        throw new Error(`Lambda function ${lambdaFunctionName} did not become ready within ${timeoutMs}ms.`);\n    }\n\n    async deleteLambda(lambdaFunctionName: string): Promise<void>\n    {\n\n        const restApi = await APIGatewayService.findApiGateway(lambdaFunctionName);\n\n        await APIGatewayService.deleteApiGateway(restApi.id);\n\n        await AWSService.getLambda().deleteFunction({\n            FunctionName: lambdaFunctionName\n        }).promise();\n    }\n\n    async invokeLambda(\n        functionDirName: string,\n        payload: any,    \n    ): Promise<{ StatusCode: number, Response: AWS.Lambda.InvocationResponse, CapturedLogs?: string[], InvocationType: string}> {\n\n        let invocationType: InvocationTypeType = 'RequestResponse';\n\n        const npmPackage = this.getNPMPackage(functionDirName);\n\n        if(!!npmPackage.deployConfig && npmPackage.deployConfig.invocationType){\n            invocationType = npmPackage.deployConfig.invocationType;\n        }\n\n        if(payload._invocationConfig){      \n            const invocationConfig = payload._invocationConfig;\n            invocationType = invocationConfig.invocationType;    \n            delete payload['_invocationConfig'];      \n        }\n\n        const params: AWS.Lambda.InvocationRequest = {\n            FunctionName: 'RWS-' + functionDirName,\n            InvocationType: invocationType,\n            Payload: JSON.stringify(payload),\n        };\n\n        log(color().green('[RWS Lambda Service]') + color().yellowBright(` invoking (with ${invocationType} type) \"RWS-${functionDirName}\" with payload: `));    \n        log(payload);\n  \n        try {\n            const response: AWS.Lambda.InvocationResponse = await AWSService.getLambda()\n                .invoke(params)\n                .promise();      \n        \n            return {\n                StatusCode: response.StatusCode,\n                Response: response,\n                InvocationType: invocationType\n            };\n        } catch(e: Error | any) {\n            error(e.message);\n            throw new Error(e);\n        }\n    }  \n\n    findPayload(lambdaArg: string): string\n    {\n        const executionDir = process.cwd();\n\n    \n        const moduleDir = path.resolve(__dirname, '..', '..').replace('dist/', '');\n\n        let payloadPath = `${executionDir}/payloads/${lambdaArg}.json`;\n    \n        if(!fs.existsSync(payloadPath)){\n            rwsLog(color().yellowBright(`No payload file in \"${payloadPath}\"`));      \n            const rwsPayloadPath = `${moduleDir}/payloads/${lambdaArg}.json`;\n\n            if(!fs.existsSync(rwsPayloadPath)){                    \n                rwsLog(color().red(`Found the payload file in \"${rwsPayloadPath}\"`));    \n                throw new Error('No payload');\n            }else{\n                rwsLog(color().green(`No payload file in \"${payloadPath}\"`));      \n\n                payloadPath = rwsPayloadPath;\n            }                                \n        }\n\n        return payloadPath;\n    }\n\n    async integrateGatewayResource(lambdaFunctionName: string, restApiId: string, resource: AWS.APIGateway.Resource, httpMethod = 'GET')\n    {\n\n        const lambdaInfo = await this.getLambdaFunction(lambdaFunctionName);\n        const lambdaArn =  lambdaInfo.Configuration.FunctionArn;\n\n        await AWSService.getAPIGateway().putIntegration({\n            restApiId: restApiId,\n            resourceId: resource.id,\n            httpMethod: httpMethod,\n            type: 'AWS_PROXY',\n            integrationHttpMethod: 'POST',\n            uri: `arn:aws:apigateway:${AWSService.getRegion()}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations`\n        }).promise();    \n    }\n\n    async setupGatewayForWebLambda(lambdaFunctionName: string, vpcId: string): Promise<void>\n    {\n\n        rwsLog('Creating API Gateway for Web Lambda...');\n        const restApiId = await APIGatewayService.createApiGateway(lambdaFunctionName);\n        const resource = await APIGatewayService.createResource(restApiId, lambdaFunctionName);\n\n        const httpMethods = ['GET', 'POST', 'PUT', 'DELETE'];\n        const apiMethods = [];\n\n        rwsLog('Pushing methods to API Gateway resource.');\n\n        for (const methodKey in httpMethods){\n            apiMethods.push(await APIGatewayService.createMethod(restApiId, resource, httpMethods[methodKey]));\n        }    \n\n        rwsLog(`Integrating API Gateway resource with \"${color().yellowBright(lambdaFunctionName)}\" lambda function.`);\n\n        for (const apiMethodKey in apiMethods){\n            const apiMethod: AWS.APIGateway.Method = apiMethods[apiMethodKey];\n            await this.integrateGatewayResource(lambdaFunctionName, restApiId, resource, apiMethod.httpMethod);\n        }    \n\n        await AWSService.getAPIGateway().createDeployment({\n            restApiId: restApiId,\n            stageName: 'prod'\n        }).promise();    \n\n        rwsLog(`API Gateway \"${color().yellowBright(lambdaFunctionName+'-API')}\" deployed.`);\n\n    }\n}\n\nexport default LambdaService.getSingleton();\nexport { LambdaService };","import TheService from './_service';\nimport crypto from 'crypto';\n\n\nimport path from 'path';\nimport fs from 'fs';\nimport TraversalService from './TraversalService';\nimport UtilsService from './UtilsService';\n\nclass MD5Service extends TheService {\n    async calculateFileMD5(filePath: string): Promise<string> \n    {\n    \n\n        return new Promise((resolve, reject) => {\n            const hash = crypto.createHash('md5');\n            const input = fs.createReadStream(filePath);\n\n            input.on('readable', () => {\n                const data = input.read();\n                if (data) {\n                    hash.update(data);\n                } else {\n                    resolve(hash.digest('hex'));\n                }\n            });\n\n            input.on('error', reject);\n        });\n    }\n\n    async generateCliHashes(fileNames: string[]): Promise<string[]>\n    {\n        const md5Pack: string[] = [];\n\n        for (const key in fileNames) {\n            const fileName: string = fileNames[key];          \n            const md5 = await this.calculateFileMD5(fileName);        \n            md5Pack.push(md5);\n        }\n\n        return md5Pack;\n    }\n\n    async cliClientHasChanged(consoleClientHashFile: string, tsFilename: string): Promise<boolean> \n    {\n        const moduleCfgDir = path.resolve(UtilsService.findRootWorkspacePath(process.cwd()), 'node_modules', '.rws');\n        const generatedHash: string = fs.readFileSync(consoleClientHashFile, 'utf-8');\n           \n\n        const cmdFiles = this.batchGenerateCommandFileMD5(moduleCfgDir);    \n        const currentSumHashes = this.md5((await this.generateCliHashes([tsFilename, ...cmdFiles])).join('/'));        \n\n        if (generatedHash !== currentSumHashes) {\n            return true;\n        }\n\n        return false;\n    }\n\n    batchGenerateCommandFileMD5(moduleCfgDir: string): string[] \n    {\n    \n        if (!fs.existsSync(moduleCfgDir)) {\n            fs.mkdirSync(moduleCfgDir);\n        }\n\n        if (!fs.existsSync(`${moduleCfgDir}/_rws_installed`) || !fs.existsSync(`${moduleCfgDir}/_cli_cmd_dir`)) {            \n            return [];\n        }        \n\n        const cmdDirPaths: string[] = fs.readFileSync(`${moduleCfgDir}/_cli_cmd_dir`, 'utf-8').split('\\n');        \n        let cmdFilesList: { [key: string]: string } = {};        \n\n        cmdDirPaths.forEach((dirPath) => {            \n            const cmdFiles = TraversalService.getAllFilesInFolder(dirPath, [\n                /.*\\/index\\.ts/g,\n                /.*\\/_command\\.ts/g\n            ]);\n\n            cmdFiles.forEach((cmdFile: string) => {\n                const fileNameSplit: string[] = cmdFile.split('/');\n                const fileName: string = fileNameSplit[fileNameSplit.length - 1];                \n                if(!Object.keys(cmdFilesList).includes(fileName)){\n                    cmdFilesList[fileName] = cmdFile;\n                }\n            });\n        });    \n        \n        return Object.keys(cmdFilesList).map((key) => cmdFilesList[key]);\n    }\n\n    md5(input: string): string\n    {\n        return crypto.createHash('md5').update(input).digest('hex');\n    }\n}\n\nexport default MD5Service.getSingleton();\nexport {MD5Service};","import TheService from './_service';\nimport { execSync } from 'child_process';\nimport ConsoleService from './ConsoleService';\n\nimport readline from 'readline';\nimport { rwsShell } from '@rws-framework/console';\n\nconst { color } = ConsoleService;\n\ninterface IExecCmdOpts {\n  verbose?: boolean\n  _default: any | null\n}\n\ntype InterpreterType = 'node' | 'none';\n\ninterface ICommandOpts {\n  exec_mode?: string\n  index?: number,\n  cwd?: string,\n  interpreter?: InterpreterType\n  env: {\n    [key: string]: string\n  }\n}\n\nclass ProcessService extends TheService {\n\n    getParentPID(pid: number): number {\n        const command = `ps -o ppid= -p ${pid} | awk '{print $1}'`;\n        return parseInt(execSync(command).toString().trim(), 10);\n    }\n\n    getAllProcessesIds(): number[] {\n        const startingPID = process.pid;\n\n        return [startingPID, this.getParentPID(startingPID)];\n    }\n\n    runShellCommand: (command: string, cwd?: string | null, silent?: boolean) => Promise<void> = rwsShell.runCommand;\n\n    sleep(ms: number): Promise<void> {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n    async getInput(prompt: string): Promise<string> {\n        const rl = readline.createInterface({\n            input: process.stdin,\n            output: process.stdout\n        });\n\n        return new Promise((resolve) => {\n            rl.question(color().red('[RWS CLI Input Prompt] ' + prompt), (answer) => {\n                resolve(answer);\n                rl.close();\n            });\n        });\n    }\n}\n\nexport default ProcessService.getSingleton();\n\nexport { IExecCmdOpts, ICommandOpts, ProcessService };","import 'reflect-metadata';\nimport express, { Request, Response } from 'express';\nimport TheService from './_service';\nimport Controller, { IHTTProuteMethod } from '../controllers/_controller';\nimport { IHTTProute, RWSHTTPRoutingEntry } from '../routing/routes';\nimport { IHTTProuteParams } from '../routing/annotations/Route';\nimport appConfig from './AppConfigService';\nimport path from 'path';\nimport { RWSError } from '../errors/index';\nimport ConsoleService from './ConsoleService';\n\n\ntype RouteEntry = {[key: string]: [IHTTProuteMethod, CallableFunction, IHTTProuteParams, string]};\n\ninterface IControllerRoutes {\n  get: RouteEntry;\n  post: RouteEntry;\n  put: RouteEntry;\n  delete: RouteEntry;\n}\n\n\n/**\n * \n */\nclass RouterService extends TheService{\n    constructor() {\n        super();\n    }\n\n    static responseTypeToMIME(responseType: string){\n        switch (responseType){\n        case 'html': return 'text/html';\n        default: return 'application/json';\n        }    \n    }\n\n    getRouterAnnotations(constructor: typeof Controller): Record<string, {annotationType: string, metadata: any}> {    \n        const annotationsData: Record<string, {annotationType: string, metadata: any}> = {};\n  \n        const propertyKeys: string[] = Reflect.getMetadataKeys(constructor.prototype).map((item: string): string => {\n            return item.split(':')[1];\n        });\n        \n        propertyKeys.forEach(key => {\n            const annotations: string[] = ['Route'];\n  \n            annotations.forEach(annotation => {\n                const metadataKey = `${annotation}:${String(key)}`;\n          \n                const meta = Reflect.getMetadata(metadataKey, constructor.prototype);\n            \n                if (meta) {\n                    annotationsData[String(key)] = {annotationType: annotation, metadata: meta};\n                }\n            });                 \n        });\n  \n        return annotationsData;\n    }\n\n    async assignRoutes(app: express.Express, routesPackage: RWSHTTPRoutingEntry[], controllerList: Controller[]): Promise<IHTTProute[]>\n    {                \n        const controllerRoutes: IControllerRoutes = {\n            get: {}, post: {}, put: {}, delete: {}\n        };        \n\n        controllerList.forEach((controllerInstance: Controller) => {          \n            const controllerMetadata: Record<string, {annotationType: string, metadata: any}> = this.getRouterAnnotations(controllerInstance.constructor as typeof Controller);\n          \n            if(controllerMetadata){            \n                Object.keys(controllerMetadata).forEach((key: string) => {\n                    if(controllerMetadata[key].annotationType !== 'Route'){\n                        return;    \n                    }\n\n                    this.setControllerRoutes(controllerInstance, controllerMetadata, controllerRoutes, key, app);\n                });\n            }\n        });      \n\n        let routes: IHTTProute[] = [];\n\n        routesPackage.forEach((item: RWSHTTPRoutingEntry) => {   \n            if ('prefix' in item && 'routes' in item && Array.isArray(item.routes)) {\n                // Handle the case where item is of type IPrefixedHTTProutes\n                routes = [...routes, ...item.routes.map((subRouteItem: IHTTProute): IHTTProute => {\n                    const subRoute: IHTTProute = {\n                        path: item.prefix + subRouteItem.path,\n                        name: subRouteItem.name\n                    };\n          \n                    return subRoute;\n                })];\n            } else {\n                // Handle the case where item is of type IHTTProute\n                routes.push(item as IHTTProute);\n            }        \n        });          \n      \n        routes.forEach((route: IHTTProute) => {          \n            Object.keys(controllerRoutes).forEach((_method: string) => {\n                const actions = controllerRoutes[_method as keyof IControllerRoutes];                           \n\n                if(!actions[route.name]){\n                    return;\n                }        \n                                          \n                this.addRouteToServer(actions, route);\n            });\n        });\n\n        return routes;\n    }\n\n    private addRouteToServer(actions: RouteEntry, route: IHTTProute){\n \n        const [routeMethod, appMethod, routeParams] = actions[route.name];                                \n      \n        if(!appMethod){\n            return;\n        }        \n\n        appMethod(route.path, async (req: Request, res: Response) => {\n            try {\n\n                const controllerMethodReturn = await routeMethod({\n                    req: req,\n                    query: req.query,\n                    params: route.noParams ? [] : req.params,\n                    data: req.body,\n                    res: res       \n                });     \n\n                res.setHeader('Content-Type', RouterService.responseTypeToMIME(routeParams.responseType));  \n\n                let status = 200;\n\n                if(controllerMethodReturn instanceof RWSError){\n                    status = controllerMethodReturn.getCode();\n                }\n\n                this.sendResponseWithStatus(res, status, routeParams, controllerMethodReturn);          \n          \n                return;\n            }catch(err: Error | RWSError | any){   \n                let errMsg;          \n                let stack;\n\n                if(err.printFullError){\n                    err.printFullError();\n                    errMsg = err.getMessage();\n            \n                    stack = err.getStack();\n                }else{\n                    errMsg = err.message;\n                    ConsoleService.error(errMsg);\n                    console.log(err.stack); \n                    stack = err.stack;      \n                    err.message = errMsg;     \n                }                 \n\n                const code = err.getCode ? err.getCode() : 500;\n          \n                this.sendResponseWithStatus(res, code, routeParams, {\n                    success: false,\n                    data: {\n                        error: {\n                            code: code,\n                            message: errMsg,\n                            stack\n                        }\n                    }\n                });          \n            }\n        });\n    }\n\n    private sendResponseWithStatus(res: Response, status: number, routeParams: IHTTProuteParams, output: any)\n    {\n        if(routeParams.responseType === 'json' || !routeParams.responseType){                \n            res.status(status).send(output);\n            return;\n        }                                              \n\n        if(routeParams.responseType === 'html' && appConfig().get('pub_dir')){          \n            res.status(status).sendFile(path.join(appConfig().get('pub_dir'),  output.template_name + '.html'));\n            return;\n        }\n\n        res.status(status).send();\n    }\n\n    private setControllerRoutes(\n        controllerInstance: Controller, \n        controllerMetadata: Record<string, {annotationType: string, metadata: any}>, \n        controllerRoutes: IControllerRoutes, key: string, app: express.Express): void\n    {\n        const action: IHTTProuteMethod = (controllerInstance as Controller).callMethod(key);\n        const meta = controllerMetadata[key].metadata;                                        \n        switch(meta.method) {\n        case 'GET':\n            controllerRoutes.get[meta.name] = [action.bind(controllerInstance), app.get.bind(app), meta.params, key]; \n            break;\n\n        case 'POST':\n            controllerRoutes.post[meta.name] = [action.bind(controllerInstance), app.post.bind(app), meta.params, key];\n            break;\n\n        case 'PUT':\n            controllerRoutes.put[meta.name] = [action.bind(controllerInstance), app.put.bind(app), meta.params, key]; \n            break;\n\n        case 'DELETE':\n            controllerRoutes.delete[meta.name] = [action.bind(controllerInstance), app.delete.bind(app), meta.params, key];\n            break;  \n        }\n    }\n    \n    hasRoute(routePath: string, routes: IHTTProute[]): boolean\n    {\n        return this.getRoute(routePath, routes) !== null;\n    }\n\n    getRoute(routePath: string, routes: IHTTProute[]): IHTTProute | null\n    {\n\n        // const front_routes = appConfig().get('front_routes');\n\n        const foundRoute = routes.find((item: IHTTProute) => {\n            return item.path.indexOf(routePath) > -1 && !item.noParams;\n        });      \n\n        return foundRoute ? foundRoute : null;\n    }\n}\n\nexport default RouterService.getSingleton();\nexport {\n    RouterService\n};","import TheService from './_service';\nimport AWSService from './AWSService';\nimport ConsoleService from './ConsoleService';\n\nconst { log, error, color } = ConsoleService;\n\nclass S3Service extends TheService {\n    constructor(){\n        super();\n    }\n\n    async upload(params: AWS.S3.Types.PutObjectRequest, override: boolean = true, region: string = null): Promise<AWS.S3.ManagedUpload.SendData | null>\n    {\n     \n        if (override) {\n            const exists = await this.objectExists({ Bucket: params.Bucket, Key: params.Key }, region);\n            if (exists) {\n\n                log(`${color().green('[RWS Lambda Service]')} ${color().red('Deleting existing S3 object:')} ${params.Key}`);\n                await this.deleteObject({ Bucket: params.Bucket, Key: params.Key });\n            }\n        }else{\n            const exists = await this.objectExists({ Bucket: params.Bucket, Key: params.Key }, region);\n            if (exists) {\n                return null;\n            }\n        }\n        \n        return AWSService.getS3(region).upload(params).promise();\n    }\n\n    async downloadObject(params: AWS.S3.Types.GetObjectRequest, region: string = null): Promise<AWS.S3.GetObjectOutput | null>\n    {     \n        return AWSService.getS3(region).getObject(params).promise();\n    }\n\n    async downloadToString(s3key: string, bucket: string, region?: string): Promise<string>\n    {\n        return new Promise((resolve, reject) => {\n            this.downloadObject({\n                Key: s3key,   \n                Bucket: bucket\n            }, region).then((s3pageResponse: AWS.S3.GetObjectOutput | null) => {\n                if (s3pageResponse.Body instanceof Buffer || s3pageResponse.Body instanceof Uint8Array) {        \n                    resolve(s3pageResponse.Body.toString());\n                } else if (typeof s3pageResponse.Body === 'string') {        \n                    resolve(s3pageResponse.Body);\n                } else {\n                // Handle other types or throw an error\n                    console.error('Unsupported data type');\n                    reject('Unsupported data type');\n                }\n            });                 \n        });\n    }\n\n    async delete(params: AWS.S3.Types.DeleteObjectRequest, region: string = null): Promise<void>\n    {\n        await this.deleteObject({ Bucket: params.Bucket, Key: params.Key }, region);\n\n        return;\n    }\n\n    async objectExists(params: AWS.S3.Types.HeadObjectRequest, region: string = null): Promise<boolean> {\n        try {\n            await AWSService.getS3(region).headObject(params).promise();\n            return true;\n        } catch (error: Error | any) {\n            if (error.code === 'NotFound') {\n                return false;\n            }\n            throw error;\n        }\n    }\n\n    async deleteObject(params: AWS.S3.Types.DeleteObjectRequest, region: string = null): Promise<void> {\n        await AWSService.getS3(region).deleteObject(params).promise();\n    }\n\n    async bucketExists(bucketName: string, region: string = null): Promise<string> { \n        try {            \n            await AWSService.getS3(region).headBucket({ Bucket: bucketName }).promise();\n\n            return bucketName;\n        } catch (err: Error | any) {\n            if (err.code === 'NotFound') {\n                // Create bucket if it doesn't exist\n                const params = {\n                    Bucket: bucketName,\n                };                \n\n                await AWSService.getS3(region).createBucket(params).promise();\n                log(`${color().green('[RWS Lambda Service]')} s3 bucket ${bucketName} created.`);\n                return bucketName;\n            } else {\n                // Handle other errors\n                error(`Error checking bucket ${bucketName}:`, err);\n            }\n        }\n    }\n}\n\nexport default S3Service.getSingleton();\nexport {\n    S3Service\n};","import { Server as ServerBase, Socket } from 'socket.io';\nimport HTTPS from 'https';\nimport getConfigService from './AppConfigService';\nimport cors, {CorsOptions} from 'cors';\nimport HTTP, { ServerResponse } from 'http';\nimport ITheSocket from '../interfaces/ITheSocket';\nimport AuthService, { _DEFAULTS_USER_LIST_MANAGER } from './AuthService';\nimport fs from 'fs';\nimport expressServer, { Request, Response, Express } from 'express';\nimport RouterService from './RouterService';\nimport { AxiosRequestHeaders } from 'axios';\nimport { IHTTProute, IPrefixedHTTProutes, RWSHTTPRoutingEntry } from '../routing/routes';\nimport ConsoleService from './ConsoleService';\nimport UtilsService from './UtilsService';\nimport path from 'path';\nimport bodyParser from 'body-parser';\nimport Error404 from '../errors/Error404';\nimport RWSError from '../errors/_error';\nimport compression from 'compression';\nimport IAuthUser from '../interfaces/IAuthUser';\nimport MD5Service from './MD5Service';\nimport IDbUser from '../interfaces/IDbUser';\n\n//@ts-expect-error no-types\nimport fileUpload from 'express-fileupload';\n\nimport {\n    WsRoutes,\n    UserTokens,\n    JWTUsers,\n    CookieType,\n    IInitOpts,\n    RWSServer,\n    ServerStarter,\n    RWSServerPair,\n    ServerControlSet\n} from '../interfaces/ServerTypes';\n\nconst __HTTP_REQ_HISTORY_LIMIT = 50;\nconst getCurrentLineNumber = UtilsService.getCurrentLineNumber;\n\nconst wsLog = async (fakeError: Error, text: any, socketId: string = null, isError: boolean = false): Promise<void> => {\n    const logit = isError ? console.error : console.log;\n  \n    const filePath = module.id;\n    //const fileName = filePath.split('/').pop();\n\n    const marker = '[RWS Websocket]';\n\n    logit(isError ? ConsoleService.color().red(marker) : ConsoleService.color().green(marker), '|',`${filePath}:${await getCurrentLineNumber(fakeError)}`,`|${socketId ? ConsoleService.color().blueBright(` (${socketId})`) : ''}:`,`${text}`);\n};\n\nconst MINUTE = 1000 * 60;\n\nconst _DEFAULT_SERVER_OPTS: IInitOpts = {\n    ssl_enabled: null,\n    port_http: null,\n    port_ws: null\n};\n\nclass ServerService extends ServerBase {    \n    private static http_server: RWSServerPair;\n    private static ws_server: RWSServerPair;\n    private server_app: Express; \n    private options: IInitOpts; \n    private srv: RWSServer;\n    private tokens: UserTokens = {};\n    private users: JWTUsers = {};\n    private corsOptions: CorsOptions;\n\n    constructor(webServer: RWSServer, expressApp: Express, opts: IInitOpts){ \n        const _DOMAIN: string =  opts.cors_domain || opts.domain;\n\n        const WEBSOCKET_CORS = {\n            origin: _DOMAIN,\n            methods: ['GET', 'POST']\n        };\n\n        const cors_headers: string[] = ['Content-Type', 'x-csrf-token','Accept', 'Authorization', 'x-junctionapi-version'];\n\n        super(webServer, {\n            cors: WEBSOCKET_CORS,\n            transports: [opts.transport || 'websocket'],\n            pingTimeout: 5*MINUTE\n        }); \n        \n\n        this.server_app = expressApp;\n        this.srv = webServer;\n        this.options = opts;\n\n        const corsHeadersSettings = {\n            'Access-Control-Allow-Origin': _DOMAIN, // Replace with your frontend domain\n            'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',\n            'Access-Control-Allow-Headers': cors_headers.join(', '),\n            'Access-Control-Allow-Credentials': 'true'\n        };\n\n        this.srv.on('options', (req: Request, res: Response) => {\n            res.writeHead(200, corsHeadersSettings);\n            res.end();\n        });\n\n        this.server_app.use((req, res, next) => {\n\n            Object.keys(corsHeadersSettings).forEach((key: string) => {\n                res.setHeader(key, (corsHeadersSettings as any)[key]);\n            });\n\n            next();\n        });\n\n        this.corsOptions = {\n            origin: _DOMAIN, // Replace with the appropriate origins or set it to '*'\n            methods: ['GET', 'POST', 'OPTIONS'],\n            allowedHeaders: cors_headers\n        };\n\n        const corsMiddleware = cors(this.corsOptions);                 \n\n        this.use(async (socket, next) => {\n            const request: HTTP.IncomingMessage = socket.request;\n            const response: ServerResponse = new ServerResponse(request);\n            corsMiddleware(request, response, next);            \n        });        \n\n        this.server_app.options('*', cors(this.corsOptions)); // Enable pre-flight for all routes                \n    }\n\n    public static async initializeApp<PassedUser extends IDbUser>(opts: IInitOpts = _DEFAULT_SERVER_OPTS, UserConstructor: new () => PassedUser = null): Promise<ServerControlSet>\n    {                \n        opts = Object.assign(_DEFAULT_SERVER_OPTS, opts);\n        const isSSL = opts.ssl_enabled !== null || typeof opts.ssl_enabled === 'undefined' ? opts.ssl_enabled : getConfigService().get('features')?.ssl;\n\n        if (!ServerService.http_server) { \n            const [baseHttpServer, expressHttpServer] = await ServerService.createServerInstance(opts);\n           \n            const http_instance = new ServerService(baseHttpServer, expressHttpServer, opts);\n            const httpPort = opts.port_http || getConfigService().get('port');\n            \n            ServerService.http_server = { instance: await http_instance.configureHTTPServer<PassedUser>(UserConstructor), starter: http_instance.createServerStarter(httpPort, () => {\n                ConsoleService.log(ConsoleService.color().green('Request/response server' + ` is working on port ${httpPort} using HTTP${isSSL ? 'S' : ''} protocol`));\n            })};  \n        }\n\n        if (!ServerService.ws_server) {\n            const [baseWsServer, expressWsServer] = await ServerService.createServerInstance(opts);\n\n            const ws_instance = new ServerService(baseWsServer, expressWsServer, opts);\n            const wsPort = opts.port_ws || getConfigService().get('ws_port');\n\n            ServerService.ws_server = { instance: await ws_instance.configureWSServer<PassedUser>(UserConstructor), starter: ws_instance.createServerStarter(wsPort, () => {\n                ConsoleService.log(ConsoleService.color().green('Websocket server' + ` is working on port ${wsPort}. SSL is ${isSSL ? 'enabled' : 'disabled'}.`));\n            })};  \n        }\n        \n        const pacakgeDir = UtilsService.findRootWorkspacePath(process.cwd());   \n        const rwsDir = `${pacakgeDir}/node_modules/.rws`;\n\n        if(!fs.existsSync(rwsDir)){\n            fs.mkdirSync(rwsDir);\n        }          \n        \n        return {\n            websocket: this.ws_server,\n            http: this.http_server,\n        };\n    }\n\n    disconnectClient = (clientSocket: Socket) => {\n        clientSocket.disconnect(true);\n    };\n    \n    setJWTToken(socketId: string, token: string): void {\n        if(token.indexOf('Bearer') > -1){\n            this.tokens[socketId] = token.split(' ')[1];\n        }else{\n            this.tokens[socketId] = token;\n        }\n    }    \n\n    public webServer(): RWSServer\n    { \n        return this.srv; \n    }  \n\n    static async createServerInstance(opts: IInitOpts): Promise<[RWSServer, Express]>\n    {\n        const app = expressServer();       \n        const isSSL = getConfigService().get('features')?.ssl;\n        const options: {key?: Buffer, cert?: Buffer} = {};\n\n        if(isSSL){\n            const sslCert = getConfigService().get('ssl_cert');\n            const sslKey = getConfigService().get('ssl_key');  \n\n            if( !sslKey || !sslCert || !fs.existsSync(sslCert) || !fs.existsSync(sslKey)){\n                throw new Error('SSL keys set in config do not exist.');\n            }\n\n            options.key = fs.readFileSync(sslKey);\n            options.cert = fs.readFileSync(sslCert);       \n        }       \n\n        const webServer = isSSL ? HTTPS.createServer(options, app) : HTTP.createServer(app);            \n\n        return [webServer, app];\n    }\n\n    createServerStarter(port: number, injected: () => void = () => {}): ServerStarter\n    {\n        return (async (callback: () => void = () => {}) => {            \n            this.webServer().listen(port, () => {\n                injected();\n                callback();\n            });\n        }).bind(this);\n    }\n\n    public async configureHTTPServer<PassedUser extends IDbUser>(UserConstructor:  new (params: any) => PassedUser = null): Promise<ServerService>\n    {\n        if(this.options.authorization){\n            this.server_app.use(async (req: Request, res: Response, next: () => void) => {\n                const reqId: string = MD5Service.md5(req.url);\n                let theUser: IAuthUser = null;\n                let theToken: string = null;\n\n                const setUser = (reqId: string, user: IAuthUser) => {\n                    theUser = user;\n\n                    if(UserConstructor){                   \n                        this.users[reqId] = new UserConstructor(theUser);\n                    }else{\n                        this.users[reqId] = theUser;\n                    }             \n                };\n\n                const setToken = (noneId: string, token: string) => {\n                    theToken = token;\n\n                    this.tokens[reqId] = theToken;\n                };\n\n                if(Object.keys(this.users).length > __HTTP_REQ_HISTORY_LIMIT){\n                    this.users = {};\n                    this.tokens = {};\n                }\n\n                const authPassed: boolean | null = await AuthService.authenticate(reqId, req.headers.authorization, {\n                    ..._DEFAULTS_USER_LIST_MANAGER,\n                    set: setUser,\n                    setToken,\n                    getList: () => this.users,\n                    get: (reqId: string) => this.users[reqId],     \n                    getTokenList: () => this.tokens,\n                    getToken: (reqId: string) => this.tokens[reqId]\n                });\n\n                const authHeader: string = req.headers.authorization;                        \n        \n                if(authPassed === null || authHeader === undefined){         \n                    ConsoleService.warn('RWS AUTH WARNING', ConsoleService.color().blue(`[${reqId}]`), 'XHR token is not passed');       \n                    res.writeHead(400, 'Bad request: No token passed');\n                    res.end();\n                \n                    return;\n                }   \n\n                if(authPassed === false){                            \n                    ConsoleService.error('RWS AUTH ERROR', ConsoleService.color().blue(`[${reqId}]`), 'XHR token unauthorized');\n                    res.writeHead(403, 'Token unauthorized');\n                    res.end();\n                \n                    return;\n                }   \n            \n                next();\n            });\n    \n\n            this.use(async (socket, next ) => {\n                if(this.options.onAuthorize){\n                    await this.options.onAuthorize<PassedUser>(this.users[socket.id] as any, 'ws');\n                }\n                next();\n            });\n        }\n\n\n        this.server_app.use(fileUpload());\n      \n        // app.use(express.json({ limit: '200mb' }));\n        this.server_app.use(bodyParser.json({ limit: '200mb' }));    \n        \n        if(getConfigService().get('features')?.routing_enabled){\n            if(this.options.pub_dir){\n                this.server_app.use(expressServer.static(this.options.pub_dir));\n            }     \n    \n            this.server_app.set('view engine', 'ejs');   \n\n            const processed_routes: IHTTProute[] = await RouterService.assignRoutes(this.server_app, this.options.httpRoutes, this.options.controllerList);\n\n            this.server_app.use((req, res, next) => {                              \n                if(!RouterService.hasRoute(req.originalUrl, processed_routes)){\n                    ServerService.on404(req, res);\n                }else{\n                    next();\n                }            \n            });      \n        }\n\n        this.use(compression);\n        \n\n        return this;\n    }\n\n    public async configureWSServer<PassedUser extends IDbUser>(UserConstructor:  new (params: any) => PassedUser = null): Promise<ServerService>\n    { \n        if(!getConfigService().get('features')?.ws_enabled){          \n            console.error('[RWS] Websocket server is disabled in configuration');\n            return this;\n        }\n\n        this.sockets.on('connection', async (socket: Socket) => {            \n            const socketId: string = socket.id;\n\n            wsLog(new Error(), 'Client connection recieved', socketId);\n\n            socket.on('disconnect',  async (reason: string) => {                    \n                wsLog(new Error(), `Client disconnected due to ${reason}`, socketId);\n                \n                if (reason === 'transport error') {\n                    wsLog(new Error(), 'Transport error', socketId, true);\n                }                    \n            });\n\n            socket.on('error', async (error) => {\n                \n                wsLog(new Error(), error, socketId, true);                    \n            });\n            \n\n            socket.on('__PING__', async () => {\n                wsLog(new Error(), 'Recieved ping... Emmiting response callback.', socketId);\n                socket.emit('__PONG__', '__PONG__');\n            });                \n\n            Object.keys(this.options.wsRoutes).forEach((eventName) => {                \n                const SocketClass = this.options.wsRoutes[eventName];    \n                \n                new SocketClass(ServerService.ws_server).handleConnection(socket, eventName);\n            });\n        });\n\n        if(this.options.authorization){\n        \n            this.use(async (socket, next ) => {                \n                const request: HTTP.IncomingMessage = socket.request;\n                const response: ServerResponse = new ServerResponse(request);\n\n                const token = this.tokens[socket.id] || socket.handshake.auth.token;                \n\n                const passedAuth: boolean | null = await AuthService.authenticate(socket.id, token, {\n                    getList: () => this.users,\n                    get: (socketId: string) => this.users[socketId],\n                    set: (socketId: string, user: IAuthUser) => {\n                        if(UserConstructor){\n                            this.users[socketId] = new UserConstructor(user);\n                        }else{\n                            this.users[socketId] = user;\n                        }\n                       \n                    },\n                    getTokenList: () => this.tokens,\n                    getToken: (socketId: string) => this.tokens[socketId],\n                    setToken: (socketId: string, token: string) => {\n                        this.tokens[socketId] = token;\n                    },\n                    disconnectClient: () => {\n                        this.disconnectClient(socket);\n                    }\n                });\n\n                if(passedAuth === false){                    \n                    ConsoleService.error('RWS AUTH ERROR', ConsoleService.color().blue(`[${socket.id}]`), 'Websockets token unauthorized');\n                    response.writeHead(403, 'Token unauthorized');\n                    response.end();  \n                }else if(passedAuth === null){                                 \n                    ConsoleService.warn('RWS AUTH WARNING', ConsoleService.color().blue(`[${socket.id}]`), 'Websockets token is not passed');\n                    response.writeHead(400, 'Bad request: No token');\n                    response.end(); \n                }else{                    \n                    next();\n                }\n            });\n        }\n\n        this.use(async (socket, next ) => {\n            if(this.options.onAuthorize){\n                await this.options.onAuthorize<PassedUser>(this.users[socket.id] as any, 'http');\n            }\n            next();\n        });\n\n        return this;\n    }\n\n    static on404(req: Request, res: Response): void\n    {\n        const error =  new Error404(new Error('Sorry, the page you\\'re looking for doesn\\'t exist.'), req.url);\n\n        error.printFullError();    \n        \n        let response = error.getMessage();\n\n        if(req.headers.accept.indexOf('text/html') > -1){\n            const htmlTemplate = this.processErrorTemplate(error);\n\n            response = htmlTemplate;\n        }   \n      \n        res.status(404).send(response);\n    }\n\n    static processErrorTemplate(error: RWSError): string\n    {\n        return fs.readFileSync( path.resolve(__dirname, '..', '..', '..', 'html') + '/error.html', 'utf-8')\n            .replace('{{error_number}}', error.getCode().toString())\n            .replace('{{error_message}}', error.getMessage())\n            .replace('{{error_stack_trace}}',  error.getStackTraceString() !== '' ? `<h4>Stack trace:</h4><pre>${error.getStackTraceString()}</pre>` : '')\n        ;\n    }\n\n    static cookies = {                \n        getCookies: async(headers: AxiosRequestHeaders): Promise<CookieType> =>\n        {\n            return new Promise((resolve) => {\n                resolve(headers.cookie.split(';').map((cookieEntry: string) => {\n                    const [key, value] = cookieEntry.split('=');\n        \n                    return {\n                        [key]: value\n                    };\n                }));\n            }); \n        },        \n        getCookie: async (headers: AxiosRequestHeaders, key: string): Promise<string | null> => \n        {\n            const cookiesBin: CookieType = await ServerService.cookies.getCookies(headers);\n        \n            if(!cookiesBin[key]){\n                return null;\n            }\n        \n            return cookiesBin[key];\n        }        \n    };\n\n    public getOptions(): IInitOpts\n    {\n        return this.options;\n    }\n\n    public getCorsOptions(): CorsOptions\n    {\n        return this.corsOptions;\n    }\n}\n\nexport default ServerService;\nexport { WsRoutes, IHTTProute, IInitOpts, ITheSocket, IPrefixedHTTProutes, RWSHTTPRoutingEntry, RWSServer, RWSServerPair, ServerControlSet, ServerStarter as RWSServerStarter };","import TheService from './_service';\n\nimport path from 'path';\nimport fs from 'fs';\n\n\nclass TraversalService extends TheService {\n    getAllFilesInFolder(folderPath: string, ignoreFilenames: RegExp[] = [], recursive: boolean = false): string[] \n    {\n        const files: string[] = [];\n  \n        function traverseDirectory(currentPath: string): void \n        {\n            const entries = fs.readdirSync(currentPath, { withFileTypes: true });\n  \n            entries.forEach(entry => {\n                const entryPath = path.join(currentPath, entry.name);\n  \n                if (entry.isFile()) {\n                    let pass = true;\n\n                    ignoreFilenames.forEach((regEx: RegExp) => {                        \n                        if(regEx.test(entryPath)){\n                            pass = false;\n                        }\n                    })\n\n                    if(pass){\n                        files.push(entryPath);\n                    }            \n                } else if (entry.isDirectory() && recursive) {\n                    traverseDirectory(entryPath);\n                }\n            });\n        }\n  \n        traverseDirectory(folderPath);\n\n        return files;\n    }\n}\n\nexport default TraversalService.getSingleton();\nexport {TraversalService};","import TheService from './_service';\nimport fs from 'fs';\nimport path from 'path';\nimport { rwsPath } from '@rws-framework/console';\n\nimport { SourceMapConsumer, RawSourceMap  } from 'source-map';\n\nclass UtilsService extends TheService {  \n    private _startTime: [number, number];\n    findRootWorkspacePath = rwsPath.findRootWorkspacePath;\n\n    startExecTimeRecord()\n    {\n        this._startTime = process.hrtime();\n    }\n\n    endExecTimeRecord(): number\n    {\n\n        if(this._startTime === null){\n            return 0;\n        }\n\n        const elapsed = process.hrtime(this._startTime);   \n    \n        this._startTime = null;\n\n        return Math.round(elapsed[0] * 1000 + elapsed[1] / 1e6);\n    }\n\n    filterNonEmpty<T>(arr: T[]): T[]\n    {\n        return arr.filter((argElement: T) => argElement !== '' && typeof argElement !== 'undefined' && argElement !== null);\n    }\n\n    isInterface<T>(func: any): func is T {\n        return typeof func === 'function';\n    }\n\n    getRWSVar(fileName: string): string | null\n    {\n        const packageDir = this.findRootWorkspacePath(process.cwd());    \n        const moduleCfgDir = `${packageDir}/node_modules/.rws`;\n\n        if(!fs.existsSync(`${moduleCfgDir}/${fileName}`)){\n            return;\n        }\n\n        try{\n            return fs.readFileSync(`${moduleCfgDir}/${fileName}`, 'utf-8');\n        } catch (e: any){\n            return null;\n        }\n    }   \n  \n    setRWSVar(fileName: string, value: string)\n    {\n        const packageDir = this.findRootWorkspacePath(process.cwd());    \n        const moduleCfgDir = `${packageDir}/node_modules/.rws`;\n\n        if(!fs.existsSync(moduleCfgDir)){\n            fs.mkdirSync(moduleCfgDir);\n        }\n\n        fs.writeFileSync(`${moduleCfgDir}/${fileName}`, value);\n    }\n\n    async getCurrentLineNumber(error: Error = null): Promise<number> {\n        if(!error){\n            error = new Error();\n        }\n        const stack = error.stack || '';\n        const stackLines = stack.split('\\n');\n        const relevantLine = stackLines[1];\n\n        // Extract file path from the stack line\n        const match = relevantLine.match(/\\((.*?):\\d+:\\d+\\)/);\n        if (!match) return -1;\n        const filePath = match[1];\n\n        // Assuming the source map is in the same directory with '.map' extension\n        const sourceMapPath = `${filePath}.map`;    \n\n        // Read the source map\n        const sourceMapContent = fs.readFileSync(sourceMapPath, 'utf-8');    \n        const sourceMap: RawSourceMap = JSON.parse(sourceMapContent);\n        const consumer = await new SourceMapConsumer(sourceMap);\n\n        // Extract line and column number\n        const lineMatch = relevantLine.match(/:(\\d+):(\\d+)/);\n        if (!lineMatch) return -1;\n\n        const originalPosition = consumer.originalPositionFor({\n            line: parseInt(lineMatch[1]),\n            column: parseInt(lineMatch[2]),\n        });\n\n        return originalPosition.line;\n    }\n}\n\nexport default UtilsService.getSingleton();\nexport {UtilsService};","import AWSService from './AWSService';\nimport ConsoleService from './ConsoleService';\nimport TheService from './_service';\n\nconst { log, warn, error, rwsLog } = ConsoleService;\n\n\nclass VPCService extends TheService{\n\n    async findDefaultSubnetForVPC(): Promise<[string, string]> \n    {\n        try {\n            const response = await AWSService.getEC2().describeVpcs({ Filters: [{ Name: 'isDefault', Values: ['true'] }] }).promise();\n\n            if (response.Vpcs && response.Vpcs.length > 0) {                \n                return [await this.getSubnetIdForVpc(response.Vpcs[0].VpcId), response.Vpcs[0].VpcId];\n            } else {\n                console.log('No default VPC found.');\n            }\n        } catch (error) {\n            console.error('Error fetching default VPC:', error);\n        }\n    }\n\n    private async getSubnetIdForVpc(vpcId: string): Promise<string> {\n        const params = {\n            Filters: [{\n                Name: 'vpc-id',\n                Values: [vpcId]\n            }]\n        };\n\n        const result = await AWSService.getEC2().describeSubnets(params).promise();\n\n        if (result.Subnets && result.Subnets.length > 0) {\n            return result.Subnets.map(subnet => subnet.SubnetId as string)[0];\n        } else {\n            return null;\n        }\n    }\n\n    async listSecurityGroups(): Promise<string[]> \n    {\n        try {\n            const result = await AWSService.getEC2().describeSecurityGroups().promise();\n\n            const securityGroups = result.SecurityGroups || [];\n\n            const securityGroupIds = securityGroups.map(sg => sg.GroupId);            \n\n            return securityGroupIds;\n        } catch (error) {\n            console.error('Error fetching security groups:', error);\n            return [];\n        }\n    }   \n\n    async getDefaultRouteTable(vpcId: string, subnetId: string = null): Promise<AWS.EC2.RouteTable>\n    {\n        const filters = [ {\n            Name: 'vpc-id',\n            Values: [vpcId]\n        }];\n\n        if(subnetId){\n            filters.push({\n                Name: 'association.subnet-id',\n                Values: [subnetId]\n            });\n        }\n\n        const routeTablesResponse = await AWSService.getEC2().describeRouteTables({\n            Filters: filters\n        }).promise();        \n\n        return routeTablesResponse.RouteTables?.find(rt => {\n            // A default route table won't have explicit subnet associations\n            return !rt.Associations || rt.Associations.every(assoc => !assoc.SubnetId);\n        });\n    }\n\n    async createVPCEndpointIfNotExist(vpcId: string): Promise<string> {\n        const endpointName = 'RWS-S3-GATE';\n        const serviceName = `com.amazonaws.${AWSService.getRegion()}.s3`;        \n    \n        // Describe VPC Endpoints\n        const existingEndpoints = await AWSService.getEC2().describeVpcEndpoints({\n            Filters: [\n                {\n                    Name: 'tag:Name',\n                    Values: [endpointName]\n                }\n            ]\n        }).promise();\n\n        const defaultRouteTable = await this.getDefaultRouteTable(vpcId);\n\n        // Check if the endpoint already exists\n        const endpointExists = existingEndpoints.VpcEndpoints && existingEndpoints.VpcEndpoints.length > 0;\n    \n        if (!endpointExists) {\n            // Create VPC Endpoint for S3\n            \n            const endpointResponse = await AWSService.getEC2().createVpcEndpoint({\n                VpcId: vpcId,\n                ServiceName: serviceName,\n                VpcEndpointType: 'Gateway',\n                RouteTableIds: [defaultRouteTable.RouteTableId], // Add your route table IDs here\n                TagSpecifications: [\n                    {\n                        ResourceType: 'vpc-endpoint',\n                        Tags: [\n                            {\n                                Key: 'Name',\n                                Value: endpointName\n                            }\n                        ]\n                    }\n                ]\n            }).promise();\n            \n    \n            if (endpointResponse.VpcEndpoint) {\n                log(`VPC Endpoint \"${endpointName}\" created with ID: ${endpointResponse.VpcEndpoint.VpcEndpointId}`);\n                return endpointResponse.VpcEndpoint.VpcEndpointId;\n            } else {\n                error('Failed to create VPC Endpoint');\n                throw new Error('Failed to create VPC Endpoint');\n            }\n        } else {\n            log(`VPC Endpoint \"${endpointName}\" already exists.`);\n            return existingEndpoints.VpcEndpoints[0].VpcEndpointId;\n\n        }\n    }\n\n    async ensureRouteToVPCEndpoint(vpcId: string, vpcEndpointId: string): Promise<void> {\n    \n        try {\n            const routeTable = await this.getDefaultRouteTable(vpcId);\n\n            const routes = routeTable.Routes || [];\n            const hasS3EndpointRoute = routes.some((route: AWS.EC2.Route) => route.GatewayId === vpcEndpointId);    \n\n            if (!hasS3EndpointRoute) {\n                // Get the prefix list associated with the S3 VPC endpoint\n                const vpcEndpointDescription  = (await AWSService.getEC2().describeVpcEndpoints({\n                    VpcEndpointIds: [vpcEndpointId]\n                }).promise()).VpcEndpoints;\n\n                rwsLog('Creating VPC Endpoint route');\n                // Add a route to the route table\n                await AWSService.getEC2().createRoute({\n                    RouteTableId: routeTable.RouteTableId,\n                    DestinationCidrBlock: '0.0.0.0/0',\n                    VpcEndpointId: vpcEndpointDescription[0].VpcEndpointId\n                }).promise();\n\n                log(`Added route to VPC Endpoint ${vpcEndpointId} in Route Table ${routeTable.RouteTableId}`);\n            } else {\n                log(`Route to VPC Endpoint ${vpcEndpointId} already exists in Route Table ${routeTable.RouteTableId}`);\n            }\n            \n        } catch (error) {\n            console.error('Error ensuring route to VPC Endpoint:', error);\n        }\n    }\n\n    async findPublicSubnetInVPC(vpcId: string): Promise<AWS.EC2.Subnet | null> {\n        const subnets = await AWSService.getEC2().describeSubnets({ Filters: [{ Name: 'vpc-id', Values: [vpcId] }] }).promise();\n\n        for (const subnet of subnets.Subnets || []) {\n            const routeTables = await AWSService.getEC2().describeRouteTables({\n                Filters: [{ Name: 'association.subnet-id', Values: [subnet.SubnetId!] }]\n            }).promise();\n\n            for (const routeTable of routeTables.RouteTables || []) {\n                for (const route of routeTable.Routes || []) {\n                    if (route.DestinationCidrBlock === '0.0.0.0/0' && route.GatewayId && route.GatewayId.startsWith('igw-')) {\n                        return subnet;\n                    }\n                }\n            }\n        }\n\n        return null;\n    }\n\n    calculateNextThirdOctetIncrement(range: number): number {\n    \n        // Calculate the number of addresses represented by the CIDR range\n        const numAddresses = Math.pow(2, 32 - range);\n    \n        // Calculate how many blocks in the third octet those addresses span\n        const increment = Math.ceil(numAddresses / 256);\n    \n        const nextThirdOctet = increment;\n\n        return nextThirdOctet;\n    }\n\n    async createPublicSubnet(vpcId: string, range: number = 24,passedCIDRBlock: string = null): Promise<AWS.EC2.CreateSubnetResult> {\n        const _SUBNET_PASS_VAL = this.calculateNextThirdOctetIncrement(range);\n\n        const vpcInfo = await AWSService.getEC2().describeVpcs({ VpcIds: [vpcId] }).promise();\n        if (!vpcInfo.Vpcs || vpcInfo.Vpcs.length === 0) {\n            throw new Error('VPC not found.');\n        }\n\n        const vpcCidrBlock = vpcInfo.Vpcs[0].CidrBlock;\n    \n        // Retrieve existing subnets within the VPC\n        const subnets = await AWSService.getEC2().describeSubnets({ Filters: [{ Name: 'vpc-id', Values: [vpcId] }] }).promise();\n        const existingCidrs = subnets.Subnets?.map(subnet => subnet.CidrBlock).sort((a, b) => a.localeCompare(b, undefined, { sensitivity: 'base' })) || [];        \n        \n        const baseIp: string = (passedCIDRBlock ? passedCIDRBlock : vpcCidrBlock).split('/')[0];\n        \n        const maxThirdOctet = Math.max(...existingCidrs.map(cidr => {\n            const octets = cidr.split('.');\n            return parseInt(octets[2]);\n        }));\n\n        const rerun = async (newOctet: number, newRange: number) => await this.createPublicSubnet(vpcId, range, `${baseIp.split('.').slice(0, 2).join('.')}.${newOctet}.0/${newRange}`);\n\n        const baseThirdOctet = existingCidrs.length ? maxThirdOctet : 0;\n\n        let nextThirdOctet: number = baseThirdOctet + _SUBNET_PASS_VAL;\n    \n        const newCidrBlock = `${baseIp.split('.').slice(0, 2).join('.')}.${nextThirdOctet }.0/${range.toString()}`;\n        rwsLog(`Trying to create public subnet for \"${vpcId}\" VPC with \"${newCidrBlock}\" address`);\n\n        if (!existingCidrs.includes(newCidrBlock)) {\n            try {\n                const subnet = await AWSService.getEC2().createSubnet({\n                    VpcId: vpcId,\n                    CidrBlock: newCidrBlock\n                }).promise();  \n                \n                rwsLog(`Created public subnet \"${subnet.Subnet.SubnetId}\" for \"${vpcId}\" VPC with \"${newCidrBlock}\" address`);\n\n                return subnet;\n            } catch (err: Error | any) {\n                // If there's an error due to the CIDR block, adjust and try again\n                warn(err.code);\n\n                if (['InvalidSubnet.Range', 'InvalidSubnet.Conflict'].includes(err.code)) {\n                    nextThirdOctet += _SUBNET_PASS_VAL;\n\n                    error('CIDR Address taken. Retrying...');\n\n                    return await rerun(nextThirdOctet, range);\n                } else {\n                    throw err;\n                }\n            }\n        } else {\n            nextThirdOctet += _SUBNET_PASS_VAL;\n\n            error('CIDR Address already used. Retrying...');\n            return await rerun(nextThirdOctet, range);\n        }\n    }\n\n\n    async waitForNatGatewayAvailable(natGatewayId: string): Promise<void> {\n        try {\n            rwsLog(`Waiting for NAT Gateway ${natGatewayId}...`);\n\n            await AWSService.getEC2().waitFor('natGatewayAvailable', {\n                NatGatewayIds: [natGatewayId]\n            }).promise();\n            rwsLog(`NAT Gateway ${natGatewayId} is now available.`);\n        } catch (err) {\n            error(`Error waiting for NAT Gateway ${natGatewayId} to become available:`);\n            log(err);\n            throw err;\n        }\n    }\n}\n\nexport default VPCService.getSingleton();\nexport {VPCService};","import RWSService from './_service';\n\nimport { EmbeddingsInterface } from '@langchain/core/embeddings';\n\nimport RWSVectorStore, { VectorDocType } from '../models/convo/VectorStore';\n\nclass VectorStoreService extends RWSService\n{\n    async createStore(docs: VectorDocType, embeddings: EmbeddingsInterface): Promise<RWSVectorStore>\n    {        \n        return await (new RWSVectorStore(docs, embeddings)).init();\n    }    \n}\n\nexport default VectorStoreService.getSingleton();\nexport {VectorStoreService};","import TheService from './_service';\nimport ConsoleService from './ConsoleService';\n\nimport path from 'path';\nimport fs from 'fs';\n\nimport { BlobReader, BlobWriter, ZipWriter } from '@zip.js/zip.js';import { Error500 } from '../errors';\n\nconst { log, color } = ConsoleService;\n\ninterface IZipParams {\n    recursive?: boolean\n    format?: string\n    destpath?: string;\n    ignore?: string[]\n}\n\nclass ZipService extends TheService {\n\n    constructor() {\n        super();        \n    }   \n\n    async addFileToZip(zipWriter: ZipWriter<Blob>, filePath: string, zipPath: string, params: IZipParams){\n        const data = new Uint8Array(fs.readFileSync(filePath));\n        const blob = new Blob([data]);\n        const reader = new BlobReader(blob);\n        await zipWriter.add(zipPath, reader);\n    }\n\n    async addDirectoryToZip(zipWriter: ZipWriter<Blob>, dirPath: string, zipPath: string, params: IZipParams){\n        const items = fs.readdirSync(dirPath);\n        for (const item of items) {\n            const fullPath = path.join(dirPath, item);\n            const stat = fs.statSync(fullPath);\n            if (stat.isDirectory() && params.recursive) {\n                await this.addDirectoryToZip(zipWriter, fullPath, `${zipPath}/${item}`, params);\n            } else if (stat.isFile()) {\n                await this.addFileToZip(zipWriter, fullPath, `${zipPath}/${item}`, params);\n            }\n        }\n    }\n\n    async createArchive(outputPath: string, sourcePath: string, params: IZipParams = { recursive: true }): Promise<string> {\n        const writer = new BlobWriter();\n        const zipWriter = new ZipWriter(writer);\n\n        try {\n            await this.addDirectoryToZip(zipWriter, sourcePath, outputPath, params);\n            await zipWriter.close();\n    \n            // Assuming you want to save the Blob to a file\n            const blob = await writer.getData();\n            fs.writeFileSync(outputPath, Buffer.from(await blob.arrayBuffer()));\n    \n            log(`${color().green('[RWS Lambda Service]')} ZIP created at: ${outputPath}`);\n            return outputPath;\n        } catch (e: Error | any) {\n            throw new Error500('ZIP process error: ' + e.message);\n        }\n    }    \n\n    listFilesInDirectory(directoryPath: string): string[] {\n        const files = fs.readdirSync(directoryPath);\n\n        const filePaths: string[] = [];\n    \n        files.forEach(file => {\n            const fullPath = path.join(directoryPath, file);\n            const stats = fs.statSync(fullPath);\n    \n            if (stats.isFile()) {\n                filePaths.push(fullPath);\n            }\n        });\n\n        return filePaths;\n    }\n}\n\nexport default ZipService.getSingleton();\nexport { IZipParams, ZipService };","export default abstract class TheService{\n    _RELOADABLE: boolean = false;\n\n    constructor() {\n    }\n\n    protected static _instances: { [key: string]: TheService } | null = {};\n\n    public static getSingleton<T extends new (...args: any[]) => TheService>(this: T): InstanceType<T> {\n        const className = this.name;\n\n        if (!TheService._instances[className]) {\n            TheService._instances[className] = new this();\n        }\n\n        return TheService._instances[className] as InstanceType<T>;\n    }\n\n    public getReloadable(): string | null {\n        return (this as any).constructor._RELOADABLE || this._RELOADABLE;\n    }\n\n    public reloadService<T extends new (...args: any[]) => TheService>(this: T, ...params: any[]): InstanceType<T> {    \n        const className = this.name;\n        TheService._instances[className] = new this(...params);        \n        return TheService._instances[className] as InstanceType<T>;\n    }\n}","import { Socket } from 'socket.io';\nimport { DefaultEventsMap } from 'socket.io/dist/typed-events';\nimport ITheSocket from '../interfaces/ITheSocket';\nimport ServerService from '../services/ServerService';\n\ninterface JSONMessage{\n    method: string;\n    msg: any;\n    user_id: string;\n}\n\ninterface BaseResponse<T> {\n    data?: T;\n    success: boolean;\n    error?: Error;\n}\n\ninterface ErrorResponse extends BaseResponse<any> {\n    error: Error;\n    success: false;\n}\n\ninterface SocketWsResponse<T> extends BaseResponse<T> {\n    method: string;\n}\n\nabstract class TheSocket implements ITheSocket{\n    protected server: any;\n\n    constructor(server: ServerService) {        \n        this.server = server;\n    }\n\n    handleConnection(socket: Socket<DefaultEventsMap, DefaultEventsMap, DefaultEventsMap, any>, routeName: string): Socket<DefaultEventsMap, DefaultEventsMap, DefaultEventsMap, any> {\n        throw new Error('Method not implemented.');\n    }\n    middlewareImplementation?(next: any): void {\n        throw new Error('Method not implemented.');\n    }\n\n    getJson(input: string): any\n    {\n        return JSON.parse(input);\n    \n    }\n\n    sendJson(input: object): string\n    {\n        return JSON.stringify(input);\n    }\n\n    emitMessage<T>(method: string, socket: Socket, data?: T): void\n    {\n        const payload: SocketWsResponse<T> = { success: true, method, data: null };\n\n        if(data){\n            payload.data = data;\n        }\n\n        socket.emit(method, this.sendJson(payload));              \n    }\n\n    getData<T>(input: string): T\n    {\n        return this.getJson(input).msg as T\n    }\n\n    throwError(method: string, socket: Socket, error: Error): void\n    {        \n        socket.emit(method, this.sendJson({\n            error: error,\n            success: false\n        }));\n    }\n}\n\nexport default TheSocket;\nexport {JSONMessage, BaseResponse as BaseWsResponse, ErrorResponse as ErrorWsResponse};","import {ITestVars} from '../helpers/TestHelper';\n\nexport default abstract class TestAction\n{\n    protected vars!: ITestVars;\n\n    constructor(vars: ITestVars){\n        this.vars = vars;\n    }\n\n    abstract fire(noReturn: boolean): Promise<any>;\n}","import axios, { AxiosInstance, CreateAxiosDefaults } from 'axios';\nimport https from 'https';\n\nimport getAppConfig from '../../services/AppConfigService';\n\nexport default {\n    createInstance: (opts: CreateAxiosDefaults): AxiosInstance => {\n        const axiosInstance = axios.create(Object.assign({\n            headers: {\n                'Content-Type': 'application/json',\n                'Origin': getAppConfig().get('domain')\n            },\n            withCredentials: true,\n            httpsAgent: new https.Agent({  \n                rejectUnauthorized: false // This line will ignore SSL verification.\n            })\n        }, opts));\n\n        axiosInstance.defaults.timeout = 60000; // Increase timeout to 60000ms (60 seconds)\n                \n        axiosInstance.interceptors.request.use((config) => {           \n            return config;\n        });\n\n        return axiosInstance;\n    }\n};","import puppeteer, {Browser, Protocol } from 'puppeteer';\n\ninterface IBrowserParams {\n    url: string\n}\n\nclass WebBrowser {\n    private app: Browser;\n    private params: IBrowserParams;\n\n    constructor(app: Browser, params: IBrowserParams) {\n        this.app = app;\n        this.params = params;    \n    }\n\n    async getCookies(): Promise<{[key: string]: Protocol.Network.Cookie}>\n    {        \n        const page = await this.app.newPage();\n        await page.goto(this.params.url);\n    \n        // Get cookies\n        const cookiesArray  = await page.cookies();        \n    \n        await this.app.close();\n\n        return cookiesArray.reduce((acc: { [key: string]: Protocol.Network.Cookie }, cookie: Protocol.Network.Cookie) => {\n            acc[cookie.name] = cookie;\n            return acc;\n        }, {});\n    }\n\n    async getCookieString(): Promise<string>\n    {        \n        return Object.entries(await this.getCookies())\n            .map(([name, cookie]) => `${name}=${cookie.value}`)\n            .join('; ');\n    }\n}\n\nasync function create(params: IBrowserParams): Promise<WebBrowser>\n{\n    const browser = await puppeteer.launch({\n        headless: 'new',\n        args: ['--no-sandbox', '--disable-setuid-sandbox'],\n        ignoreHTTPSErrors: true, \n    });\n\n    return new WebBrowser(browser, params);\n}\n\nexport default {\n    create,  \n};\n\nexport { IBrowserParams, WebBrowser };","import getConfig, { IAppConfig } from '../../services/AppConfigService';\nimport fs from 'fs';\nimport path from 'path';\nimport ServerService, { ServerControlSet } from '../../services/ServerService';\nimport { io, Socket } from 'socket.io-client';\n\nimport * as _mocha from 'mocha';\nimport chai, { expect } from 'chai';\nimport chaiLike from 'chai-like';\nimport chaiThings from 'chai-things';\n\nimport {WebBrowser} from './BrowserHelper';\n\nimport TestCase from '../test_cases/_test_case';\nimport UtilsService from '../../services/UtilsService';\nimport { json } from 'body-parser';\n\n\nchai.use(chaiLike);\nchai.use(chaiThings);\n\ninterface ITheUser {\n    [key: string]: any,\n    jwt_token: string,\n}\n\ninterface ITestVars {\n    theUser: ITheUser | null,\n    socket: Socket | null,\n    server: ServerControlSet | null,\n    browser: WebBrowser | null\n}\n\nconst createTestVars = (cfg: IAppConfig = null): ITestVars => { \n    getConfig(cfg);\n    return {\n        server: null,\n        socket: null,\n        theUser: null,\n        browser: null\n    };\n};\n  \nconst connectToWS = async (jwt_token: string, ping_event: string = '__PING__', ping_response_event: string = '__PONG__'): Promise<Socket> => {\n    const headers = {\n        Authorization: 'Bearer ' + jwt_token\n    };\n\n    try {            \n        process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';\n\n\n        const _TESTPORT = await getConfig().get('test_port');\n\n        const socket: Socket = io(`https://localhost:${_TESTPORT}`, {      \n            extraHeaders: headers,\n            rejectUnauthorized: false\n        });            \n\n        socket.on('error', (error) => {\n            console.error('Socket Error:', error);\n        });\n        \n        socket.on('connect_error', (error) => {\n            console.error('Connection error:', error);\n        });            \n\n        return new Promise((done) => {\n            socket.on(ping_response_event, () => {                    \n                done(socket);\n            });    \n\n            socket.emit(ping_event);\n        });        \n    } catch (error: any) {\n        console.error('Error initializing socket:', error.context.responseText);\n        throw error;\n    }                  \n};\n\ntype LoginCallback = (testVars: ITestVars) => Promise<any> | null;\ntype LoginCallbackSet = { before?: LoginCallback, beforeEach?: LoginCallback, afterEach?: LoginCallback, after?: LoginCallback } | null;\n\nconst setLoggedLifeCycle = (testVars: ITestVars, callbacks?: LoginCallbackSet) => {\n    setLifeCycle(testVars, {\n        before: async () => {\n            testVars.server = await startServer();\n\n            if(callbacks?.after){\n                return await callbacks.after(testVars);\n            }\n\n            return;\n        },\n        beforeEach: async () => {            \n            if(callbacks?.beforeEach){\n                return await callbacks.beforeEach(testVars);\n            }\n\n            return;\n        },\n        afterEach: async () => {\n            if (testVars.socket && testVars.socket.connected) {\n                testVars.socket.disconnect();\n            }\n\n            return;\n        },\n        after: async () => {            \n            if(testVars.server){\n                testVars.server.http.instance.close();\n                testVars.server.websocket.instance.close();\n            }  \n            \n            if(callbacks?.after){\n                return await callbacks.after(testVars);                \n            }\n\n            return;\n        }\n    }, {\n        beforeEach: 30000\n    });\n};  \n\nconst startServer = async (): Promise<ServerControlSet> => {\n    const _TESTPORT = await getConfig().get('test_port');\n    const _TESTWSPORT = await getConfig().get('test_ws_port');\n\n    const server = await ServerService.initializeApp<any>({        \n        controllerList: await getConfig().get('controller_list'),\n        wsRoutes: await getConfig().get('ws_routes'),\n        httpRoutes: await getConfig().get('http_routes'),\n        port_http: _TESTPORT,\n        port_ws: _TESTWSPORT\n    });\n    \n    return server;\n};\n\nconst setLifeCycle = (testVars: ITestVars, callbacks?: LoginCallbackSet, timeouts?: { before?: number, beforeEach?: number, after?: number }): void => {\n    MOCHA.before(async function() {\n        if(timeouts?.before){\n            this.timeout(timeouts.before);        \n        }            \n\n        if(callbacks?.before){\n            await callbacks.before(testVars);        \n        }\n    });\n\n    MOCHA.beforeEach(async function() {\n        if(timeouts?.beforeEach){\n            this.timeout(timeouts.beforeEach);        \n        }         \n        \n        if(callbacks?.beforeEach){\n            await callbacks.beforeEach(testVars);        \n        }\n\n        return;\n    });\n\n    MOCHA.afterEach(async function () {   \n        if(callbacks?.afterEach){\n            await callbacks.afterEach(testVars);        \n        }\n    });\n    \n    MOCHA.after(async function () {   \n        if(callbacks?.after){\n            await callbacks.after(testVars);        \n        }\n    });\n};\n\nconst swapCfgFile = (cfgPath: string, content: object, revert: boolean = false): void => {\n    const rwsCfgDir = path.resolve(UtilsService.findRootWorkspacePath(process.cwd()),'node_modules','.rws');\n\n    if(rwsCfgDir){\n       \n    }\n\n    if(revert){\n        fs.unlinkSync(cfgPath);\n        fs.copyFileSync(`${rwsCfgDir}/_test_tmp_cfg_bck`, cfgPath);     \n        \n        return;\n    }\n\n\n    fs.copyFileSync(cfgPath, `${rwsCfgDir}/_test_tmp_cfg_bck`);\n    fs.unlinkSync(cfgPath);\n    fs.writeFileSync(cfgPath, JSON.stringify(content, null, 2));\n    return;    \n}\n\nconst strToJson = <T extends Object>(str: string): T => {\n    return JSON.parse(str) as T;\n}\n\nconsole.log('IMPORTED CALLBACK');\n\n\n(String.prototype as any).toJson = strToJson;\n\nexport default {  \n    strToJson,\n    swapCfgFile,  \n    connectToWS,    \n    startServer,    \n    createTestVars,\n    disableLogging: () => { console.log = () => {}; }\n};\n\nconst MOCHA = Object.assign(_mocha, {\n    expect,\n    setLifeCycle,    \n    setLoggedLifeCycle\n});\n\nexport {\n    ITheUser, MOCHA, ITestVars, TestCase\n};","import AxiosHelper from './helpers/AxiosHelper';\nimport BrowserHelper from './helpers/BrowserHelper';\nimport TestHelper, {MOCHA, ITestVars, ITheUser} from './helpers/TestHelper';\n\n\nimport TestAction  from './actions/_action';\nimport TestCase from './test_cases/_test_case';\n\n\nexport {ITestVars, AxiosHelper, BrowserHelper, TestAction, TestCase, TestHelper, MOCHA, ITheUser};","import {ITestVars} from '../helpers/TestHelper';\n\nexport default abstract class TestCase\n{    \n    protected constructor(){  \n        throw new Error('Class not instantiable');  \n    }\n\n    static declare(testVars: ITestVars): void {\n        throw new Error('Method not implemented.');    \n    }\n}","module.exports = require(\"@langchain/community/vectorstores/faiss\");","module.exports = require(\"@prisma/client\");","module.exports = require(\"@rws-framework/console\");","module.exports = require(\"@zip.js/zip.js\");","module.exports = require(\"aws-sdk\");","module.exports = require(\"axios\");","module.exports = require(\"body-parser\");","module.exports = require(\"chai\");","module.exports = require(\"chai-like\");","module.exports = require(\"chai-things\");","module.exports = require(\"chalk\");","module.exports = require(\"child_process\");","module.exports = require(\"compression\");","module.exports = require(\"cors\");","module.exports = require(\"crypto\");","module.exports = require(\"express\");","module.exports = require(\"express-fileupload\");","module.exports = require(\"fs\");","module.exports = require(\"fs/promises\");","module.exports = require(\"http\");","module.exports = require(\"https\");","module.exports = require(\"jsonwebtoken\");","module.exports = require(\"langchain/chains\");","module.exports = require(\"langchain/document\");","module.exports = require(\"langchain/document_loaders/fs/text\");","module.exports = require(\"langchain/text_splitter\");","module.exports = require(\"mocha\");","module.exports = require(\"mongodb\");","module.exports = require(\"path\");","module.exports = require(\"pino\");","module.exports = require(\"pino-pretty\");","module.exports = require(\"puppeteer\");","module.exports = require(\"readline\");","module.exports = require(\"reflect-metadata\");","module.exports = require(\"socket.io\");","module.exports = require(\"socket.io-client\");","module.exports = require(\"source-map\");","module.exports = require(\"uuid\");","module.exports = require(\"xml2js\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","","// startup\n// Load entry module and return exports\n// This entry module used 'module' so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./backend/rws/exec/src/rws.ts\");\n",""],"names":[],"sourceRoot":""}